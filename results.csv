classification,subtitle,reported,issued,package_name,package_url,type,keywords,aliases,references,patched,description,unaffected,References
NA,Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'),"January 23, 2024","January 24, 2024",trillium-client(crates.io),/packages/trillium-client.html,Vulnerability,,"{'text': 'GHSA-9f9p-cp3c-72jf', 'url': 'https://github.com/advisories/GHSA-9f9p-cp3c-72jf'}, {'text': 'CVE-2024-23644', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23644'}","{'text': 'https://github.com/trillium-rs/trillium/security/advisories/GHSA-9f9p-cp3c-72jf', 'url': 'https://github.com/trillium-rs/trillium/security/advisories/GHSA-9f9p-cp3c-72jf'}",>=0.5.4,,Insufficient validation of outbound header values may lead to request splitting or response splitting attacks in scenarios where attackers have sufficient control over outbound headers.,"Discovered and reported by@divergentdave, {'text': '@divergentdave', 'url': 'https://github.com/divergentdave'}, Advisory available underCC0-1.0license., {'text': 'CC0-1.0', 'url': 'https://spdx.org/licenses/CC0-1.0.html'}"
NA,Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'),"January 23, 2024","January 24, 2024",trillium-http(crates.io),/packages/trillium-http.html,Vulnerability,,"{'text': 'GHSA-9f9p-cp3c-72jf', 'url': 'https://github.com/advisories/GHSA-9f9p-cp3c-72jf'}, {'text': 'CVE-2024-23644', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23644'}","{'text': 'https://github.com/trillium-rs/trillium/security/advisories/GHSA-9f9p-cp3c-72jf', 'url': 'https://github.com/trillium-rs/trillium/security/advisories/GHSA-9f9p-cp3c-72jf'}",>=0.3.12,,Insufficient validation of outbound header values may lead to request splitting or response splitting attacks in scenarios where attackers have sufficient control over outbound headers.,"Discovered and reported by@divergentdave, {'text': '@divergentdave', 'url': 'https://github.com/divergentdave'}, Advisory available underCC0-1.0license., {'text': 'CC0-1.0', 'url': 'https://spdx.org/licenses/CC0-1.0.html'}"
NA,Multiple issues involving quote API,"January 21, 2024","January 22, 2024",shlex(crates.io),/packages/shlex.html,Vulnerability,"code-execution, file-disclosure","{'text': 'GHSA-r7qv-8r2h-pg27', 'url': 'https://github.com/advisories/GHSA-r7qv-8r2h-pg27'}","{'text': 'https://github.com/comex/rust-shlex/security/advisories/GHSA-r7qv-8r2h-pg27', 'url': 'https://github.com/comex/rust-shlex/security/advisories/GHSA-r7qv-8r2h-pg27'}",>=1.3.0,Version,<1.2.1,<1.2.1,<1.2.1,<1.2.1,"Affected versions of this crate allowed the bytes{and\xa0to appear
unquoted and unescaped in command arguments. If the output ofquoteorjoinis passed to a shell, then what should be a
single command argument could be interpreted as multiple arguments. This does notdirectlyallow arbitrary command execution (you can't inject a
command substitution or similar).  But depending on the command you're running,
being able to inject multiple arguments where only one is expected could lead
to undesired consequences, potentially including arbitrary command execution. The flaw was corrected in version 1.2.1 by escaping additional characters.
Updating to 1.3.0 is recommended, but 1.2.1 offers a more minimal fix if
desired. Workaround: Check for the bytes{and\xa0inquote/joininput or
output. (Note:{is problematic because it is used for glob expansion.\xa0is
problematic because it's treated as a word separator inspecific
environments.) Version 1.3.0 deprecates thequoteandjoinAPIs in favor oftry_quoteandtry_join, which behave the same except that they haveResultreturn
type, returningErrif the input contains nul bytes. Strings containing nul bytes generally cannot be used in Unix command arguments
or environment variables, and most shells cannot handle nul bytes even
internally.  If you try to pass one anyway, then the results might be
security-sensitive in uncommon scenarios.More details here. Due to the low severity, the behavior of the originalquoteandjoinAPIs
has not changed; they continue to allow nuls. Workaround: Manually check for nul bytes inquote/joininput or output. Thequotefamily of functions does not and cannot escape control characters.
With non-interactive shells this is perfectly safe, as control characters have
no special effect.  But if you writing directly to the standard input of an
interactive shell (or through a pty), then control characterscan cause
misbehavior including arbitrary command injection. This is essentially unfixable, and has not been patched.  But as of version
1.3.0, documentation has been added. Future versions ofshlexmay add API variants that avoid the issue at the
cost of reduced portability. Advisory available underCC0-1.0license.",shlex;;bytes;;join,<1.2.1
NA,Resource exhaustion vulnerability in h2 may lead to Denial of Service (DoS),"January 17, 2024","January 17, 2024",h2(crates.io),/packages/h2.html,Vulnerability,denial-of-service,,"{'text': 'https://github.com/Netflix/security-bulletins/blob/master/advisories/third-party/2019-002.md', 'url': 'https://github.com/Netflix/security-bulletins/blob/master/advisories/third-party/2019-002.md'}",CVE-2019-9514,^0.3.24>=0.4.2,"An attacker with an HTTP/2 connection to an affected endpoint can send a steady stream of invalid frames to force the
generation of reset frames on the victim endpoint.
By closing their recv window, the attacker could then force these resets to be queued in an unbounded fashion,
resulting in Out Of Memory (OOM) and high CPU usage. This fix is corrected inhyperium/h2#737, which limits the total number of
internal error resets emitted by default before the connection is closed. Advisory available underCC0-1.0license."
NA,Remotely exploitable DoS condition in Rosenpass <=0.2.0,"November  4, 2023","December 21, 2023",rosenpass(crates.io),/packages/rosenpass.html,Vulnerability,denial-of-service,,"{'text': 'https://github.com/rosenpass/rosenpass/commit/93439858d1c44294a7b377f775c4fc897a370bb2', 'url': 'https://github.com/rosenpass/rosenpass/commit/93439858d1c44294a7b377f775c4fc897a370bb2'}",>=0.2.1,Affected version do this crate did not validate the size of buffers when attempting to decode messages. This allows an attacker to trigger a panic by sending a UDP datagram with a 1 byte payload over network. This flaw was corrected by validating the size of the buffers before attempting to decode the message. Advisory available underCC0-1.0license.
NA,Some Ref methods are unsound with some type parameters,"December 14, 2023","December 18, 2023",zerocopy(crates.io),/packages/zerocopy.html,Vulnerability,,"{'text': 'https://github.com/google/zerocopy/issues/716', 'url': 'https://github.com/google/zerocopy/issues/716'}",">=0.2.9, <0.3.0>=0.3.2, <0.4.0>=0.4.1, <0.5.0>=0.5.2, <0.6.0>=0.6.6, <0.7.0>=0.7.31",<0.2.2,Version,">=0.2.2, <0.2.9>=0.3.0, <0.3.2>=0.4.0, <0.4.1>=0.5.0, <0.5.2>=0.6.0, <0.6.6>=0.7.0, <0.7.31",">=0.2.2, <0.2.9>=0.3.0, <0.3.2>=0.4.0, <0.4.1>=0.5.0, <0.5.2>=0.6.0, <0.6.6>=0.7.0, <0.7.31",">=0.2.2, <0.2.9>=0.3.0, <0.3.2>=0.4.0, <0.4.1>=0.5.0, <0.5.2>=0.6.0, <0.6.6>=0.7.0, <0.7.31",">=0.2.2, <0.2.9>=0.3.0, <0.3.2>=0.4.0, <0.4.1>=0.5.0, <0.5.2>=0.6.0, <0.6.6>=0.7.0, <0.7.31","TheRefmethodsinto_ref,into_mut,into_slice, andinto_slice_mutare unsound
and may allow safe code to exhibit undefined behavior when used withRef<B, T>whereBiscell::Reforcell::RefMut. Note that these
methods remain sound when used withBtypes other thancell::Reforcell::RefMut. See https://github.com/google/zerocopy/issues/716 for a more in-depth analysis. The current plan is to yank the affected versions soon. See
https://github.com/google/zerocopy/issues/679 for more detail. Advisory available underCC0-1.0license.",zerocopy;;ref;;into_mut,">=0.2.2, <0.2.9>=0.3.0, <0.3.2>=0.4.0, <0.4.1>=0.5.0, <0.5.2>=0.6.0, <0.6.6>=0.7.0, <0.7.31"
NA,Insufficient covariance check makes self_cell unsound,"November 10, 2023","November 11, 2023",self_cell(crates.io),/packages/self_cell.html,Vulnerability,,"{'text': 'https://github.com/Voultapher/self_cell/issues/49', 'url': 'https://github.com/Voultapher/self_cell/issues/49'}",">=0.10.3, <1.0.0>=1.0.2","All public versions prior to1.02used an insufficient check to ensure that
users correctly marked the dependent type as eithercovariantornot_covariant. This allowed users to mark a dependent as covariant even though
its type was not covariant but invariant, for certain invariant types involving
trait object lifetimes. One example for such a dependent type istype Dependent<'a> = RefCell<Box<dyn fmt::Display + 'a>>. Such a type allowed
unsound usage in purely safe user code that leads to undefined behavior. The
patched versions now produce a compile time error if such a type is marked ascovariant. Advisory available underCC0-1.0license."
NA,gix-transport code execution vulnerability,"September 23, 2023","September 25, 2023",gix-transport(crates.io),/packages/gix-transport.html,Vulnerability,code-execution,"{'text': 'https://github.com/Byron/gitoxide/pull/1032', 'url': 'https://github.com/Byron/gitoxide/pull/1032'}, {'text': 'https://secure.phabricator.com/T12961', 'url': 'https://secure.phabricator.com/T12961'}",>=0.36.1,"Thegix-transportcrate prior to the patched version 0.36.1 would allow attackers to
use malicious ssh clone URLs to pass arbitrary arguments to thesshprogram, leading
to arbitrary code execution. PoC:gix clone 'ssh://-oProxyCommand=open$IFS-aCalculator/foo' This will launch a calculator on OSX. See https://secure.phabricator.com/T12961 for more details on similar vulnerabilities ingit. Thanks forvin01for disclosing the issue. Advisory available underCC0-1.0license."
NA,libwebp: OOB write in BuildHuffmanTable,"September 12, 2023","September 13, 2023(last modified: September 26, 2023)",libwebp-sys(crates.io),/packages/libwebp-sys.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2023-5129', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-5129'}, {'text': 'CVE-2023-4863', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-4863'}",>=0.9.3,"GoogleandMozillahave released security advisories for RCE due to heap overflow in libwebp. Google warns the vulnerability has been exploited in the wild. libwebp needs to be updated to 1.3.2 to include a patch for ""OOB write in BuildHuffmanTable"". Advisory available underCC0-1.0license."
NA,libwebp: OOB write in BuildHuffmanTable,"September 12, 2023","September 13, 2023(last modified: September 26, 2023)",libwebp-sys2(crates.io),/packages/libwebp-sys2.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2023-5129', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-5129'}, {'text': 'CVE-2023-4863', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-4863'}",>=0.1.8,"GoogleandMozillahave released security advisories for RCE due to heap overflow in libwebp. Google warns the vulnerability has been exploited in the wild. libwebp needs to be updated to 1.3.2 to include a patch for ""OOB write in BuildHuffmanTable"". Advisory available underCC0-1.0license."
NA,Use-after-free invec_insert_bytes,"August  7, 2023","August 24, 2023(last modified: August 27, 2023)",mail-internals(crates.io),/packages/mail-internals.html,Vulnerability,memory-corruption,,"{'text': 'GHSA-rcx8-48pc-v9q8', 'url': 'https://github.com/advisories/GHSA-rcx8-48pc-v9q8'}","{'text': 'https://git.sr.ht/~nabijaczleweli/mail-internals.crate/commit/05443c864b204e7f1512caf2d53e8cce4dd340fc', 'url': 'https://git.sr.ht/~nabijaczleweli/mail-internals.crate/commit/05443c864b204e7f1512caf2d53e8cce4dd340fc'}",no patched versions,Version,>=0.2.0,"Incorrect reallocation logic in the functionvec_insert_bytescauses a use-after-free. This function does not have to be called directly to trigger the vulnerability because many methods onEncodingWritercall this function internally. The mail-* suite is unmaintained and the upstream sources have been actively vandalised.
A fixedmail-internals-ng(andmail-headers-ngandmail-core-ng) crate has been published which fixes this, and a dependency on another unsound crate. Advisory available underCC0-1.0license.",mail_internals;;utils;;vec_insert_bytes,>=0.2.0
NA,Double Public Key Signing Function Oracle Attack oned25519-dalek,"June 11, 2022","August 14, 2023(last modified: August 27, 2023)",ed25519-dalek(crates.io),/packages/ed25519-dalek.html,Vulnerability,crypto-failure,"{'text': 'GHSA-w5vr-6qhr-36cc', 'url': 'https://github.com/advisories/GHSA-w5vr-6qhr-36cc'}","{'text': 'https://github.com/MystenLabs/ed25519-unsafe-libs', 'url': 'https://github.com/MystenLabs/ed25519-unsafe-libs'}",>=2,"Versions ofed25519-dalekprior to v2.0 model private and public keys as
separate types which can be assembled into aKeypair, and also provide APIs
for serializing and deserializing 64-byte private/public keypairs. Such APIs and serializations are inherently unsafe as the public key is one of
the inputs used in the deterministic computation of theSpart of the signature,
but not in theRvalue. An adversary could somehow use the signing function as
an oracle that allows arbitrary public keys as input can obtain two signatures
for the same message sharing the sameRand only differ on theSpart. Unfortunately, when this happens, one can easily extract the private key. Revised public APIs in v2.0 ofed25519-dalekdo NOT allow a decoupled
private/public keypair as signing input, except as part of specially labeled
""hazmat"" APIs which are clearly labeled as being dangerous if misused. Advisory available underCC0-1.0license."
NA,opensslX509VerifyParamRef::set_hostbuffer over-read,"June 20, 2023","June 20, 2023(last modified: July  8, 2023)",openssl(crates.io),/packages/openssl.html,Vulnerability,memory-exposure,"{'text': 'GHSA-xcf7-rvmh-g6q4', 'url': 'https://github.com/advisories/GHSA-xcf7-rvmh-g6q4'}","{'text': 'https://github.com/sfackler/rust-openssl/issues/1965', 'url': 'https://github.com/sfackler/rust-openssl/issues/1965'}",>=0.10.55,Version,"<0.10.55, >=0.10.0","When this function was passed an empty string,opensslwould attempt to callstrlenon it, reading arbitrary memory until it reached a NUL byte. Advisory available underCC0-1.0license.",openssl;;x509;;verify;;x509verifyparamref;;set_host,"<0.10.55, >=0.10.0"
NA,Remote Attackers can cause Denial-of-Service (packet loops) with crafted DNS packets,"June  1, 2023","June  3, 2023(last modified: June 13, 2023)",trust-dns-server(crates.io),/packages/trust-dns-server.html,Vulnerability,denial-of-service,,"{'text': 'GHSA-5fm9-h728-fwpj', 'url': 'https://github.com/advisories/GHSA-5fm9-h728-fwpj'}","{'text': 'https://github.com/bluejekyll/trust-dns/pull/1952', 'url': 'https://github.com/bluejekyll/trust-dns/pull/1952'}",^0.22.1>=0.23.0-alpha.3,"trust-dns and trust-dns-server are vulnerable to remotely triggered denial-of-service attacks, consuming both network and CPU resources.
DNS messages with the QR=1 bit set are responded to with aFormErrresponse.
This allows creating a traffic loop, in which theseFormErrresponses are sent nonstop between vulnerable servers. There are two scenarios how this can be exploited: 1) Create a loop between two instances of trust-dns, consuming network resources, or 2) consuming the CPU of a single instance. With two instancesAandBan attacker sends a DNS query with a spoofed source IP address toA.Areplies with aFormErrtoB.
Now both servers with ping-pong the message back and forth until by chance the packet is dropped in the network.
Multiple spoofed packets can be sent by the attacker, increasing resource consumption. A single server can get locked up replying to itself.
Same setup as above, but nowAsends the reply to itself.
The packet is sent out as fast as the CPU and network stack manage.
This locks up a CPU core.
Multiple packets from the attacker consume multiple CPU cores. Advisory available underCC0-1.0license."
NA,Out-of-bounds array access leads to panic,"May 16, 2023","May 31, 2023(last modified: June 13, 2023)",buffered-reader(crates.io),/packages/buffered-reader.html,Vulnerability,denial-of-service,,"{'text': 'GHSA-29mf-62xx-28jq', 'url': 'https://github.com/advisories/GHSA-29mf-62xx-28jq'}","{'text': 'https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/', 'url': 'https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/'}, {'text': 'https://gitlab.com/sequoia-pgp/sequoia/-/tags/buffered-reader%2Fv1.2.0', 'url': 'https://gitlab.com/sequoia-pgp/sequoia/-/tags/buffered-reader%2Fv1.2.0'}",">=1.0.2, <1.1.0>=1.1.5, <1.2.0>=1.2.0","Affected versions of the crate have a bug where attacker-controlled
input can result in the use of an out-of-bound array index.  Rust
detects the use of the out-of-bound index and causes the application
to panic.  An attacker may be able to use this to cause a
denial-of-service.  However, it is not possible for an attacker to
read from or write to the application's address space. Advisory available underCC0-1.0license."
NA,Out-of-bounds array access leads to panic,"May 16, 2023","May 31, 2023(last modified: June 13, 2023)",sequoia-openpgp(crates.io),/packages/sequoia-openpgp.html,Vulnerability,denial-of-service,,"{'text': 'GHSA-25mx-8f3v-8wh7', 'url': 'https://github.com/advisories/GHSA-25mx-8f3v-8wh7'}","{'text': 'https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/', 'url': 'https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/'}, {'text': 'https://gitlab.com/sequoia-pgp/sequoia/-/tags/openpgp%2Fv1.16.0', 'url': 'https://gitlab.com/sequoia-pgp/sequoia/-/tags/openpgp%2Fv1.16.0'}",">=1.1.1, <1.2.0>=1.8.1, <1.9.0>=1.16.0","Affected versions of the crate have several bugs where
attacker-controlled input can result in the use of an out-of-bound
array index.  Rust detects the use of the out-of-bound index and
causes the application to panic.  An attacker may be able to use this
to cause a denial-of-service.  However, it is not possible for an
attacker to read from or write to the application's address space. Advisory available underCC0-1.0license."
NA,Resource exhaustion vulnerability in h2 may lead to Denial of Service (DoS),"April 14, 2023","April 20, 2023",h2(crates.io),/packages/h2.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2023-26964', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-26964'}, {'text': 'GHSA-f8vr-r385-rh5r', 'url': 'https://github.com/advisories/GHSA-f8vr-r385-rh5r'}","{'text': 'https://github.com/hyperium/hyper/issues/2877', 'url': 'https://github.com/hyperium/hyper/issues/2877'}",>=0.3.17,"If an attacker is able to flood the network with pairs ofHEADERS/RST_STREAMframes, such that theh2application is not able to accept them faster than the bytes are received, the pending accept queue can grow in memory usage. Being able to do this consistently can result in excessive memory use, and eventually trigger Out Of Memory. This flaw is corrected inhyperium/h2#668, which restricts remote reset stream count by default. Advisory available underCC0-1.0license."
NA,TLS certificate common name validation bypass,"March 24, 2023","March 25, 2023(last modified: November  8, 2023)",nats(crates.io),/packages/nats.html,Vulnerability,crypto-failure,,"{'text': 'GHSA-wvc4-j7g5-4f79', 'url': 'https://github.com/advisories/GHSA-wvc4-j7g5-4f79'}",>=0.24.1,<0.9.0,"The NATS official Rust clients are vulnerable to MitM when using TLS. The common name of the server's TLS certificate is validated against
thehostname provided by the server's plaintextINFOmessage
during the initial connection setup phase. A MitM proxy can tamper with
thehostfield's value by substituting it with the common name of a
valid certificate it controls, fooling the client into accepting it. Advisory available underCC0-1.0license."
NA,TLS certificate common name validation bypass,"March 24, 2023","March 25, 2023(last modified: June 13, 2023)",async-nats(crates.io),/packages/async-nats.html,Vulnerability,crypto-failure,,"{'text': 'GHSA-f5v5-ccqc-6w36', 'url': 'https://github.com/advisories/GHSA-f5v5-ccqc-6w36'}","{'text': 'https://github.com/nats-io/nats.rs/commit/817a7b942c462fa9d9938dcb62124173634132fb#diff-767d442397fcaaf2f83e8f924d4a70317a2ce4703a49964d6007707949cfa5f5L303-R304', 'url': 'https://github.com/nats-io/nats.rs/commit/817a7b942c462fa9d9938dcb62124173634132fb#diff-767d442397fcaaf2f83e8f924d4a70317a2ce4703a49964d6007707949cfa5f5L303-R304'}",>=0.29.0,"The NATS official Rust clients are vulnerable to MitM when using TLS. The common name of the server's TLS certificate is validated against
thehostname provided by the server's plaintextINFOmessage
during the initial connection setup phase. A MitM proxy can tamper with
thehostfield's value by substituting it with the common name of a
valid certificate it controls, fooling the client into accepting it. Advisory available underCC0-1.0license."
NA,opensslX509Extension::newandX509Extension::new_nidnull pointer dereference,"March 24, 2023","March 23, 2023(last modified: June 13, 2023)",openssl(crates.io),/packages/openssl.html,Vulnerability,denial-of-service,"{'text': 'GHSA-6hcf-g6gr-hhcr', 'url': 'https://github.com/advisories/GHSA-6hcf-g6gr-hhcr'}","{'text': 'https://github.com/sfackler/rust-openssl/pull/1854', 'url': 'https://github.com/sfackler/rust-openssl/pull/1854'}",>=0.10.48,Version,"<0.10.48, >=0.9.7","<0.10.48, >=0.9.7",These functions would crash when the context argument was None with certain extension types. Thanks to David Benjamin (Google) for reporting this issue. Advisory available underCC0-1.0license.,openssl;;x509;;x509extension;;new,"<0.10.48, >=0.9.7"
NA,opensslSubjectAlternativeNameandExtendedKeyUsage::otherallow arbitrary file read,"March 24, 2023","March 23, 2023(last modified: June 13, 2023)",openssl(crates.io),/packages/openssl.html,Vulnerability,file-disclosure,"{'text': 'GHSA-9qwg-crg9-m2vc', 'url': 'https://github.com/advisories/GHSA-9qwg-crg9-m2vc'}","{'text': 'https://github.com/sfackler/rust-openssl/pull/1854', 'url': 'https://github.com/sfackler/rust-openssl/pull/1854'}",>=0.10.48,Version,"<0.10.48, >=0.9.7","<0.10.48, >=0.9.7","SubjectAlternativeNameandExtendedKeyUsagearguments were parsed using the OpenSSL
functionX509V3_EXT_nconf. This function parses all input using an OpenSSL mini-language
which can perform arbitrary file reads. Thanks to David Benjamin (Google) for reporting this issue. Advisory available underCC0-1.0license.",openssl;;x509;;extension;;extendedkeyusage;;other,"<0.10.48, >=0.9.7"
NA,opensslX509NameBuilder::buildreturned object is not thread safe,"March 24, 2023","March 23, 2023(last modified: June 13, 2023)",openssl(crates.io),/packages/openssl.html,Vulnerability,thread-safety,"{'text': 'GHSA-3gxf-9r58-2ghg', 'url': 'https://github.com/advisories/GHSA-3gxf-9r58-2ghg'}","{'text': 'https://github.com/sfackler/rust-openssl/pull/1854', 'url': 'https://github.com/sfackler/rust-openssl/pull/1854'}",>=0.10.48,Version,"<0.10.48, >=0.9.7","OpenSSL has amodifiedbit that it can set on onX509_NAMEobjects. If this
bit is set then the object is not thread-safe even when it appears the code is
not modifying the value. Thanks to David Benjamin (Google) for reporting this issue. Advisory available underCC0-1.0license.",openssl;;x509;;x509namebuilder;;build,"<0.10.48, >=0.9.7"
NA,NULL pointer dereference instb_image,"March 19, 2023","March 19, 2023(last modified: July 15, 2023)",stb_image(crates.io),/packages/stb_image.html,Vulnerability,memory-corruption,,"{'text': 'GHSA-ppjr-267j-5p9x', 'url': 'https://github.com/advisories/GHSA-ppjr-267j-5p9x'}","{'text': 'https://github.com/servo/rust-stb-image/pull/102', 'url': 'https://github.com/servo/rust-stb-image/pull/102'}",>=0.2.5,"A bug in error handling in thestb_imageC library could cause a NULL pointer dereference when attempting to load an invalid or unsupported image file.  This is fixed in version 0.2.5 and later of thestb_imageRust crate, by patching the C code to correctly handle NULL pointers. Thank you to GitHub user 0xdd96 for finding and fixing this vulnerability. Advisory available underCC0-1.0license."
NA,Race Condition Enabling Link Following and Time-of-check Time-of-use (TOCTOU),"February 24, 2023","March  4, 2023",remove_dir_all(crates.io),/packages/remove_dir_all.html,Vulnerability,,"{'text': 'GHSA-mc8h-8q98-g5hr', 'url': 'https://github.com/advisories/GHSA-mc8h-8q98-g5hr'}","{'text': 'https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead', 'url': 'https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead'}, {'text': 'https://github.com/advisories/GHSA-mc8h-8q98-g5hr', 'url': 'https://github.com/advisories/GHSA-mc8h-8q98-g5hr'}",>=0.8.0,Version,<0.8.0,<0.8.0,<0.8.0,"The remove_dir_all crate is a Rust library that offers additional features over the Rust
standard library fs::remove_dir_all function. It was possible to trick a privileged process doing a recursive delete in an
attacker controlled directory into deleting privileged files, on all operating systems. For instance, consider deleting a tree called 'etc' in a parent directory
called 'p'. Between callingremove_dir_all(""a"")and remove_dir_all(""a"")
actually starting its work, the attacker can move 'p' to 'p-prime', and
replace 'p' with a symlink to '/'. Then the privileged process deletes 'p/etc'
which is actually /etc, and now your system is broken. There are some
mitigations for this exact scenario, such as CWD relative file lookup, but
they are not guaranteed - any code using absolute paths will not have that
protection in place. The same attack could be performed at any point in the directory tree being
deleted: if 'a' contains a child directory called 'etc', attacking the
deletion by replacing 'a' with a link is possible. The new code in this release mitigates the attack within the directory tree
being deleted by using file-handle relative operations: to open 'a/etc', the
path 'etc' relative to 'a' is opened, where 'a' is represented by a file
descriptor (Unix) or handle (Windows). With the exception of the entry points
into the directory deletion logic, this is robust against manipulation of the
directory hierarchy, and remove_dir_all will only delete files and directories
contained in the tree it is deleting. The entry path however is a challenge - as described above, there are some
potential mitigations, but since using them must be done by the calling code,
it is hard to be confident about the security properties of the path based
interface. The new extension traitRemoveDirprovides an interface where it is much
harder to get it wrong. somedir.remove_dir_contents(""name-of-child""). Callers can then make their own security evaluation about how to securely get
a directory handle. That is still not particularly obvious, and we're going to
follow up with a helper of some sort (probably in thefs_atcrate). Once
that is available, the path based entry points will get deprecated. In the interim, processes that might run with elevated privileges should
figure out how to securely identify the directory they are going to delete, to
avoid the initial race. Pragmatically, other processes should be fine with the
path based entry points : this is the same interfacestd::fs::remove_dir_alloffers, and an unprivileged process running in an attacker controlled
directory can't do anything that the attacker can't already do. Advisory available underCC0-1.0license.",remove_dir_all;;ensure_empty_dir,<0.8.0
NA,X.400 address type confusion in X.509GeneralName,"February  7, 2023","February  7, 2023(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,"denial-of-service, memory-exposure","{'text': 'CVE-2023-0286', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-0286'}, {'text': 'GHSA-x4qr-2fvf-3mr5', 'url': 'https://github.com/advisories/GHSA-x4qr-2fvf-3mr5'}","{'text': 'https://www.openssl.org/news/secadv/20230207.txt', 'url': 'https://www.openssl.org/news/secadv/20230207.txt'}",">=111.25, <300.0>=300.0.12","There is a type confusion vulnerability relating to X.400 address processing
inside an X.509GeneralName. X.400 addresses were parsed as anASN1_STRINGbut
the public structure definition forGENERAL_NAMEincorrectly specified the type
of thex400Addressfield asASN1_TYPE. This field is subsequently interpreted by
the OpenSSL functionGENERAL_NAME_cmpas anASN1_TYPErather than anASN1_STRING. When CRL checking is enabled (i.e. the application sets theX509_V_FLAG_CRL_CHECKflag), this vulnerability may allow an attacker to pass
arbitrary pointers to amemcmpcall, enabling them to read memory contents or
enact a denial of service. In most cases, the attack requires the attacker to
provide both the certificate chain and CRL, neither of which need to have a
valid signature. If the attacker only controls one of these inputs, the other
input must already contain an X.400 address as a CRL distribution point, which
is uncommon. As such, this vulnerability is most likely to only affect
applications which have implemented their own functionality for retrieving CRLs
over a network. Advisory available underCC0-1.0license."
NA,Use-after-free followingBIO_new_NDEF,"February  7, 2023","February  7, 2023(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2023-0215', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-0215'}, {'text': 'GHSA-r7jw-wp68-3xch', 'url': 'https://github.com/advisories/GHSA-r7jw-wp68-3xch'}","{'text': 'https://www.openssl.org/news/secadv/20230207.txt', 'url': 'https://www.openssl.org/news/secadv/20230207.txt'}",">=111.25, <300.0>=300.0.12","The public API functionBIO_new_NDEFis a helper function used for streaming
ASN.1 data via aBIO. It is primarily used internally to OpenSSL to support the
SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by
end user applications. The function receives aBIOfrom the caller, prepends a newBIO_f_asn1filterBIOonto the front of it to form aBIOchain, and then returns the new head of
theBIOchain to the caller. Under certain conditions, for example if a CMS
recipient public key is invalid, the new filterBIOis freed and the function
returns aNULLresult indicating a failure. However, in this case, theBIOchain
is not properly cleaned up and theBIOpassed by the caller still retains
internal pointers to the previously freed filterBIO. If the caller then goes on
to callBIO_pop()on theBIOthen a use-after-free will occur. This will most
likely result in a crash. This scenario occurs directly in the internal functionB64_write_ASN1()which
may causeBIO_new_NDEF()to be called and will subsequently callBIO_pop()on
theBIO. This internal function is in turn called by the public API functionsPEM_write_bio_ASN1_stream,PEM_write_bio_CMS_stream,PEM_write_bio_PKCS7_stream,SMIME_write_ASN1,SMIME_write_CMSandSMIME_write_PKCS7. Other public API functions that may be impacted by this includei2d_ASN1_bio_stream,BIO_new_CMS,BIO_new_PKCS7,i2d_CMS_bio_streamandi2d_PKCS7_bio_stream. Advisory available underCC0-1.0license."
NA,X.509 Name Constraints Read Buffer Overflow,"February  7, 2023","February  7, 2023(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,"denial-of-service, memory-exposure","{'text': 'CVE-2022-4203', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-4203'}, {'text': 'GHSA-w67w-mw4j-8qrv', 'url': 'https://github.com/advisories/GHSA-w67w-mw4j-8qrv'}","{'text': 'https://www.openssl.org/news/secadv/20230207.txt', 'url': 'https://www.openssl.org/news/secadv/20230207.txt'}",>=300.0.12,<300.0.0,"A read buffer overrun can be triggered in X.509 certificate verification,
specifically in name constraint checking. Note that this occurs
after certificate chain signature verification and requires either a
CA to have signed the malicious certificate or for the application to
continue certificate verification despite failure to construct a path
to a trusted issuer. The read buffer overrun might result in a crash which could lead to
a denial of service attack. In theory it could also result in the disclosure
of private memory contents (such as private keys, or sensitive plaintext)
although we are not aware of any working exploit leading to memory
contents disclosure as of the time of release of this advisory. In a TLS client, this can be triggered by connecting to a malicious
server. In a TLS server, this can be triggered if the server requests
client authentication and a malicious client connects. Advisory available underCC0-1.0license."
NA,Timing Oracle in RSA Decryption,"February  7, 2023","February  7, 2023(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,crypto-failure,"{'text': 'CVE-2022-4304', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-4304'}, {'text': 'GHSA-p52g-cm5j-mjv4', 'url': 'https://github.com/advisories/GHSA-p52g-cm5j-mjv4'}","{'text': 'https://www.openssl.org/news/secadv/20230207.txt', 'url': 'https://www.openssl.org/news/secadv/20230207.txt'}",">=111.25, <300.0>=300.0.12","A timing based side channel exists in the OpenSSL RSA Decryption implementation
which could be sufficient to recover a plaintext across a network in a
Bleichenbacher style attack. To achieve a successful decryption an attacker
would have to be able to send a very large number of trial messages for
decryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,
RSA-OEAP and RSASVE. For example, in a TLS connection, RSA is commonly used by a client to send an
encrypted pre-master secret to the server. An attacker that had observed a
genuine connection between a client and a server could use this flaw to send
trial messages to the server and record the time taken to process them. After a
sufficiently large number of messages the attacker could recover the pre-master
secret used for the original connection and thus be able to decrypt the
application data sent over that connection. Advisory available underCC0-1.0license."
NA,Invalid pointer dereference ind2i_PKCS7functions,"February  7, 2023","February  7, 2023(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2023-0216', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-0216'}, {'text': 'GHSA-29xx-hcv2-c4cp', 'url': 'https://github.com/advisories/GHSA-29xx-hcv2-c4cp'}","{'text': 'https://www.openssl.org/news/secadv/20230207.txt', 'url': 'https://www.openssl.org/news/secadv/20230207.txt'}",>=300.0.12,<300.0.0,"An invalid pointer dereference on read can be triggered when an
application tries to load malformed PKCS7 data with thed2i_PKCS7(),d2i_PKCS7_bio()ord2i_PKCS7_fp()functions. The result of the dereference is an application crash which could
lead to a denial of service attack. The TLS implementation in OpenSSL
does not call this function however third party applications might
call these functions on untrusted data. Advisory available underCC0-1.0license."
NA,Double free after callingPEM_read_bio_ex,"February  7, 2023","February  7, 2023(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2022-4450', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-4450'}, {'text': 'GHSA-v5w6-wcm8-jm4q', 'url': 'https://github.com/advisories/GHSA-v5w6-wcm8-jm4q'}","{'text': 'https://www.openssl.org/news/secadv/20230207.txt', 'url': 'https://www.openssl.org/news/secadv/20230207.txt'}",">=111.25, <300.0>=300.0.12","The functionPEM_read_bio_ex()reads a PEM file from a BIO and parses and
decodes the ""name"" (e.g. ""CERTIFICATE""), any header data and the payload data.
If the function succeeds then the ""name_out"", ""header"" and ""data"" arguments are
populated with pointers to buffers containing the relevant decoded data. The
caller is responsible for freeing those buffers. It is possible to construct a
PEM file that results in 0 bytes of payload data. In this casePEM_read_bio_ex()will return a failure code but will populate the header argument with a pointer
to a buffer that has already been freed. If the caller also frees this buffer
then a double free will occur. This will most likely lead to a crash. This
could be exploited by an attacker who has the ability to supply malicious PEM
files for parsing to achieve a denial of service attack. The functionsPEM_read_bio()andPEM_read()are simple wrappers aroundPEM_read_bio_ex()and therefore these functions are also directly affected. These functions are also called indirectly by a number of other OpenSSL
functions includingPEM_X509_INFO_read_bio_ex()andSSL_CTX_use_serverinfo_file()which are also vulnerable. Some OpenSSL internal
uses of these functions are not vulnerable because the caller does not free the
header argument ifPEM_read_bio_ex()returns a failure code. These locations
include thePEM_read_bio_TYPE()functions as well as the decoders introduced in
OpenSSL 3.0. Advisory available underCC0-1.0license."
NA,NULLdereference validating DSA public key,"February  7, 2023","February  7, 2023(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2023-0217', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-0217'}, {'text': 'GHSA-vxrh-cpg7-8vjr', 'url': 'https://github.com/advisories/GHSA-vxrh-cpg7-8vjr'}","{'text': 'https://www.openssl.org/news/secadv/20230207.txt', 'url': 'https://www.openssl.org/news/secadv/20230207.txt'}",>=300.0.12,<300.0.0,"An invalid pointer dereference on read can be triggered when an
application tries to check a malformed DSA public key by theEVP_PKEY_public_check()function. This will most likely lead
to an application crash. This function can be called on public
keys supplied from untrusted sources which could allow an attacker
to cause a denial of service attack. The TLS implementation in OpenSSL does not call this function
but applications might call the function if there are additional
security requirements imposed by standards such as FIPS 140-3. Advisory available underCC0-1.0license."
NA,NULLdereference during PKCS7 data verification,"February  7, 2023","February  7, 2023(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2023-0401', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-0401'}, {'text': 'GHSA-vrh7-x64v-7vxq', 'url': 'https://github.com/advisories/GHSA-vrh7-x64v-7vxq'}","{'text': 'https://www.openssl.org/news/secadv/20230207.txt', 'url': 'https://www.openssl.org/news/secadv/20230207.txt'}",>=300.0.12,<300.0.0,"ANULLpointer can be dereferenced when signatures are being
verified on PKCS7signedorsignedAndEnvelopeddata. In case the hash
algorithm used for the signature is known to the OpenSSL library but
the implementation of the hash algorithm is not available the digest
initialization will fail. There is a missing check for the return
value from the initialization function which later leads to invalid
usage of the digest API most likely leading to a crash. The unavailability of an algorithm can be caused by using FIPS
enabled configuration of providers or more commonly by not loading
the legacy provider. PKCS7 data is processed by the SMIME library calls and also by the
time stamp (TS) library calls. The TLS implementation in OpenSSL does
not call these functions however third party applications would be
affected if they call these functions to verify signatures on untrusted
data. Advisory available underCC0-1.0license."
NA,bzip2 Denial of Service (DoS),"January  9, 2023","February  2, 2023(last modified: February  4, 2023)",bzip2(crates.io),/packages/bzip2.html,Vulnerability,denial-of-service,"{'text': 'CVE-2023-22895', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-22895'}, {'text': 'GHSA-96jv-r488-c2rj', 'url': 'https://github.com/advisories/GHSA-96jv-r488-c2rj'}","{'text': 'https://github.com/alexcrichton/bzip2-rs/pull/86', 'url': 'https://github.com/alexcrichton/bzip2-rs/pull/86'}",>=0.4.4,"Working with specific payloads can cause a Denial of Service (DoS) vector. BothDecompressandCompressimplementations can enter into infinite loops
given specific payloads entered that trigger it. The issue is described in great detail in thebzip2 repository issue. Thanks to bjrjk for finding and providing the patch for the issue and the
maintainer responsibly responding to release a fix quickly. Users who use the crate with untrusted data should update thebzip2to 0.4.4. Advisory available underCC0-1.0license."
NA,Slack Webhooks secrets leak in debug logs,"October 10, 2022","February  2, 2023",slack-morphism(crates.io),/packages/slack-morphism.html,Vulnerability,"{'text': 'CVE-2022-39292', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39292'}, {'text': 'GHSA-4mjx-2gh5-ph8h', 'url': 'https://github.com/advisories/GHSA-4mjx-2gh5-ph8h'}","{'text': 'https://github.com/abdolence/slack-morphism-rust/commit/65ef9fac4f39c4e171e2952a6cf029bb0d059a89', 'url': 'https://github.com/abdolence/slack-morphism-rust/commit/65ef9fac4f39c4e171e2952a6cf029bb0d059a89'}",>=1.3.2,Debug log formatting made it possible to leak Webhooks secrets into debug logs. The patched version has introduced more strict checks to avoid this. Advisory available underCC0-1.0license.
NA,daemonizeis Unmaintained,"September  1, 2021","February  1, 2023(last modified: April  8, 2023)",daemonize(crates.io),/packages/daemonize.html,INFOUnmaintained,"{'text': 'https://github.com/knsd/daemonize/issues/46', 'url': 'https://github.com/knsd/daemonize/issues/46'}",no patched versions,Last release was over four years ago. The crate contains undocumented unsafe behind safe fns. Anissueinquiring as to possible updates has gone unanswered by the maintainer. The below list has not been vetted in any way and may or may not contain alternatives: Advisory available underCC0-1.0license.
NA,Improper validation of Windows paths could lead to directory traversal attack,"January 14, 2022","January 29, 2023(last modified: June 13, 2023)",warp(crates.io),/packages/warp.html,Vulnerability,file-disclosure,,"{'text': 'GHSA-8v4j-7jgf-5rg9', 'url': 'https://github.com/advisories/GHSA-8v4j-7jgf-5rg9'}","{'text': 'https://github.com/seanmonstar/warp/issues/937', 'url': 'https://github.com/seanmonstar/warp/issues/937'}",>=0.3.3,windows,"Path resolution inwarp::filters::fs::dirdidn't correctly validate Windows paths
meaning paths like/foo/bar/c:/windows/web/screen/img101.pngwould be allowed
and respond with the contents ofc:/windows/web/screen/img101.png. Thus users
could potentially read files anywhere on the filesystem. This only impacts Windows. Linux and other unix likes are not impacted by this. Advisory available underCC0-1.0license."
NA,git2 does not verify SSH keys by default,"January 20, 2023","January 21, 2023",libgit2-sys(crates.io),/packages/libgit2-sys.html,Vulnerability,crypto-failure,,"{'text': 'CVE-2023-22742', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-22742'}, {'text': 'GHSA-m4ch-rfv5-x5g3', 'url': 'https://github.com/advisories/GHSA-m4ch-rfv5-x5g3'}, {'text': 'GHSA-8643-3wh5-rmjq', 'url': 'https://github.com/advisories/GHSA-8643-3wh5-rmjq'}","{'text': 'https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3', 'url': 'https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3'}",">=0.13.5, <0.14.0>=0.14.2","The git2 and libgit2-sys crates are Rust wrappers around thelibgit2C library. It was discovered that libgit2 1.5.0
and below did not verify SSH host keys when establishing an SSH connection,
exposing users of the library to Man-In-the-Middle attacks. The libgit2 team assignedCVE-2023-22742to this
vulnerability. The following versions of the libgit2-sys Rust crate have been
released: A new git2 crate version has also been released, 0.16.1. This version only
bumps its libgit2-sys dependency to ensure no vulnerable libgit2-sys versions
are used, but contains no code changes: if you update the libgit2-sys version
there is no need to also update the git2 crate version. You can learn more about this vulnerability in libgit2's advisory Advisory available underCC0-1.0license."
NA,ELF header parsing library doesn't check for valid offset,"October 31, 2022","January 15, 2023(last modified: June 13, 2023)",elf_rs(crates.io),/packages/elf_rs.html,Vulnerability,memory-corruption,,"{'text': 'GHSA-g6pw-999w-j75m', 'url': 'https://github.com/advisories/GHSA-g6pw-999w-j75m'}","{'text': 'https://github.com/vincenthouyi/elf_rs/issues/11', 'url': 'https://github.com/vincenthouyi/elf_rs/issues/11'}",>=0.3.0,"The crate has several unsafe sections that don't perform proper pointer validation. An example can be found in the following function: While this will work perfectly fineifthe ELF header is valid, malicious or
malformed input can contain a section header offset of an arbitrary size, meaning
that the resultant pointer in the unsafe block can point to an artibrary address
in the address space of the process. This can result in unpredictable behaviour, and in our fuzz testing, we discovered
that it's trivial to cause SIGABRT (signal 6), or SEGV (signal 11). The function should either be marked as unsafe, with a note that the caller is responsible
for providing only valid inputs, or it should ideally do the due diligence to ensure that the
offset doesn't exceed the bounds of the header (and add additional checks as necessary). Advisory available underCC0-1.0license."
NA,git2 Rust package suppresses ssh host key checking,"January 12, 2023","January 12, 2023(last modified: February  9, 2023)",git2(crates.io),/packages/git2.html,Vulnerability,crypto-failure,,"{'text': 'https://github.com/rust-lang/git2-rs/pull/909', 'url': 'https://github.com/rust-lang/git2-rs/pull/909'}, {'text': 'https://blog.rust-lang.org/2023/01/10/cve-2022-46176.html', 'url': 'https://blog.rust-lang.org/2023/01/10/cve-2022-46176.html'}",>=0.16.0,"By default, when accessing an ssh repository
(ie via anssh:git repository url)
the git2 Rust package does not do any host key checking. Additionally,
the provided API is not sufficient for a an application
to do meaningful checking itself. When connecting to an ssh repository,
and when an attacker can redirect the connection
(performing a malice-in-the-middle attack)
an affected application might: Thegit2Rust package (henceforth, git2-rs)
unconditionally calls the underlying Clibgit2functions to set
an ssh certificate check callback.
The Rust package uses this to offer
the ability for the application to set a callback to a Rust function. The C-level callback function provided by git2-rs 0.15.0 and earlier: Upgrade to git2-rs 0.16.x. The default behaviour in 0.16.x is to
honourlibgit2's validity determination. Note that adding this previously skipped check
may cause existing setups to stop working. This bug manifested in cargo where it was assigned CVE-2022-46176. The same bug exists in other applications which use
affected versions of git2-rs
unless they never try to access git repositories withssh:urls. Advisory available underCC0-1.0license."
NA,Bug in pooling instance allocator,"November 10, 2022","January 12, 2023(last modified: January 14, 2023)",wasmtime(crates.io),/packages/wasmtime.html,Vulnerability,memory-exposure,,"{'text': 'CVE-2022-39393', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39393'}, {'text': 'GHSA-wh6w-3828-g9qf', 'url': 'https://github.com/advisories/GHSA-wh6w-3828-g9qf'}","{'text': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf', 'url': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf'}, {'text': 'https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0', 'url': 'https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0'}, {'text': 'https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6', 'url': 'https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6'}",">=1.0.2, <2.0.0>=2.0.2","bug in Wasmtime's implementation of its pooling instance allocator where when a linear memory is reused for another instance the initial heap snapshot of the prior instance can be visible, erroneously to the next instance. Mitigations are describedhere. Advisory available underCC0-1.0license."
NA,reject_remote_clients Configuration corruption,"January  4, 2023","January  9, 2023(last modified: February  9, 2023)",tokio(crates.io),/packages/tokio.html,Vulnerability,,"{'text': 'CVE-2023-22466', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-22466'}, {'text': 'GHSA-7rrj-xr53-82p7', 'url': 'https://github.com/advisories/GHSA-7rrj-xr53-82p7'}","{'text': 'https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7', 'url': 'https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7'}, {'text': 'https://github.com/tokio-rs/tokio/pull/5336', 'url': 'https://github.com/tokio-rs/tokio/pull/5336'}, {'text': 'https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients', 'url': 'https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients'}",">=1.18.4, <1.19.0>=1.20.3, <1.21.0>=1.23.1",<1.7.0,windows,"On Windows, configuring a named pipe server withpipe_modewill forceServerOptions::reject_remote_clientsasfalse. This drops any intended explicit configuration for thereject_remote_clientsthat may have been set astruepreviously. The default setting ofreject_remote_clientsis normallytruemeaning the default is also overridden asfalse. Ensure thatpipe_modeis set first after initializing aServerOptions. For example: Advisory available underCC0-1.0license."
NA,"Location header incorporates user input, allowing open redirect","December 23, 2022","December 23, 2022(last modified: June 13, 2023)",hyper-staticfile(crates.io),/packages/hyper-staticfile.html,Vulnerability,format-injection,,"{'text': 'GHSA-5wvv-q5fv-2388', 'url': 'https://github.com/advisories/GHSA-5wvv-q5fv-2388'}","{'text': 'https://github.com/stephank/hyper-staticfile/commit/f12cadc6666c6f555d29725f5bc45da2103f24ea', 'url': 'https://github.com/stephank/hyper-staticfile/commit/f12cadc6666c6f555d29725f5bc45da2103f24ea'}",^0.9.4>=0.10.0-alpha.5,"Whenhyper-staticfileperforms a redirect for a directory request (e.g. a
request for/dirthat redirects to/dir/), theLocationheader value was
derived from user input (the request path), simply appending a slash. The
intent was to perform an origin-relative redirect, but specific inputs
allowed performing a scheme-relative redirect instead. An attacker could craft a special URL that would appear to be for the correct
domain, but immediately redirects to a malicious domain. Such a URL can benefit
phishing attacks, for example an innocent looking link in an email. Advisory available underCC0-1.0license."
NA,Improper validation of Windows paths could lead to directory traversal attack,"November 30, 2022","November 30, 2022(last modified: June 13, 2023)",hyper-staticfile(crates.io),/packages/hyper-staticfile.html,Vulnerability,file-disclosure,,"{'text': 'GHSA-7p7c-pvvx-2vx3', 'url': 'https://github.com/advisories/GHSA-7p7c-pvvx-2vx3'}","{'text': 'https://github.com/stephank/hyper-staticfile/issues/35', 'url': 'https://github.com/stephank/hyper-staticfile/issues/35'}",^0.9.2>=0.10.0-alpha.2,windows,"Path resolution inhyper-staticfiledidn't correctly validate Windows paths
meaning paths like/foo/bar/c:/windows/web/screen/img101.pngwould be allowed
and respond with the contents ofc:/windows/web/screen/img101.png. Thus users
could potentially read files anywhere on the filesystem. This only impacts Windows. Linux and other unix likes are not impacted by this. Advisory available underCC0-1.0license."
NA,out-of-bounds read possible when setting list-of-pointers,"November 30, 2022","November 30, 2022",capnp(crates.io),/packages/capnp.html,Vulnerability,memory-exposure,"{'text': 'CVE-2022-46149', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-46149'}, {'text': 'GHSA-qqff-4vw4-f6hx', 'url': 'https://github.com/advisories/GHSA-qqff-4vw4-f6hx'}","{'text': 'https://github.com/capnproto/capnproto/tree/master/security-advisories/2022-11-30-0-pointer-list-bounds.md', 'url': 'https://github.com/capnproto/capnproto/tree/master/security-advisories/2022-11-30-0-pointer-list-bounds.md'}, {'text': 'https://dwrensha.github.io/capnproto-rust/2022/11/30/out_of_bounds_memory_access_bug.html', 'url': 'https://dwrensha.github.io/capnproto-rust/2022/11/30/out_of_bounds_memory_access_bug.html'}, {'text': 'https://github.com/capnproto/capnproto/security/advisories/GHSA-qqff-4vw4-f6hx', 'url': 'https://github.com/capnproto/capnproto/security/advisories/GHSA-qqff-4vw4-f6hx'}",>=0.15.2^0.14.11^0.13.7,"If a message consumer expects data
of type ""list of pointers"",
and if the consumer performs certain specific actions on such data,
then a message producer can cause the consumer to read out-of-bounds memory.
This could trigger a process crash in the consumer,
or in some cases could allow exfiltration of private in-memory data. The C++ Cap'n Proto library is also affected by this bug.
See theadvisoryon the main Cap'n Proto repo for a succinct description of
the exact circumstances in which the problem can arise. Advisory available underCC0-1.0license."
NA,X.509 Email Address Variable Length Buffer Overflow,"November  1, 2022","November  1, 2022(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2022-3786', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3786'}, {'text': 'GHSA-h8jm-2x53-xhp5', 'url': 'https://github.com/advisories/GHSA-h8jm-2x53-xhp5'}","{'text': 'https://www.openssl.org/news/secadv/20221101.txt', 'url': 'https://www.openssl.org/news/secadv/20221101.txt'}",>=300.0.11,<300.0.0,"A buffer overrun can be triggered in X.509 certificate verification,
specifically in name constraint checking. Note that this occurs after
certificate chain signature verification and requires either a CA to
have signed a malicious certificate or for an application to continue
certificate verification despite failure to construct a path to a trusted
issuer. An attacker can craft a malicious email address in a certificate
to overflow an arbitrary number of bytes containing the.character
(decimal 46) on the stack. This buffer overflow could result in a crash
(causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious
server. In a TLS server, this can be triggered if the server requests
client authentication and a malicious client connects. Advisory available underCC0-1.0license."
NA,X.509 Email Address 4-byte Buffer Overflow,"November  1, 2022","November  1, 2022(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,"denial-of-service, code-execution","{'text': 'CVE-2022-3602', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3602'}, {'text': 'GHSA-8rwr-x37p-mx23', 'url': 'https://github.com/advisories/GHSA-8rwr-x37p-mx23'}","{'text': 'https://www.openssl.org/news/secadv/20221101.txt', 'url': 'https://www.openssl.org/news/secadv/20221101.txt'}",>=300.0.11,<300.0.0,"A buffer overrun can be triggered in X.509 certificate verification,
specifically in name constraint checking. Note that this occurs
after certificate chain signature verification and requires either a
CA to have signed the malicious certificate or for the application to
continue certificate verification despite failure to construct a path
to a trusted issuer. An attacker can craft a malicious email address
to overflow four attacker-controlled bytes on the stack. This buffer
overflow could result in a crash (causing a denial of service) or
potentially remote code execution. Many platforms implement stack overflow protections which would mitigate
against the risk of remote code execution. The risk may be further
mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL.
Further analysis based on some of the mitigating factors described above
have led this to be downgraded to HIGH. Users are still encouraged to
upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious
server. In a TLS server, this can be triggered if the server requests
client authentication and a malicious client connects. Advisory available underCC0-1.0license."
NA,matrix-sdk 0.6.0 logs access tokens,"October 24, 2022","October 24, 2022(last modified: June 13, 2023)",matrix-sdk(crates.io),/packages/matrix-sdk.html,Vulnerability,"{'text': 'GHSA-fc4h-xcf3-qj5f', 'url': 'https://github.com/advisories/GHSA-fc4h-xcf3-qj5f'}","{'text': 'https://github.com/matrix-org/matrix-rust-sdk/issues/1110', 'url': 'https://github.com/matrix-org/matrix-rust-sdk/issues/1110'}",>=0.6.2,<0.6.0,"When sending Matrix requests using an affected version ofmatrix-sdkin an application that
writes logs usingtracing-subscriber(in a way that includes fields of tracing spans such astracing_subscribers default text output from thefmtmodule), these logs will contain the
user's access token. Advisory available underCC0-1.0license."
NA,Using a Custom Cipher withNID_undefmay lead to NULL encryption,"October 11, 2022","October 11, 2022(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,crypto-failure,"{'text': 'CVE-2022-3358', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3358'}, {'text': 'GHSA-4f63-89w9-3jjv', 'url': 'https://github.com/advisories/GHSA-4f63-89w9-3jjv'}","{'text': 'https://www.openssl.org/news/secadv/20221011.txt', 'url': 'https://www.openssl.org/news/secadv/20221011.txt'}",>=300.0.10,<300.0.0,"OpenSSL supports creating a custom cipher via the legacyEVP_CIPHER_meth_new()function and associated function calls. This function was deprecated in OpenSSL
3.0 and application authors are instead encouraged to use the new provider
mechanism in order to implement custom ciphers. OpenSSL versions 3.0.0 to 3.0.5 incorrectly handle legacy custom ciphers passed
to theEVP_EncryptInit_ex2(),EVP_DecryptInit_ex2()andEVP_CipherInit_ex2()functions (as well as other similarly named encryption and decryption
initialisation functions). Instead of using the custom cipher directly it
incorrectly tries to fetch an equivalent cipher from the available providers.
An equivalent cipher is found based on the NID passed toEVP_CIPHER_meth_new().
This NID is supposed to represent the unique NID for a given cipher. However it
is possible for an application to incorrectly passNID_undefas this value in
the call toEVP_CIPHER_meth_new(). WhenNID_undefis used in this way the
OpenSSL encryption/decryption initialisation function will match the NULL cipher
as being equivalent and will fetch this from the available providers. This will
succeed if the default provider has been loaded (or if a third party provider
has been loaded that offers this cipher). Using the NULL cipher means that the
plaintext is emitted as the ciphertext. Applications are only affected by this issue if they callEVP_CIPHER_meth_new()usingNID_undefand subsequently use it in a call to an encryption/decryption
initialisation function. Applications that only use SSL/TLS are not impacted by
this issue. Advisory available underCC0-1.0license."
NA,No default limit put on request bodies,"August 31, 2022","September 13, 2022(last modified: June 13, 2023)",axum-core(crates.io),/packages/axum-core.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2022-3212', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3212'}, {'text': 'GHSA-m77f-652q-wwp4', 'url': 'https://github.com/advisories/GHSA-m77f-652q-wwp4'}","{'text': 'https://github.com/tokio-rs/axum/pull/1346', 'url': 'https://github.com/tokio-rs/axum/pull/1346'}",">=0.2.8, <0.3.0-rc.1>=0.3.0-rc.2","<bytes::Bytes as axum_core::extract::FromRequest>::from_requestwould not, by
default, set a limit for the size of the request body. That meant if a malicious
peer would send a very large (or infinite) body your server might run out of
memory and crash. This also applies to these extractors which usedBytes::from_requestinternally: The fix is also inaxum-core0.3.0.rc.2but0.3.0.rc.1isvulnerable. Becauseaxumdepends onaxum-coreit is vulnerable as well. The vulnerable
versions ofaxumare<= 0.5.15and0.6.0.rc.1.axum>= 0.5.16and>= 0.6.0.rc.2does have the fix and are not vulnerable. The patched versions will set a 2 MB limit by default. Advisory available underCC0-1.0license."
NA,xml-rs is Unmaintained,"January 26, 2022","August 15, 2022(last modified: May  5, 2023)",xml-rs(crates.io),/packages/xml-rs.html,INFOUnmaintained,"{'text': 'https://github.com/netvl/xml-rs/issues', 'url': 'https://github.com/netvl/xml-rs/issues'}, {'text': 'https://github.com/netvl/xml-rs/issues/219', 'url': 'https://github.com/netvl/xml-rs/issues/219'}, {'text': 'https://github.com/netvl/xml-rs/issues/210', 'url': 'https://github.com/netvl/xml-rs/issues/210'}, {'text': 'https://github.com/netvl/xml-rs/issues/204', 'url': 'https://github.com/netvl/xml-rs/issues/204'}",no patched versions,"xml-rs is a XML parser has open issues around parsing including integer
overflows / panics that may or may not be an issue with untrusted data. Together with these open issues with Unmaintained status xml-rs
may or may not be suited to parse untrusted data. Advisory available underCC0-1.0license."
NA,Post-Quantum Signature scheme Rainbow level I parametersets broken,"February 25, 2022","August 11, 2022(last modified: June 13, 2023)",oqs(crates.io),/packages/oqs.html,Vulnerability,crypto-failure,"{'text': 'GHSA-h864-m8vm-3xvj', 'url': 'https://github.com/advisories/GHSA-h864-m8vm-3xvj'}","{'text': 'https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/KFgw5_qCXiI?pli=1', 'url': 'https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/KFgw5_qCXiI?pli=1'}",>=0.7.2,"Ward Beullens found a practical key-recovery attack against Rainbow.
The level I parametersets are removed from liboqs starting from version0.7.2.
Find the scientific details inBreaking Rainbow Takes a Weekend on a Laptop. This means all theoqs::sig::Algorithm::RainbowI*variants are insecure. Advisory available underCC0-1.0license."
NA,Out-of-bounds read when opening multiple column families with TTL,"May 11, 2022","August 11, 2022(last modified: June 13, 2023)",rocksdb(crates.io),/packages/rocksdb.html,Vulnerability,memory-corruption,,"{'text': 'GHSA-xpp3-xrff-w6rh', 'url': 'https://github.com/advisories/GHSA-xpp3-xrff-w6rh'}","{'text': 'https://github.com/rust-rocksdb/rust-rocksdb/pull/616', 'url': 'https://github.com/rust-rocksdb/rust-rocksdb/pull/616'}",>=0.19.0,Version,<0.19.0,"Affected versions of this crate called the RocksDB C APIrocksdb_open_column_families_with_ttl()with a pointer to a single integer
TTL value, but one TTL value for each column family is expected. This is only relevant when usingrocksdb::DBWithThreadMode::open_cf_descriptors_with_ttl()with multiple
column families. This bug has been fixed in v0.19.0. Advisory available underCC0-1.0license.",rocksdb;;dbwiththreadmode;;open_cf_descriptors_with_ttl,<0.19.0
NA,Post-Quantum Key Encapsulation Mechanism SIKE broken,"July 30, 2022","August  9, 2022(last modified: June 13, 2023)",oqs(crates.io),/packages/oqs.html,Vulnerability,crypto-failure,"{'text': 'GHSA-hrjv-pf36-jpmr', 'url': 'https://github.com/advisories/GHSA-hrjv-pf36-jpmr'}",>=0.7.2,"Wouter Castryck and Thomas Decru presented an efficient key recovery attack on the SIDH protocol.
As a result, the secret key of SIKEp751 can be recovered in a matter of hours.
The SIKE and SIDH schemes will be removed from oqs 0.7.2. The affected schemes are theoqs::kem::Algorithm::Sike*andoqs::kem::Algorithm::Sidh*enum variants. An efficient key recovery attack on SIDH (preliminary version) Advisory available underCC0-1.0license."
NA,Use of uninitialized memory in temporary,"August 22, 2018","August  8, 2022(last modified: June 13, 2023)",temporary(crates.io),/packages/temporary.html,Vulnerability,memory-exposure,,"{'text': 'GHSA-2jq9-6xx7-3h29', 'url': 'https://github.com/advisories/GHSA-2jq9-6xx7-3h29'}","{'text': 'https://github.com/stainless-steel/temporary/issues/2', 'url': 'https://github.com/stainless-steel/temporary/issues/2'}",>=0.6.4,<0.3.0,"Uninit memory is used as a RNG seed in temporary The following function is used as a way to get entropy from the system, which does operations on and exposes uninit memory, which is UB. This has been resolved in the 0.6.4 release. The crate is not intended to be used outside of a testing environment. For a general purpose crate to create temporary directories,tempfileis an alternative for this crate. Advisory available underCC0-1.0license."
NA,Improper validation of Windows paths could lead to directory traversal attack,"January 21, 2022","August  5, 2022(last modified: June 13, 2023)",tower-http(crates.io),/packages/tower-http.html,Vulnerability,file-disclosure,,"{'text': 'GHSA-qrqq-9c63-xfrg', 'url': 'https://github.com/advisories/GHSA-qrqq-9c63-xfrg'}","{'text': 'https://github.com/tower-rs/tower-http/pull/204', 'url': 'https://github.com/tower-rs/tower-http/pull/204'}",">=0.2.1>=0.1.3, <0.2.0",windows,"tower_http::services::fs::ServeDirdidn't correctly validate Windows paths
meaning paths like/foo/bar/c:/windows/web/screen/img101.pngwould be allowed
and respond with the contents ofc:/windows/web/screen/img101.png. Thus users
could potentially read files anywhere on the filesystem. This only impacts Windows. Linux and other unix likes are not impacted by this. Seetower-http#204for more details. Advisory available underCC0-1.0license."
NA,malicious craterustdecimal,"May 10, 2022","August  4, 2022(last modified: August 27, 2023)",rustdecimal(crates.io),/packages/rustdecimal.html,Vulnerability,code-execution,,"{'text': 'GHSA-7pwq-f4pq-78gm', 'url': 'https://github.com/advisories/GHSA-7pwq-f4pq-78gm'}","{'text': 'https://groups.google.com/g/rustlang-security-announcements/c/5DVtC8pgJLw?pli=1', 'url': 'https://groups.google.com/g/rustlang-security-announcements/c/5DVtC8pgJLw?pli=1'}",no patched versions,"The Rust Security Response WG and the crates.io teamwere notifiedon
2022-05-02 of the existence of the malicious craterustdecimal, which
contained malware. The crate name was intentionally similar to the name of the
popularrust_decimalcrate, hoping that potential victims would misspell
its name (an attack called ""typosquatting""). To protect the security of the ecosystem, the crates.io team permanently
removed the crate from the registry as soon as it was made aware of the
malware. An analysis of all the crates on crates.io was also performed, and no
other crate with similar code patterns was found. Keep in mind that therust_decimalcrate wasnotcompromised, and it
is still safe to use. The crate had less than 500 downloads since its first release on 2022-03-25,
and no crates on the crates.io registry depended on it. The crate contained identical source code and functionality as the legitrust_decimalcrate, except for theDecimal::newfunction. When the function was called, it checked whether theGITLAB_CIenvironment
variable was set, and if so it downloaded a binary payload into/tmp/git-updater.binand executed it. The binary payload supported both Linux
and macOS, but not for Windows. An analysis of the binary payload was not possible, as the download URL didn't
work anymore when the analysis was performed. If your project or organization is running GitLab CI, we strongly recommend
checking whether your project or one of its dependencies depended on therustdecimalcrate, starting from 2022-03-25. If you notice a dependency on
that crate, you should consider your CI environment to be compromised. In general, we recommend regularly auditing your dependencies, and only
depending on crates whose author you trust. If you notice any suspicious
behavior in a crate's source code please followthe Rust security
policyand report it to the Rust Security Response WG. We want to thank GitHub user@safinaskarfor identifying the
malicious crate inthis GitHub issue. Advisory available underCC0-1.0license."
NA,Multiple soundness issues inowning_ref,"January 26, 2022","August  2, 2022(last modified: October 14, 2023)",owning_ref(crates.io),/packages/owning_ref.html,Vulnerability,memory-corruption,"{'text': 'GHSA-9qxh-258v-666c', 'url': 'https://github.com/advisories/GHSA-9qxh-258v-666c'}","{'text': 'https://github.com/noamtashma/owning-ref-unsoundness', 'url': 'https://github.com/noamtashma/owning-ref-unsoundness'}, {'text': 'https://github.com/Kimundi/owning-ref-rs/issues/49', 'url': 'https://github.com/Kimundi/owning-ref-rs/issues/49'}, {'text': 'https://github.com/Kimundi/owning-ref-rs/issues/61', 'url': 'https://github.com/Kimundi/owning-ref-rs/issues/61'}, {'text': 'https://github.com/Kimundi/owning-ref-rs/issues/71', 'url': 'https://github.com/Kimundi/owning-ref-rs/issues/71'}, {'text': 'https://github.com/Kimundi/owning-ref-rs/issues/77', 'url': 'https://github.com/Kimundi/owning-ref-rs/issues/77'}",no patched versions,"safer_owning_refis a replacement crate which fixes these issues.
No patched versions of the original crate are available, and the maintainer is unresponsive. Advisory available underCC0-1.0license."
NA,Unbounded memory allocation based on untrusted length,"August  1, 2022","August  1, 2022(last modified: June 13, 2023)",websocket(crates.io),/packages/websocket.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2022-35922', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35922'}, {'text': 'GHSA-qrjv-rf5q-qpxc', 'url': 'https://github.com/advisories/GHSA-qrjv-rf5q-qpxc'}","{'text': 'https://github.com/websockets-rs/rust-websocket/security/advisories/GHSA-qrjv-rf5q-qpxc', 'url': 'https://github.com/websockets-rs/rust-websocket/security/advisories/GHSA-qrjv-rf5q-qpxc'}",>=0.26.5,"Untrusted websocket connections can cause an out-of-memory (OOM) process abort in a client or a server.
The root cause of the issue is during dataframe parsing.
Affected versions would allocate a buffer based on the declared dataframe size, which may come from an untrusted source.
WhenVec::with_capacityfails to allocate, the default Rust allocator will abort the current process, killing all threads. This affects only sync (non-Tokio) implementation. Async version also does not limit memory, but does not usewith_capacity, so DoS can happen only when bytes for oversized dataframe or message actually got delivered by the attacker. This is a security concern for you, if The crashes are fixed in version0.26.5by imposing default dataframe size limits.
Affected users are advised to update to this version. Note that default memory limits are rather large (100MB dataframes and 200 MB messages), so they can still cause DoS in some environments (i.e. 32-bit). New API has been added to fine tune those limits for specific applications.","Migrate your project to another, maintained Websocket library like Tungstenite., Accept only trusted WebSocket traffic., Filter the WebSocket traffic though some kind of proxy that ensures sanity limits on messages., Handle process aborts gracefully and limit process memory using OS tools., This issue was reported byEvan Richterat ForAllSecure and found withMayhemandCargo Fuzz., {'text': 'Evan Richter', 'url': 'https://github.com/evanrichter'}, {'text': 'Mayhem', 'url': 'https://forallsecure.com/mayhem-for-code'}, {'text': 'Cargo Fuzz', 'url': 'https://github.com/rust-fuzz/cargo-fuzz'}, Advisory available underCC0-1.0license., {'text': 'CC0-1.0', 'url': 'https://spdx.org/licenses/CC0-1.0.html'}"
NA,Heap memory corruption with RSA private key operation,"July  5, 2022","July  5, 2022(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,crypto-failure,"{'text': 'CVE-2022-2274', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-2274'}, {'text': 'GHSA-735f-pg76-fxc4', 'url': 'https://github.com/advisories/GHSA-735f-pg76-fxc4'}","{'text': 'https://www.openssl.org/news/secadv/20220705.txt', 'url': 'https://www.openssl.org/news/secadv/20220705.txt'}",>=300.0.9,<300.0.8,"The OpenSSL 3.0.4 release introduced a serious bug in the RSA
implementation for X86_64 CPUs supporting the AVX512IFMA instructions.
This issue makes the RSA implementation with 2048 bit private keys
incorrect on such machines and memory corruption will happen during
the computation. As a consequence of the memory corruption an attacker
may be able to trigger a remote code execution on the machine performing
the computation. SSL/TLS servers or other servers using 2048 bit RSA private keys running
on machines supporting AVX512IFMA instructions of the X86_64 architecture
are affected by this issue. Note that on a vulnerable machine, proper testing of OpenSSL would fail and
should be noticed before deployment. Advisory available underCC0-1.0license."
NA,AES OCB fails to encrypt some bytes,"July  5, 2022","July  5, 2022(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,crypto-failure,"{'text': 'CVE-2022-2097', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-2097'}, {'text': 'GHSA-3wx7-46ch-7rq2', 'url': 'https://github.com/advisories/GHSA-3wx7-46ch-7rq2'}","{'text': 'https://www.openssl.org/news/secadv/20220705.txt', 'url': 'https://www.openssl.org/news/secadv/20220705.txt'}",">=111.22, <300.0>=300.0.9","AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised
implementation will not encrypt the entirety of the data under some
circumstances.  This could reveal sixteen bytes of data that was
preexisting in the memory that wasn't written.  In the special case of
""in place"" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS,
they are both unaffected. Advisory available underCC0-1.0license."
NA,Panic due to improper UTF-8 indexing,"May 21, 2022","June 26, 2022",rulex(crates.io),/packages/rulex.html,Vulnerability,denial-of-service,"{'text': 'CVE-2022-31100', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-31100'}, {'text': 'GHSA-8v9w-p43c-r885', 'url': 'https://github.com/advisories/GHSA-8v9w-p43c-r885'}","{'text': 'https://github.com/rulex-rs/rulex/security/advisories/GHSA-8v9w-p43c-r885', 'url': 'https://github.com/rulex-rs/rulex/security/advisories/GHSA-8v9w-p43c-r885'}",>=0.4.3,"When parsing untrusted rulex expressions, rulex may panic, possibly enabling
a Denial of Service attack. This happens when the expression contains a multi-
byte UTF-8 code point in a string literal or after a backslash, because rulex
tries to slice into the code point and panics as a result. The flaw was corrected in commitsfac6d58b25and330b3534e7by usinglen_utf8()to derive character width in bytes instead of assuming ASCII
encoding of 1 byte per char. Advisory available underCC0-1.0license."
NA,Stack overflow during recursive expression parsing,"May 21, 2022","June 26, 2022",rulex(crates.io),/packages/rulex.html,Vulnerability,denial-of-service,"{'text': 'CVE-2022-31099', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-31099'}, {'text': 'GHSA-v78m-2q7v-fjqp', 'url': 'https://github.com/advisories/GHSA-v78m-2q7v-fjqp'}","{'text': 'https://github.com/rulex-rs/rulex/security/advisories/GHSA-v78m-2q7v-fjqp', 'url': 'https://github.com/rulex-rs/rulex/security/advisories/GHSA-v78m-2q7v-fjqp'}",>=0.4.3,"When parsing untrusted rulex expressions, the stack may overflow, possibly
enabling a Denial of Service attack. This happens when parsing an expression
with several hundred levels of nesting, causing the process to abort
immediately. The flaw was corrected in commits60aa2dc03aby adding a check to recursion
depth. Advisory available underCC0-1.0license."
NA,MsQueuepush/popuse the wrong orderings,"June  7, 2022","June  8, 2022(last modified: June 13, 2023)",crossbeam(crates.io),/packages/crossbeam.html,Vulnerability,"thread-safety, memory-corruption","{'text': 'GHSA-rwf4-gx62-rqfw', 'url': 'https://github.com/advisories/GHSA-rwf4-gx62-rqfw'}","{'text': 'https://github.com/crossbeam-rs/crossbeam/pull/98', 'url': 'https://github.com/crossbeam-rs/crossbeam/pull/98'}",>=0.3.0,"Affected versions of this crate use orderings which are too weak to support this data structure.
It is likely this has caused memory corruption in the wild:https://github.com/crossbeam-rs/crossbeam/issues/97#issuecomment-412785919. Advisory available underCC0-1.0license."
NA,Use after free in Neon external buffers,"May 22, 2022","May 23, 2022(last modified: June 13, 2023)",neon(crates.io),/packages/neon.html,Vulnerability,"memory-corruption, memory-exposure",,"{'text': 'GHSA-8mj7-wxmc-f424', 'url': 'https://github.com/advisories/GHSA-8mj7-wxmc-f424'}","{'text': 'https://github.com/neon-bindings/neon/issues/896', 'url': 'https://github.com/neon-bindings/neon/issues/896'}",>=0.10.1,<0.8.0,Version,"<0.10.1, >=0.8.0","<0.10.1, >=0.8.0",Neon provides functionality for creating JavaScriptArrayBuffer(and theBuffersubtype) instances backed by bytes allocated outside of V8/Node. TheJsArrayBuffer::externalandJsBuffer::externaldid not requireT: 'staticprior to Neon0.10.1. This allowed creating an externally backed buffer from types that may be freed while they are still referenced by a JavaScriptArrayBuffer. The following example demonstrates use after free. It compiles on versions<0.10.1and fails to compile afterward. Advisory available underCC0-1.0license.,neon;;types;;jsarraybuffer;;external,"<0.10.1, >=0.8.0"
NA,Use after free withexternrefs and epoch interruption in Wasmtime,"March 31, 2022","March 31, 2022(last modified: June 13, 2023)",wasmtime(crates.io),/packages/wasmtime.html,Vulnerability,"memory-corruption, memory-exposure",,"{'text': 'CVE-2022-24791', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24791'}, {'text': 'GHSA-gwc9-348x-qwv2', 'url': 'https://github.com/advisories/GHSA-gwc9-348x-qwv2'}","{'text': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2', 'url': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2'}",">=0.35.2>=0.34.2, <0.35.0",<0.34.0,Version,^0.34.0^0.34.1^0.35.0^0.35.1,Use after free withexternrefs and epoch interruption in Wasmtime Advisory available underCC0-1.0license.,wasmtime;;config;;epoch_interruption,^0.34.0^0.34.1^0.35.0^0.35.1
NA,Infinite loop inBN_mod_sqrt()reachable when parsing certificates,"March 15, 2022","March 16, 2022(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2022-0778', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0778'}, {'text': 'GHSA-x3mh-jvjw-3xwx', 'url': 'https://github.com/advisories/GHSA-x3mh-jvjw-3xwx'}","{'text': 'https://www.openssl.org/news/secadv/20220315.txt', 'url': 'https://www.openssl.org/news/secadv/20220315.txt'}",">=111.18, <300.0>=300.0.5","TheBN_mod_sqrt()function, which computes a modular square root, contains
a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain
elliptic curve public keys in compressed form or explicit elliptic curve
parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that
has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate
signature, any process that parses an externally supplied certificate may thus
be subject to a denial of service attack. The infinite loop can also be
reached when parsing crafted private keys as they can contain explicit
elliptic curve parameters. Thus vulnerable situations include: Also any other applications that use theBN_mod_sqrt()where the attacker
can control the parameter values are vulnerable to this DoS issue. Advisory available underCC0-1.0license."
NA,Arrow2 allows double free insafecode,"March  4, 2022","March  4, 2022(last modified: June 13, 2023)",arrow2(crates.io),/packages/arrow2.html,Vulnerability,memory-corruption,"{'text': 'GHSA-5j8w-r7g8-5472', 'url': 'https://github.com/advisories/GHSA-5j8w-r7g8-5472'}","{'text': 'https://github.com/jorgecarleitao/arrow2/issues/880', 'url': 'https://github.com/jorgecarleitao/arrow2/issues/880'}",">=0.7.1, <0.8>=0.8.2, <0.9>=0.9.2, <0.10>=0.10.0","The structFfi_ArrowArrayimplements#derive(Clone)that is inconsistent with
its custom implementation ofDrop, resulting in a double free when cloned. Cloning this struct insaferesults in a segmentation fault, which is unsound. This derive was removed from this struct. All users are advised to either: Doing so elimitates this vulnerability (code no longer compiles). Advisory available underCC0-1.0license."
NA,Miscomputation when performing AES encryption in rust-crypto,"February 28, 2022","March  1, 2022(last modified: June 13, 2023)",rust-crypto(crates.io),/packages/rust-crypto.html,Vulnerability,crypto-failure,,"{'text': 'GHSA-jp3w-3q88-34cf', 'url': 'https://github.com/advisories/GHSA-jp3w-3q88-34cf'}",no patched versions,"The following Rust program demonstrates some strangeness in AES encryption - if you have an immutable key slice and then operate on that slice, you get different encryption output than if you operate on a copy of that key. For these functions, we expect that extending a 16 byte key to a 32 byte key by repeating it gives the same encrypted data, because the underlying rust-crypto functions repeat key data up to the necessary key size for the cipher. The output from this program: Notably, the X1 key in thebroken()test changes every time after rerunning the program. Advisory available underCC0-1.0license."
NA,Failure to verify the public key of aSignedEnvelopeagainst thePeerIdin aPeerRecord,"February  7, 2022","February  7, 2022(last modified: June 13, 2023)",libp2p-core(crates.io),/packages/libp2p-core.html,Vulnerability,crypto-failure,"{'text': 'GHSA-wc36-xgcc-jwpr', 'url': 'https://github.com/advisories/GHSA-wc36-xgcc-jwpr'}",^0.30.2>=0.31.1,<0.30.0-rc.1,Version,>=0.30.0-rc.1,"Affected versions of this crate did not check that the public key the signature was created with matches the peer ID of the peer record.
Any combination was considered valid. This allows an attacker to republish an existingPeerRecordwith a differentPeerId. Advisory available underCC0-1.0license.",libp2p_core;;peerrecord;;from_signed_envelope,>=0.30.0-rc.1
NA,Data race inIterandIterMut,"January 23, 2022","January 24, 2022(last modified: June 13, 2023)",thread_local(crates.io),/packages/thread_local.html,Vulnerability,memory-corruption,"{'text': 'GHSA-9hpw-r23r-xgm5', 'url': 'https://github.com/advisories/GHSA-9hpw-r23r-xgm5'}","{'text': 'https://github.com/Amanieu/thread_local-rs/issues/33', 'url': 'https://github.com/Amanieu/thread_local-rs/issues/33'}",>=1.1.4,"In the affected version of this crate,{Iter, IterMut}::nextused a weaker memory ordering when loading values than what was required, exposing a potential data race
when iterating over aThreadLocal's values. Crates usingIter::next, orIterMut::nextare affected by this issue. Advisory available underCC0-1.0license."
NA,Improper validation of Windows paths could lead to directory traversal attack,"January 21, 2021","January 21, 2022(last modified: June 13, 2023)",tower-http(crates.io),/packages/tower-http.html,Vulnerability,file-disclosure,,"{'text': 'GHSA-wwh2-r387-g5rm', 'url': 'https://github.com/advisories/GHSA-wwh2-r387-g5rm'}","{'text': 'https://github.com/tower-rs/tower-http/pull/204', 'url': 'https://github.com/tower-rs/tower-http/pull/204'}",">=0.2.1>=0.1.3, <0.2.0",windows,"tower_http::services::fs::ServeDirdidn't correctly validate Windows paths
meaning paths like/foo/bar/c:/windows/web/screen/img101.pngwould be allowed
and respond with the contents ofc:/windows/web/screen/img101.png. Thus users
could potentially read files anywhere on the filesystem. This only impacts Windows. Linux and other unix likes are not impacted by this. Seetower-http#204for more details. Advisory available underCC0-1.0license."
NA,Stack overflow in rustc_serialize when parsing deeply nested JSON,"January  1, 2022","January 21, 2022(last modified: June 13, 2023)",rustc-serialize(crates.io),/packages/rustc-serialize.html,Vulnerability,denial-of-service,,"{'text': 'GHSA-2226-4v3c-cff8', 'url': 'https://github.com/advisories/GHSA-2226-4v3c-cff8'}",no patched versions,Version,*,"When parsing JSON usingjson::Json::from_str, there is no limit to the depth of the stack, therefore deeply nested objects can cause a stack overflow, which aborts the process. Example code that triggers the vulnerability is serdeis recommended as a replacement to rustc_serialize. Advisory available underCC0-1.0license.",rustc_serialize;;json;;json;;from_str,*
NA,Space bug inclean_text,"January 19, 2022","January 19, 2022(last modified: June 13, 2023)",ammonia(crates.io),/packages/ammonia.html,Vulnerability,format-injection,,"{'text': 'GHSA-p2g9-94wh-65c2', 'url': 'https://github.com/advisories/GHSA-p2g9-94wh-65c2'}","{'text': 'https://github.com/rust-ammonia/ammonia/pull/147', 'url': 'https://github.com/rust-ammonia/ammonia/pull/147'}",>=3.1.3,<3.0.0,Version,<=3.1.2,"An incorrect mapping from HTML specification to ASCII codes was used.
Because HTML treats the Form Feed as whitespace, code like this has an injection bug: Applications are not affected if they quote their attributes, or if they don't useclean_textat all. Advisory available underCC0-1.0license.",ammonia;;clean_text,<=3.1.2
NA,Unsoundness indashmapreferences,"January 10, 2022","January 13, 2022(last modified: June 13, 2023)",dashmap(crates.io),/packages/dashmap.html,Vulnerability,"memory-exposure, memory-corruption",,"{'text': 'GHSA-mpg5-fvwp-42m2', 'url': 'https://github.com/advisories/GHSA-mpg5-fvwp-42m2'}","{'text': 'https://github.com/xacrimon/dashmap/issues/167', 'url': 'https://github.com/xacrimon/dashmap/issues/167'}",>=5.1.0,<5.0.0,Version,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,>=5.0.0,"Reference returned by some methods ofRef(and similar types) may outlive theRefand escape the lock.
This causes undefined behavior and may result in a segfault. More information indashmap#167issue. Advisory available underCC0-1.0license.",dashmap;;mapref;;multiple;;refmulti;;key,>=5.0.0
NA,Threshold value is ignored (all shares are n=3),"January 21, 2020","December 27, 2021(last modified: June 13, 2023)",shamir(crates.io),/packages/shamir.html,Vulnerability,crypto-failure,"{'text': 'GHSA-978j-88f3-p5j3', 'url': 'https://github.com/advisories/GHSA-978j-88f3-p5j3'}","{'text': 'https://github.com/Nebulosus/shamir/issues/3', 'url': 'https://github.com/Nebulosus/shamir/issues/3'}",>=2.0.0,"Affected versions of this crate did not properly calculate secret shares requirements. This reduces the security of the algorithm by restricting the crate to always
using a threshold value of three, rather than a configurable limit. The flaw was corrected by correctly configuring the threshold. Advisory available underCC0-1.0license."
NA,Integer overflow in the bundled Brotli C library,"December 20, 2021","December 21, 2021(last modified: June 13, 2023)",compu-brotli-sys(crates.io),/packages/compu-brotli-sys.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2020-8927', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8927'}, {'text': 'GHSA-5v8v-66v8-mwm7', 'url': 'https://github.com/advisories/GHSA-5v8v-66v8-mwm7'}","{'text': 'https://github.com/google/brotli/releases/tag/v1.0.9', 'url': 'https://github.com/google/brotli/releases/tag/v1.0.9'}",>=1.0.9,"A buffer overflow exists in the Brotli library versions prior to 1.0.8 where an attacker controlling the input length of a ""one-shot"" decompression request to a script can trigger a crash, which happens when copying over chunks of data larger than 2 GiB. If one cannot update the C library, its authors recommend to use the ""streaming"" API as opposed to the ""one-shot"" API, and impose chunk size limits. Advisory available underCC0-1.0license."
NA,Integer overflow in the bundled Brotli C library,"December 20, 2021","December 21, 2021",brotli-sys(crates.io),/packages/brotli-sys.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2020-8927', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8927'}","{'text': 'https://github.com/bitemyapp/brotli2-rs/issues/45', 'url': 'https://github.com/bitemyapp/brotli2-rs/issues/45'}, {'text': 'https://github.com/google/brotli/releases/tag/v1.0.9', 'url': 'https://github.com/google/brotli/releases/tag/v1.0.9'}",no patched versions,"A buffer overflow exists in the Brotli library versions prior to 1.0.8 where an attacker controlling the input length of a ""one-shot"" decompression request to a script can trigger a crash, which happens when copying over chunks of data larger than 2 GiB. An updated version ofbrotli-syshas not been released. If one cannot update the C library, its authors recommend to use the ""streaming"" API as opposed to the ""one-shot"" API, and impose chunk size limits. In Rust the issue can be mitigated by migrating to thebrotlicrate, which provides a Rust implementation of Brotli compression and decompression that is not affected by this issue. Advisory available underCC0-1.0license."
NA,Use after free in lru crate,"December 21, 2021","December 21, 2021(last modified: June 13, 2023)",lru(crates.io),/packages/lru.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-45720', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45720'}, {'text': 'GHSA-qqmc-hwqp-8g2w', 'url': 'https://github.com/advisories/GHSA-qqmc-hwqp-8g2w'}, {'text': 'GHSA-v362-2895-h9r2', 'url': 'https://github.com/advisories/GHSA-v362-2895-h9r2'}","{'text': 'https://github.com/jeromefroe/lru-rs/issues/120', 'url': 'https://github.com/jeromefroe/lru-rs/issues/120'}",>=0.7.1,Version,<0.7.1,<0.7.1,"Lru crate has use after free vulnerability. Lru crate has two functions for getting an iterator. Both iterators give
references to key and value. Calling specific functions, like pop(), will remove
and free the value, and but it's still possible to access the reference of value
which is already dropped causing use after free. Advisory available underCC0-1.0license.",lru;;lrucache;;iter,<0.7.1
NA,Invalid handling ofX509_verify_cert()internal errors in libssl,"December 14, 2021","December 15, 2021(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2021-4044', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-4044'}, {'text': 'GHSA-mmjf-f5jw-w72q', 'url': 'https://github.com/advisories/GHSA-mmjf-f5jw-w72q'}","{'text': 'https://www.openssl.org/news/secadv/20211214.txt', 'url': 'https://www.openssl.org/news/secadv/20211214.txt'}",>=300.0.4,<300.0.0,"Internally libssl in OpenSSL callsX509_verify_cert()on the client side to
verify a certificate supplied by a server. That function may return a negative
return value to indicate an internal error (for example out of memory). Such a
negative return value is mishandled by OpenSSL and will cause an IO function
(such asSSL_connect()orSSL_do_handshake()) to not indicate success and a
subsequent call toSSL_get_error()to return the valueSSL_ERROR_WANT_RETRY_VERIFY. This return value is only supposed to be returned
by OpenSSL if the application has previously calledSSL_CTX_set_cert_verify_callback(). Since most applications do not do this theSSL_ERROR_WANT_RETRY_VERIFYreturn value fromSSL_get_error()will be totally
unexpected and applications may not behave correctly as a result. The exact
behaviour will depend on the application but it could result in crashes,
infinite loops or other similar incorrect responses. This issue is made more serious in combination with a separate bug in OpenSSL
3.0 that will causeX509_verify_cert()to indicate an internal error when
processing a certificate chain. This will occur where a certificate does not
include the Subject Alternative Name extension but where a Certificate Authority
has enforced name constraints. This issue can occur even with valid chains. Advisory available underCC0-1.0license."
NA,Incorrect Lifetime Bounds on Closures inrusqlite,"December  7, 2021","December  9, 2021(last modified: June 13, 2023)",rusqlite(crates.io),/packages/rusqlite.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-45713', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45713'}, {'text': 'CVE-2021-45714', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45714'}, {'text': 'CVE-2021-45715', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45715'}, {'text': 'CVE-2021-45716', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45716'}, {'text': 'CVE-2021-45717', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45717'}, {'text': 'CVE-2021-45718', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45718'}, {'text': 'CVE-2021-45719', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45719'}, {'text': 'GHSA-4qr3-m7ww-hh9g', 'url': 'https://github.com/advisories/GHSA-4qr3-m7ww-hh9g'}, {'text': 'GHSA-87xh-9q6h-r5cc', 'url': 'https://github.com/advisories/GHSA-87xh-9q6h-r5cc'}, {'text': 'GHSA-92cx-4xm7-jr9m', 'url': 'https://github.com/advisories/GHSA-92cx-4xm7-jr9m'}, {'text': 'GHSA-cm8g-544f-p9x9', 'url': 'https://github.com/advisories/GHSA-cm8g-544f-p9x9'}, {'text': 'GHSA-f6f2-3w33-54r9', 'url': 'https://github.com/advisories/GHSA-f6f2-3w33-54r9'}, {'text': 'GHSA-g4g4-3pqw-8m7f', 'url': 'https://github.com/advisories/GHSA-g4g4-3pqw-8m7f'}, {'text': 'GHSA-g87r-23vw-7f87', 'url': 'https://github.com/advisories/GHSA-g87r-23vw-7f87'}, {'text': 'GHSA-q89g-4vhh-mvvm', 'url': 'https://github.com/advisories/GHSA-q89g-4vhh-mvvm'}","{'text': 'https://github.com/rusqlite/rusqlite/issues/1048', 'url': 'https://github.com/rusqlite/rusqlite/issues/1048'}",>=0.26.2^0.25.4,<0.25.0,Version,">=0.25.0, <0.25.4>=0.26.0, <0.26.2",">=0.25.0, <0.25.4>=0.26.0, <0.26.2",">=0.25.0, <0.25.4>=0.26.0, <0.26.2",">=0.25.0, <0.25.4>=0.26.0, <0.26.2",">=0.25.0, <0.25.4>=0.26.0, <0.26.2",">=0.25.0, <0.25.4>=0.26.0, <0.26.2",">=0.25.0, <0.25.4>=0.26.0, <0.26.2","The lifetime bound on several closure-acceptingrusqlitefunctions (specifically, functions which register a callback to be later invoked by SQLite) was too relaxed. If a closure referencing borrowed values on the stack is was passed to one of these functions, it could allow Rust code to access objects on the stack after they have been dropped. The impacted functions are: The issue exists in all0.25.*versions prior to0.25.4, and all0.26.*versions prior to 0.26.2 (specifically:0.25.0,0.25.1,0.25.2,0.25.3,0.26.0, and0.26.1). The fix is available in versions0.26.2and newer, and also has been back-ported to0.25.4. As it does not exist in0.24.*, all affected versions should have an upgrade path to a semver-compatible release. Advisory available underCC0-1.0license.",rusqlite;;connection;;commit_hook,">=0.25.0, <0.25.4>=0.26.0, <0.26.2"
NA,RustEmbed generatedgetmethod allows for directory traversal when reading files from disk,"November 29, 2021","November 29, 2021(last modified: June 13, 2023)",rust-embed(crates.io),/packages/rust-embed.html,Vulnerability,file-disclosure,"{'text': 'CVE-2021-45712', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45712'}, {'text': 'GHSA-cgw6-f3mj-h742', 'url': 'https://github.com/advisories/GHSA-cgw6-f3mj-h742'}, {'text': 'GHSA-xrg3-hmf3-rvgw', 'url': 'https://github.com/advisories/GHSA-xrg3-hmf3-rvgw'}","{'text': 'https://github.com/pyros2097/rust-embed/issues/159', 'url': 'https://github.com/pyros2097/rust-embed/issues/159'}",>=6.3.0,"When running in debug mode and thedebug-embed(off by default) feature is
not enabled, the generatedgetmethod does not check that the input path is
a child of the folder given. This allows attackers to read arbitrary files in the file system if they have
control over the filename given. The following code will print the contents of
your/etc/passwdif adjusted with a correct number of../s depending on
where it is run from. The flaw was corrected by canonicalizing the input filename and ensuring that
it starts with the canonicalized folder path. Advisory available underCC0-1.0license."
NA,Panic on incorrect date input tosimple_asn1,"November 14, 2021","November 18, 2021(last modified: June 13, 2023)",simple_asn1(crates.io),/packages/simple_asn1.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2021-45711', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45711'}, {'text': 'GHSA-3m6f-3gfg-4x56', 'url': 'https://github.com/advisories/GHSA-3m6f-3gfg-4x56'}, {'text': 'GHSA-g4h2-4wvh-grc5', 'url': 'https://github.com/advisories/GHSA-g4h2-4wvh-grc5'}","{'text': 'https://github.com/acw/simple_asn1/issues/27', 'url': 'https://github.com/acw/simple_asn1/issues/27'}",>=0.6.1,<0.6.0,"Version 0.6.0 of thesimple_asn1crate panics on certain malformed
inputs to its parsing functions, includingfrom_derandder_decode.
Because this crate is frequently used with inputs from the network, this
should be considered a security vulnerability. The issue occurs when parsing the old ASN.1 ""UTCTime"" time format.  If an
attacker provides a UTCTime where the first character is ASCII but the
second character is above 0x7f, a string slice operation in thefrom_der_function will try to slice into the middle of a UTF-8
character, and cause a panic. This error was introduced in commitd7d39d709577710e9dc8,
which updatedsimple_asn1to usetimeinstead ofchronobecause ofRUSTSEC-2020-159.
Versions ofsimple_asn1before 0.6.0 are not affected by this issue. Thepatchwas applied insimple_asn1version 0.6.1. Advisory available underCC0-1.0license."
NA,Data race when sending and receiving after closing aoneshotchannel,"November 16, 2021","November 17, 2021(last modified: June 13, 2023)",tokio(crates.io),/packages/tokio.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2021-45710', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45710'}, {'text': 'GHSA-fg7r-2g4j-5cgr', 'url': 'https://github.com/advisories/GHSA-fg7r-2g4j-5cgr'}","{'text': 'https://github.com/tokio-rs/tokio/issues/4225', 'url': 'https://github.com/tokio-rs/tokio/issues/4225'}",">=1.8.4, <1.9.0>=1.13.1",<0.1.14,Version,"<=1.13.0, >=0.1.14","If atokio::sync::oneshotchannel is closed (via theoneshot::Receiver::closemethod), a data race may occur if theoneshot::Sender::sendmethod is called while the correspondingoneshot::Receiverisawaited or callingtry_recv. When these methods are called concurrently on a closed channel, the two halves
of the channel can concurrently access a shared memory location, resulting in a
data race. This has been observed tocause memory corruption. Note that the race only occurs whenbothhalves of the channel are used
after theReceiverhalf has calledclose. Code wherecloseis not used, or where theReceiveris notawaited andtry_recvis not called after callingclose,
is not affected. Seetokio#4225for more details. Advisory available underCC0-1.0license.",tokio;;sync;;oneshot;;receiver;;close,"<=1.13.0, >=0.1.14"
NA,ConvertingNSStringto a String Truncates at Null Bytes,"November 14, 2021","November 15, 2021(last modified: June 13, 2023)",fruity(crates.io),/packages/fruity.html,Vulnerability,"{'text': 'CVE-2021-43620', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-43620'}, {'text': 'GHSA-h352-g5vw-3926', 'url': 'https://github.com/advisories/GHSA-h352-g5vw-3926'}","{'text': 'https://github.com/nvzqz/fruity/issues/14', 'url': 'https://github.com/nvzqz/fruity/issues/14'}",>=0.3.0,<0.1.0,Version,"<0.3.0, >=0.1.0","<0.3.0, >=0.1.0","<0.3.0, >=0.1.0","<0.3.0, >=0.1.0","Methods ofNSStringfor conversion to a string may return a partial result.
Since they callCStr::from_ptron a pointer to the string buffer, the
string is terminated at the first null byte, which might not be the end of the
string. In addition to the vulnerable functions listed for this issue, the
implementations ofDisplay,PartialEq,PartialOrd, andToStringforNSStringare also affected, since they call those functions. SinceNSStringis commonly used as the type for paths by theFoundationframework, null byte truncation might allow for easily bypassing file extension
checks. For example, if a file name is provided by a user and validated to have
one of a specific set of extensions, with validation taking place before
truncation, an attacker can add an accepted extension after a null byte (e.g.,file.exe\0.txt). After truncation, the file name used by the application
would befile.exe. It would be better to generate unique names for files, instead of using
user-provided names, but not all applications take this approach. That example only prints the string ""null"". Advisory available underCC0-1.0license.",fruity;;foundation;;nsstring;;to_str,"<0.3.0, >=0.1.0"
NA,Potential segfault inlocaltime_rinvocations,"November 10, 2020","October 18, 2021(last modified: August  4, 2022)",chrono(crates.io),/packages/chrono.html,Vulnerability,"code-execution, memory-corruption",,"{'text': 'https://github.com/chronotope/chrono/issues/499', 'url': 'https://github.com/chronotope/chrono/issues/499'}",CVE-2020-26235RUSTSEC-2020-0071,>=0.4.20,,"Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.","time-rs/time#293, {'text': 'time-rs/time#293', 'url': 'https://github.com/time-rs/time/issues/293'}, Advisory available underCC0-1.0license., {'text': 'CC0-1.0', 'url': 'https://spdx.org/licenses/CC0-1.0.html'}"
NA,Out-of-bounds write in nix::unistd::getgrouplist,"September 27, 2021","September 30, 2021(last modified: June 13, 2023)",nix(crates.io),/packages/nix.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-45707', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45707'}, {'text': 'GHSA-76w9-p8mg-j927', 'url': 'https://github.com/advisories/GHSA-76w9-p8mg-j927'}, {'text': 'GHSA-wgrg-5h56-jg27', 'url': 'https://github.com/advisories/GHSA-wgrg-5h56-jg27'}","{'text': 'https://github.com/nix-rust/nix/issues/1541', 'url': 'https://github.com/nix-rust/nix/issues/1541'}",^0.20.2^0.21.2^0.22.2>=0.23.0,<0.16.0,linuxfreebsdandroidnetbsddragonflyopenbsdfuchsia,Version,>=0.16.0,"On certain platforms, if a user has more than 16 groups, thenix::unistd::getgrouplistfunction will call the libcgetgrouplistfunction with a length parameter greater than the size of the buffer it
provides, resulting in an out-of-bounds write and memory corruption. The libcgetgrouplistfunction takes an in/out parameterngroupsspecifying the size of the group buffer. When the buffer is too small to
hold all of the requested user's group memberships, some libc
implementations, including glibc and Solaris libc, will modifyngroupsto indicate the actual number of groups for the user, in addition to
returning an error. The version ofnix::unistd::getgrouplistin nix
0.16.0 and up will resize the buffer to twice its size, but will not
read or modify thengroupsvariable. Thus, if the user has more than
twice as many groups as the initial buffer size of 8, the next call togetgrouplistwill then write past the end of the buffer. The issue would require editing /etc/groups to exploit, which is usually
only editable by the root user. Advisory available underCC0-1.0license.",nix;;unistd;;getgrouplist,>=0.16.0
NA,BinaryArraydoes not perform bound checks on reading values and offsets,"September 14, 2021","September 29, 2021(last modified: June 13, 2023)",arrow(crates.io),/packages/arrow.html,Vulnerability,memory-exposure,,"{'text': 'GHSA-r7cj-wmwv-hfw5', 'url': 'https://github.com/advisories/GHSA-r7cj-wmwv-hfw5'}","{'text': 'https://github.com/apache/arrow-rs/issues/772', 'url': 'https://github.com/apache/arrow-rs/issues/772'}, {'text': 'https://github.com/apache/arrow-rs/issues/773', 'url': 'https://github.com/apache/arrow-rs/issues/773'}",>=6.4.0,"BinaryArrayperforms insufficient validation on creation, which allows out-of-bounds reads in safe code. Advisory available underCC0-1.0license."
NA,FixedSizeBinaryArraydoes not perform bound checks on accessing values and offsets,"September 14, 2021","September 29, 2021(last modified: June 13, 2023)",arrow(crates.io),/packages/arrow.html,Vulnerability,memory-exposure,,"{'text': 'GHSA-qgrp-8f3v-q85p', 'url': 'https://github.com/advisories/GHSA-qgrp-8f3v-q85p'}","{'text': 'https://github.com/apache/arrow-rs/issues/774', 'url': 'https://github.com/apache/arrow-rs/issues/774'}",>=6.4.0,"FixedSizeBinaryArrayperforms insufficient bounds checks, which allows out-of-bounds reads in safe code. Advisory available underCC0-1.0license."
NA,DecimalArraydoes not perform bound checks on accessing values and offsets,"September 14, 2021","September 29, 2021(last modified: June 13, 2023)",arrow(crates.io),/packages/arrow.html,Vulnerability,memory-exposure,,"{'text': 'GHSA-h588-76vg-prgj', 'url': 'https://github.com/advisories/GHSA-h588-76vg-prgj'}","{'text': 'https://github.com/apache/arrow-rs/issues/775', 'url': 'https://github.com/apache/arrow-rs/issues/775'}",>=6.4.0,"DecimalArrayperforms insufficient bounds checks,
which allows out-of-bounds reads in safe code
if the length of the backing buffer is not a multiple of 16. Advisory available underCC0-1.0license."
NA,#[zeroize(drop)]doesn't implementDropforenums,"September 24, 2021","September 24, 2021(last modified: June 13, 2023)",zeroize_derive(crates.io),/packages/zeroize_derive.html,Vulnerability,"{'text': 'CVE-2021-45706', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45706'}, {'text': 'GHSA-c5hx-w945-j4pq', 'url': 'https://github.com/advisories/GHSA-c5hx-w945-j4pq'}","{'text': 'https://github.com/iqlusioninc/crates/issues/876', 'url': 'https://github.com/iqlusioninc/crates/issues/876'}",>=1.1.1,"Affected versions of this crate did not implementDropwhen#[zeroize(drop)]was used on anenum. This can result in memory not being zeroed out after dropping it, which is exactly what is intended when adding this attribute. The flaw was corrected in version 1.2 and#[zeroize(drop)]onenums now properly implementsDrop. Advisory available underCC0-1.0license."
NA,Aliased mutable references fromtls_rand&TlsWyRand,"September 23, 2021","September 23, 2021(last modified: June 13, 2023)",nanorand(crates.io),/packages/nanorand.html,Vulnerability,,"{'text': 'CVE-2021-45705', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45705'}, {'text': 'GHSA-p6gj-gpc8-f8xw', 'url': 'https://github.com/advisories/GHSA-p6gj-gpc8-f8xw'}, {'text': 'GHSA-r57r-j98g-587f', 'url': 'https://github.com/advisories/GHSA-r57r-j98g-587f'}","{'text': 'https://github.com/Absolucy/nanorand-rs/issues/28', 'url': 'https://github.com/Absolucy/nanorand-rs/issues/28'}",>=0.6.1,<0.5.0,Version,>=0.5.0<=0.6.0,"TlsWyRand's implementation ofDerefunconditionally dereferences a raw pointer, and returns
multiple mutable references to the same object, which is undefined behavior. Advisory available underCC0-1.0license.",nanorand;;tls;;tls_rand,>=0.5.0<=0.6.0
NA,Memory Safety Issue when usingpatchormergeonstateand assign the result back tostate,"September 16, 2021","September 18, 2021(last modified: June 13, 2023)",tremor-script(crates.io),/packages/tremor-script.html,Vulnerability,"memory-corruption, memory-exposure","{'text': 'CVE-2021-45701', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45701'}, {'text': 'CVE-2021-45702', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45702'}, {'text': 'GHSA-3pp4-64mp-9cg9', 'url': 'https://github.com/advisories/GHSA-3pp4-64mp-9cg9'}, {'text': 'GHSA-9qvw-46gf-4fv8', 'url': 'https://github.com/advisories/GHSA-9qvw-46gf-4fv8'}, {'text': 'GHSA-q2x5-6q7q-r872', 'url': 'https://github.com/advisories/GHSA-q2x5-6q7q-r872'}","{'text': 'https://github.com/tremor-rs/tremor-runtime/pull/1217', 'url': 'https://github.com/tremor-rs/tremor-runtime/pull/1217'}",>=0.11.6,<=0.7.2,"Affected versions of this crate maintains references to memory that might have been freed already.
If affects the following twotremor-scriptlanguage constructs: For constructs like this (it doesnt matter what is references in the expression to be merged or the patch operations) an optimization
was applied to manipulate the target value in-place, instead of cloning it. OurValuestruct which underpins all event data intremor-script, is representing as borrowed stringsbeef::Cow<'lifetime, str>that reference the actualVec<u8>the event is based upon. We keep the raw byte-array next to the event structure inside ourEventstruct as a self-referential struct,
so we make sure that the structuredValueand its references are valid across its whole lifetime. The optimization was considered safe as long as it was only possible to merge or patcheeventdata or static data.
Whenstatewas introduced totremor-scripta new possibility existed, to keepValuedata around for longer than the lifetime of an event.
Ifeventdata is merged or patched intostatewithout cloningstatefirst, it can still reference keys or values from
the previous event, which will now be invalid. This allows access to those already freed regions of memory and to get their content out over the wire. If an upgrade is not possible, a possible workaround is to avoid the optimization
by introducing a temporary variable and not immediately reassigning tostate: The flaw was corrected intremor-scriptversion 0.11.6 via commit1a2efcdby removing the optimization
and always clone the target expression of aMergeor [Patch](https://www.tremor.rs/docs/tremor-script/index#patch. Advisory available underCC0-1.0license."
NA,AtomicBucketunconditionally implements Send/Sync,"April  7, 2021","September 18, 2021(last modified: June 13, 2023)",metrics-util(crates.io),/packages/metrics-util.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2021-45704', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45704'}, {'text': 'GHSA-3hxh-7jxm-59x4', 'url': 'https://github.com/advisories/GHSA-3hxh-7jxm-59x4'}, {'text': 'GHSA-cwvc-87xq-pc5m', 'url': 'https://github.com/advisories/GHSA-cwvc-87xq-pc5m'}","{'text': 'https://github.com/metrics-rs/metrics/issues/190', 'url': 'https://github.com/metrics-rs/metrics/issues/190'}",>=0.7.0,"In the affected versions of the crate,AtomicBucket<T>unconditionally implementsSend/Synctraits. Therefore, users can create a data race to the innerT: !Syncby using theAtomicBucket::data_with()API.
Such data races can potentially cause memory corruption or other undefined behavior. The flaw was fixed in commit 8e6daab by adding appropriate Send/Sync bounds to the Send/Sync impl of structBlock<T>(which is a data type contained insideAtomicBucket<T>). Advisory available underCC0-1.0license."
NA,Remote memory exhaustion in ckb,"July 25, 2021","September 10, 2021(last modified: June 13, 2023)",ckb(crates.io),/packages/ckb.html,Vulnerability,"{'text': 'CVE-2021-45699', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45699'}, {'text': 'GHSA-2969-8hh9-57jc', 'url': 'https://github.com/advisories/GHSA-2969-8hh9-57jc'}, {'text': 'GHSA-48vq-8jqv-gm6f', 'url': 'https://github.com/advisories/GHSA-48vq-8jqv-gm6f'}","{'text': 'https://github.com/nervosnetwork/ckb/security/advisories/GHSA-48vq-8jqv-gm6f', 'url': 'https://github.com/nervosnetwork/ckb/security/advisories/GHSA-48vq-8jqv-gm6f'}",>=0.40.0,"In the ckb sync protocol, SyncState maintains a HashMap called 'misbehavior' that keeps a score of a peer's violations of the protocol. This HashMap is keyed to PeerIndex (an alias for SessionId), and entries are never removed from it. SessionId is an integer that increases monotonically with every new connection. A remote attacker can manipulate this HashMap to grow forever, resulting in degraded performance and ultimately a panic on allocation failure or being killed by the OS, depending on the platform. This is a critical severity security bug. It could be exploited to create a targeted or network-wide denial of service, to reduce the hash power of the network as part of a 51% attack, and perhaps in other creative ways. Advisory available underCC0-1.0license."
NA,Process crashes when the cell used as DepGroup is not alive,"July 25, 2021","September 10, 2021(last modified: June 13, 2023)",ckb(crates.io),/packages/ckb.html,Vulnerability,"{'text': 'CVE-2021-45700', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45700'}, {'text': 'GHSA-45p7-c959-rgcm', 'url': 'https://github.com/advisories/GHSA-45p7-c959-rgcm'}, {'text': 'GHSA-cw98-cx2m-9qqg', 'url': 'https://github.com/advisories/GHSA-cw98-cx2m-9qqg'}","{'text': 'https://github.com/nervosnetwork/ckb/security/advisories/GHSA-45p7-c959-rgcm', 'url': 'https://github.com/nervosnetwork/ckb/security/advisories/GHSA-45p7-c959-rgcm'}",>=0.40.0,It's easy to create a malign transaction which uses the dead cell as the DepGroup in the DepCells. The transaction can crash all the receiving nodes. Advisory available underCC0-1.0license.
NA,Miner fails to get block template when a cell used as a cell dep has been destroyed.,"July 25, 2021","September 10, 2021(last modified: June 13, 2023)",ckb(crates.io),/packages/ckb.html,Vulnerability,"{'text': 'CVE-2021-45698', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45698'}, {'text': 'GHSA-8gjm-h3xj-mp6w', 'url': 'https://github.com/advisories/GHSA-8gjm-h3xj-mp6w'}, {'text': 'GHSA-v666-6w97-pcwm', 'url': 'https://github.com/advisories/GHSA-v666-6w97-pcwm'}","{'text': 'https://github.com/nervosnetwork/ckb/security/advisories/GHSA-v666-6w97-pcwm', 'url': 'https://github.com/nervosnetwork/ckb/security/advisories/GHSA-v666-6w97-pcwm'}",>=0.40.0,"The RPC get_block_template fails when a cell has been used as a cell dep and an input in the different transactions. Say cell C is used as a dep group in the transaction A, and is destroyed in the transaction B. The node adds transaction A first, then B into the transaction pool. They are both valid. But when generating the block template, if the fee rate of B is higher, it comes before A, which will invalidate A. Currently the RPC get_block_template will fail instead of dropping A. First, the get_block_template should not fail but dropping the conflict transactions. Then we can propose solution to this issue. Here is an example. When a transaction is added to the pool, the pool must consider it depending on all the transactions which dep cell (direct or indirect via dep group) has been destroyed in this transaction. Because future transactions using the destroyed cells as dep will be rejected, the spending transaction only need to wait for all the existing dep transactions on chain. Advisory available underCC0-1.0license."
NA,Partial read is incorrect in molecule,"July 30, 2021","September  9, 2021(last modified: June 13, 2023)",molecule(crates.io),/packages/molecule.html,Vulnerability,"{'text': 'CVE-2021-45697', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45697'}, {'text': 'GHSA-6p3c-v8vc-c244', 'url': 'https://github.com/advisories/GHSA-6p3c-v8vc-c244'}, {'text': 'GHSA-82hm-vh7g-hrh9', 'url': 'https://github.com/advisories/GHSA-82hm-vh7g-hrh9'}","{'text': 'https://github.com/nervosnetwork/molecule/security/advisories/GHSA-82hm-vh7g-hrh9', 'url': 'https://github.com/nervosnetwork/molecule/security/advisories/GHSA-82hm-vh7g-hrh9'}",>=0.7.2,"Anyone who uses total_size(..) function to partial read the length of any FixVec will get an incorrect result, due to an incorrect implementation. This has been resolved in the 0.7.2 release. Advisory available underCC0-1.0license."
NA,Miscomputed results when using AVX2 backend,"September  8, 2021","September  9, 2021(last modified: June 13, 2023)",sha2(crates.io),/packages/sha2.html,Vulnerability,crypto-failure,,"{'text': 'CVE-2021-45696', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45696'}, {'text': 'GHSA-fc7x-2cmc-8j2g', 'url': 'https://github.com/advisories/GHSA-fc7x-2cmc-8j2g'}, {'text': 'GHSA-xpww-g9jx-hp8r', 'url': 'https://github.com/advisories/GHSA-xpww-g9jx-hp8r'}","{'text': 'https://github.com/RustCrypto/hashes/pull/314', 'url': 'https://github.com/RustCrypto/hashes/pull/314'}",>=0.9.8,<0.9.7,"The v0.9.7 release of thesha2crate introduced a new AVX2-accelerated
backend which was automatically enabled for all x86/x86_64 CPUs where AVX2
support was autodetected at runtime. This backend was buggy and would miscompute results for long messages
(i.e. messages spanning multiple SHA blocks). The crate has since been yanked, but any users who upgraded to v0.9.7 should
immediately upgrade to v0.9.8 and recompute any hashes which were previously
computed by v0.9.7. Advisory available underCC0-1.0license."
NA,OptionalDeserializeimplementations lacking validation,"January 20, 2021","August 21, 2021(last modified: June 13, 2023)",raw-cpuid(crates.io),/packages/raw-cpuid.html,Vulnerability,"memory-corruption, denial-of-service","{'text': 'CVE-2021-45687', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45687'}, {'text': 'GHSA-jf5h-cf95-w759', 'url': 'https://github.com/advisories/GHSA-jf5h-cf95-w759'}, {'text': 'GHSA-w428-f65r-h4q2', 'url': 'https://github.com/advisories/GHSA-w428-f65r-h4q2'}","{'text': 'https://github.com/gz/rust-cpuid/issues/43', 'url': 'https://github.com/gz/rust-cpuid/issues/43'}",>=9.1.1,<=3.1.0,"When activating the non-default featureserialize, most structs implementserde::Deserializewithout sufficient validation. This allows breaking
invariants in safe code, leading to: See https://github.com/gz/rust-cpuid/issues/43. Advisory available underCC0-1.0license."
NA,QueryInterface should call AddRef before returning pointer,"January 20, 2021","August 21, 2021(last modified: June 13, 2023)",derive-com-impl(crates.io),/packages/derive-com-impl.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-45681', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45681'}, {'text': 'GHSA-9rg7-3j4f-cf4x', 'url': 'https://github.com/advisories/GHSA-9rg7-3j4f-cf4x'}, {'text': 'GHSA-w4cc-pc2h-whcj', 'url': 'https://github.com/advisories/GHSA-w4cc-pc2h-whcj'}","{'text': 'https://github.com/Connicpu/com-impl/issues/1', 'url': 'https://github.com/Connicpu/com-impl/issues/1'}",>=0.1.2,Version,<=0.1.1,"Affected version of this crate, which is a required dependency in com-impl,
provides a faulty implementation of theIUnknown::QueryInterfacemethod. QueryInterfaceimplementation must callIUnknown::AddRefbefore returning the pointer,
as describe in this documentation:https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void) As it is not incrementing the refcount as expected, the following calls toIUnknown::Releasemethod
will cause WMI to drop reference to the interface, and can lead to invalid reference. This is documented inhttps://docs.microsoft.com/en-us/windows/win32/learnwin32/managing-the-lifetime-of-an-object#reference-counting There is no simple workaround, as you can't know how many time QueryInterface will be called.
The only way to quick fix this is to use the macro expanded version of the code and modify
the QueryInterface method to add the AddRef call yourself. The issue was corrected in commit9803f31fbd1717d482d848f041044d061fca6da7. Advisory available underCC0-1.0license.",derive_com_impl;;derive_com_impl,<=0.1.1
NA,Deserialization functions pass uninitialized memory to user-provided Read,"January 26, 2021","August 21, 2021(last modified: June 13, 2023)",messagepack-rs(crates.io),/packages/messagepack-rs.html,Vulnerability,memory-exposure,"{'text': 'CVE-2021-45690', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45690'}, {'text': 'CVE-2021-45691', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45691'}, {'text': 'CVE-2021-45692', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45692'}, {'text': 'CVE-2021-45693', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45693'}, {'text': 'GHSA-hr52-f9vp-582c', 'url': 'https://github.com/advisories/GHSA-hr52-f9vp-582c'}, {'text': 'GHSA-jqjj-r4qp-x2gh', 'url': 'https://github.com/advisories/GHSA-jqjj-r4qp-x2gh'}, {'text': 'GHSA-jwfh-j623-m97h', 'url': 'https://github.com/advisories/GHSA-jwfh-j623-m97h'}, {'text': 'GHSA-m325-rxjv-pwph', 'url': 'https://github.com/advisories/GHSA-m325-rxjv-pwph'}, {'text': 'GHSA-vw5m-qw2r-m923', 'url': 'https://github.com/advisories/GHSA-vw5m-qw2r-m923'}","{'text': 'https://github.com/otake84/messagepack-rs/issues/2', 'url': 'https://github.com/otake84/messagepack-rs/issues/2'}",no patched versions,"Affected versions of this crate passed an uninitialized buffer to a
user-providedReadinstance in: This can result in safeReadimplementations reading from the uninitialized
buffer leading to undefined behavior. Advisory available underCC0-1.0license."
NA,Improper Input Validation of octal literals instd::net,"January 31, 2020","August  8, 2021(last modified: July 15, 2023)",std,/packages/std.html,Vulnerability,,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29922', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29922'}",>=1.53.0,Version,<=1.52.1,<=1.52.1,<=1.52.1,"Improper input validation of octal strings in rust-lang standard librarynetallows unauthenticated remote attackers to perform
indeterminate SSRF, RFI, and LFI attacks on many programs that rely on rust-lang std::net.
IP address octets are left stripped instead of evaluated as valid IP addresses.
For example, an attacker submitting an IP address to a web application that relies onstd::net::IpAddr,
could cause SSRF via inputting octal input data;
An attacker can submit exploitable IP addresses if the octet is 3 digits,
with the minimum exploitable octet being 08 (Denial of Service) and the maximum exploitable octet is 099 (Denial of Service).
For example, an attacker can submit010.8.8.8, which is8.8.8.8(RFI), yetstd::net::IpAddrwill evaluate this as10.8.8.8.
Equally, an attacker can input127.0.026.1which is really127.0.22.1but rust evaluates it as127.0.26.1. Advisory available underCC0-1.0license.",std;;net;;ipaddr;;from_str,<=1.52.1
NA,better-macrohas deliberate RCE to prove a point,"July 22, 2021","July 26, 2021(last modified: June 13, 2023)",better-macro(crates.io),/packages/better-macro.html,Vulnerability,code-execution,,"{'text': 'CVE-2021-38196', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38196'}, {'text': 'GHSA-79wf-qcqv-r22r', 'url': 'https://github.com/advisories/GHSA-79wf-qcqv-r22r'}","{'text': 'https://github.com/raycar5/better-macro/blob/24ff1702397b9c19bbfa4c660e2316cd77d3b900/src/lib.rs#L36-L38', 'url': 'https://github.com/raycar5/better-macro/blob/24ff1702397b9c19bbfa4c660e2316cd77d3b900/src/lib.rs#L36-L38'}",no patched versions,Version,>1.0.0,"better-macrois a fake crate which is
""Proving A Point"" that proc-macros can run arbitrary code. This is not a particularly
novel or interesting observation. It currently openshttps://github.com/raycar5/better-macro/blob/master/doc/hi.mdwhich doesn't appear to have any malicious content, but there's no guarantee that
will remain the case. This crate has no useful functionality, and should not be used. Advisory available underCC0-1.0license.",better_macro;;println,>1.0.0
NA,libsecp256k1 allows overflowing signatures,"July 13, 2021","July 13, 2021(last modified: June 13, 2023)",libsecp256k1(crates.io),/packages/libsecp256k1.html,Vulnerability,crypto-failure,"{'text': 'CVE-2021-38195', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38195'}, {'text': 'GHSA-g4vj-x7v9-h82m', 'url': 'https://github.com/advisories/GHSA-g4vj-x7v9-h82m'}","{'text': 'https://github.com/paritytech/libsecp256k1/pull/67', 'url': 'https://github.com/paritytech/libsecp256k1/pull/67'}",>=0.5.0,"libsecp256k1 accepts signatures whose R or S parameter is larger than the
secp256k1 curve order, which differs from other implementations. This could
lead to invalid signatures being verified. The error is resolved in 0.5.0 by adding acheck_overflowflag. Advisory available underCC0-1.0license."
NA,Flaw inFieldVar::mul_by_inverseallows unsound R1CS constraint systems,"July  8, 2021","July  9, 2021(last modified: June 13, 2023)",ark-r1cs-std(crates.io),/packages/ark-r1cs-std.html,Vulnerability,crypto-failure,,"{'text': 'CVE-2021-38194', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38194'}, {'text': 'GHSA-qj3v-q2vj-4c8h', 'url': 'https://github.com/advisories/GHSA-qj3v-q2vj-4c8h'}","{'text': 'https://github.com/arkworks-rs/r1cs-std/pull/70', 'url': 'https://github.com/arkworks-rs/r1cs-std/pull/70'}",>=0.3.1,Version,<0.3.0,"Versions0.2.0to0.3.0of ark-r1cs-std did not enforce any constraints in theFieldVar::mul_by_inversemethod, allowing a malicious prover to produce an unsound proof that passes all verifier checks.
This method was used primarily in scalar multiplication forshort_weierstrass::ProjectiveVar. This bug was fixed in commit47ddbaa, and was released as part of version0.3.1oncrates.io. Advisory available underCC0-1.0license.",ark_r1cs_std;;fieldvar;;mul_by_inverse,<0.3.0
NA,Conversion fromprost_types::TimestamptoSystemTimecan cause an overflow and panic,"July  8, 2021","July  8, 2021(last modified: June 13, 2023)",prost-types(crates.io),/packages/prost-types.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2021-38192', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38192'}, {'text': 'GHSA-x4qm-mcjq-v2gf', 'url': 'https://github.com/advisories/GHSA-x4qm-mcjq-v2gf'}","{'text': 'https://github.com/tokio-rs/prost/issues/438', 'url': 'https://github.com/tokio-rs/prost/issues/438'}",>=0.8.0,Version,<=0.7.0,Affected versions of this crate contained a bug in which untrusted input could cause an overflow and panic when converting aTimestamptoSystemTime. It is recommended to upgrade toprost-typesv0.8 and switch the usage ofFrom<Timestamp> for SystemTimetoTryFrom<Timestamp> for SystemTime. See#438for more information. Advisory available underCC0-1.0license.,prost_types;;timestamp;;into<systemtime>,<=0.7.0
NA,Task dropped in wrong thread when abortingLocalSettask,"July  7, 2021","July  8, 2021(last modified: June 13, 2023)",tokio(crates.io),/packages/tokio.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-38191', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38191'}, {'text': 'GHSA-2grh-hm3w-w7hv', 'url': 'https://github.com/advisories/GHSA-2grh-hm3w-w7hv'}","{'text': 'https://github.com/tokio-rs/tokio/issues/3929', 'url': 'https://github.com/tokio-rs/tokio/issues/3929'}",">=1.5.1, <1.6.0>=1.6.3, <1.7.0>=1.7.2, <1.8.0>=1.8.1",<0.3.0,Version,"<=1.8.0, >=0.3.0","When aborting a task withJoinHandle::abort, the future is dropped in the
thread calling abort if the task is not currently being executed. This is
incorrect for tasks spawned on aLocalSet. This can easily result in race conditions as many projects useRcorRefCellin their Tokio tasks for better performance. Seetokio#3929for more details. Advisory available underCC0-1.0license.",tokio;;task;;joinhandle;;abort,"<=1.8.0, >=0.3.0"
NA,Incorrect handling of embedded SVG and MathML leads to mutation XSS,"July  8, 2021","July  8, 2021(last modified: June 13, 2023)",ammonia(crates.io),/packages/ammonia.html,Vulnerability,format-injection,,"{'text': 'CVE-2021-38193', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38193'}, {'text': 'GHSA-5325-xw5m-phm3', 'url': 'https://github.com/advisories/GHSA-5325-xw5m-phm3'}","{'text': 'https://github.com/rust-ammonia/ammonia/pull/142', 'url': 'https://github.com/rust-ammonia/ammonia/pull/142'}",">=3.1.0>=2.1.3, <3.0.0","Affected versions of this crate did not account for namespace-related parsing
differences between HTML, SVG, and MathML. Even if thesvgandmathelements
are not allowed, the underlying HTML parser still treats them differently.
Running cleanup without accounting for these differing namespaces resulted in an ""impossible""
DOM, which appeared ""safe"" when examining the DOM tree, but when serialized and deserialized,
could be exploited to inject arbitrary markup. To exploit this, the application using this library must allow a tag that is parsed as raw text in HTML.
Theseelementsare: Applications that do not explicitly allow any of these tags should not be affected, since none are allowed by default. Advisory available underCC0-1.0license."
NA,Double free in Vec::from_iter specialization when drop panics,"March 28, 2021","July  6, 2021",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-31162', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-31162'}",>=1.52.0,<1.48.0,"In the standard library in Rust before 1.52.0, a double free can occur in the Vec::from_iter function if freeing the element panics. Advisory available underCC0-1.0license."
NA,MutexGuard<Cell<i32>> must not be Sync,"April 29, 2017","July  6, 2021",std,/packages/std.html,Vulnerability,thread-safety,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-20004', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-20004'}",>=1.19.0,<1.0.0,"In the standard library in Rust before 1.19.0, there is a synchronization problem in the MutexGuard object. MutexGuards can be used across threads with any types, allowing for memory safety issues through race conditions. Advisory available underCC0-1.0license."
NA,API soundness issue in join() implementation of [Borrow<str>],"December 23, 2020","July  6, 2021",std,/packages/std.html,Vulnerability,memory-exposure,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36323', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36323'}",>=1.52.0,<1.28.0,"In the standard library in Rust before 1.52.0, there is an optimization for joining strings that can cause uninitialized bytes to be exposed (or the program to crash) if the borrowed string changes after its length is checked. Advisory available underCC0-1.0license."
NA,Insufficient synchronization inArc::get_mut,"June 25, 2018","July  6, 2021",std,/packages/std.html,Vulnerability,thread-safety,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25008', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25008'}",>=1.29.0,<1.3.0,"In the standard library in Rust before 1.29.0, there is weak synchronization in the Arc::get_mut method. This synchronization issue can be lead to memory safety issues through race conditions. Advisory available underCC0-1.0license."
NA,vec_deque::Iter has unsound Debug implementation,"August 21, 2018","July  6, 2021",std,/packages/std.html,Vulnerability,memory-exposure,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1010299', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1010299'}",>=1.30.0,<1.18.0,"The Rust Programming Language Standard Library 1.18.0 and later is affected by: CWE-200: Information Exposure. The impact is: Contents of uninitialized memory could be printed to string or to log file. The component is: Debug trait implementation for std::collections::vec_deque::Iter. The attack vector is: The program needs to invoke debug printing for iterator over an empty VecDeque. The fixed version is: 1.30.0, nightly versions after commit b85e4cc8fadaabd41da5b9645c08c68b8f89908d. Advisory available underCC0-1.0license."
NA,VecStorage Deserialize Allows Violation of Length Invariant,"June  6, 2021","June  6, 2021(last modified: June 13, 2023)",nalgebra(crates.io),/packages/nalgebra.html,Vulnerability,"memory-corruption, memory-exposure",,"{'text': 'CVE-2021-38190', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38190'}, {'text': 'GHSA-3w8g-xr3f-2mp8', 'url': 'https://github.com/advisories/GHSA-3w8g-xr3f-2mp8'}","{'text': 'https://github.com/dimforge/nalgebra/issues/883', 'url': 'https://github.com/dimforge/nalgebra/issues/883'}",>=0.27.1,<0.11.0,TheDeserializeimplementation forVecStoragedid not maintain the invariant that the number of elements must equalnrows * ncols. Deserialization of specially crafted inputs could allow memory access beyond allocation of the vector. This flaw was introduced in v0.11.0 (086e6e) due to the addition of an automatically derived implementation ofDeserializeforMatrixVec.MatrixVecwas later renamed toVecStoragein v0.16.13 (0f66403) and continued to use the automatically derived implementation ofDeserialize. This flaw was corrected in commit5bff536by returning an error during deserialization if the number of elements does not exactly match the expected size. Advisory available underCC0-1.0license.
NA,SMTP command injection in body,"May 22, 2021","May 22, 2021(last modified: October 19, 2021)",lettre(crates.io),/packages/lettre.html,Vulnerability,format-injection,,"{'text': 'GHSA-qc36-q22q-cjw3', 'url': 'https://github.com/advisories/GHSA-qc36-q22q-cjw3'}, {'text': 'CVE-2021-38189', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38189'}","{'text': 'https://github.com/lettre/lettre/pull/627/commits/93458d01fed0ec81c0e7b4e98e6f35961356fae2', 'url': 'https://github.com/lettre/lettre/pull/627/commits/93458d01fed0ec81c0e7b4e98e6f35961356fae2'}",">=0.10.0-rc.3<0.10.0-alpha.1, >=0.9.6",<0.7.0,Version,<0.10.0-alpha.1,">=0.10.0-alpha.1, <0.10.0-rc.3",">=0.10.0-alpha.1, <0.10.0-rc.3","Affected versions of lettre allowed SMTP command injection through an attacker's controlled message body. The module for escaping lines starting with a period wouldn't catch a period that was placed after a double CRLF sequence, allowing the attacker to end the current message and write arbitrary SMTP commands after it. The flaw is fixed by correctly handling consecutive CRLF sequences. Advisory available underCC0-1.0license.",lettre;;smtp;;smtptransport;;send,<0.10.0-alpha.1
NA,Soundness issue iniced-x86versions <= 1.10.3,"May 19, 2021","May 22, 2021(last modified: June 13, 2023)",iced-x86(crates.io),/packages/iced-x86.html,Vulnerability,,"{'text': 'CVE-2021-38188', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38188'}, {'text': 'GHSA-jjx5-3f36-6927', 'url': 'https://github.com/advisories/GHSA-jjx5-3f36-6927'}","{'text': 'https://github.com/icedland/iced/issues/168', 'url': 'https://github.com/icedland/iced/issues/168'}",>1.10.3,Version,<=1.10.3,"Versions of iced-x86 <= 1.10.3 invoke undefined behavior which may cause soundness
issues in crates using theiced_x86::Decoderstruct. TheDecoder::new()function
made a call toslice.get_unchecked(slice.length())to get the end position of
the input buffer. The flaw was fixed with safe logic that does not invoke undefined
behavior. More details can be found athttps://github.com/icedland/iced/issues/168. Advisory available underCC0-1.0license.",iced_x86;;decoder;;new,<=1.10.3
NA,Denial of service on EVM execution due to memory over-allocation,"May 11, 2021","May 11, 2021(last modified: June 13, 2023)",evm-core(crates.io),/packages/evm-core.html,Vulnerability,denial-of-service,"{'text': 'GHSA-773q-5334-5gf9', 'url': 'https://github.com/advisories/GHSA-773q-5334-5gf9'}","{'text': 'https://github.com/rust-blockchain/evm', 'url': 'https://github.com/rust-blockchain/evm'}",>=0.26.1^0.25.1^0.24.1^0.23.1^0.21.1,"Prior to the patch, when executing specific EVM opcodes related
to memory operations that useevm_core::Memory::copy_large, the
crate can over-allocate memory when it is not needed, making it
possible for an attacker to perform denial-of-service attack. The flaw was corrected in commit19ade85. Advisory available underCC0-1.0license."
NA,XSS incomrak,"May  4, 2021","May  4, 2021(last modified: June 13, 2023)",comrak(crates.io),/packages/comrak.html,Vulnerability,format-injection,,"{'text': 'CVE-2021-38186', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38186'}, {'text': 'GHSA-6wj2-g87r-pm62', 'url': 'https://github.com/advisories/GHSA-6wj2-g87r-pm62'}","{'text': 'https://github.com/kivikakk/comrak/releases/tag/0.10.1', 'url': 'https://github.com/kivikakk/comrak/releases/tag/0.10.1'}",>=0.10.1,"comrakoperates by default in a ""safe""
mode of operation where unsafe content, such as arbitrary raw HTML or URLs with
non-standard schemes, are not permitted in the output.  This is per the
reference GFM implementation,cmark-gfm. Ampersands were not being correctly escaped in link targets, making it possible
to fashion unsafe URLs using schemes likedata:orjavascript:by entering
them as HTML entities, e.g.&#x64&#x61&#x74&#x61&#x3a.  The intended
behaviour, demonstrated upstream, is that these should be escaped and therefore
harmless, but this behaviour was broken in comrak. Advisory available underCC0-1.0license."
NA,'merge_sort::merge()' crashes with double-free forT: Drop,"March  7, 2021","April 15, 2021(last modified: June 13, 2023)",algorithmica(crates.io),/packages/algorithmica.html,Vulnerability,memory-corruption,"{'text': 'CVE-2021-31996', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-31996'}, {'text': 'GHSA-jh37-772x-4hpw', 'url': 'https://github.com/advisories/GHSA-jh37-772x-4hpw'}","{'text': 'https://github.com/AbrarNitk/algorithmica/issues/1', 'url': 'https://github.com/AbrarNitk/algorithmica/issues/1'}",no patched versions,"In the affected versions of this crate,merge_sort::merge()wildly duplicates and drops ownership ofTwithout guarding against double-free. Due to such implementation,
simply invokingmerge_sort::merge()onVec<T: Drop>can causedouble freebugs. Advisory available underCC0-1.0license."
NA,TrustedRandomAccess specialization composes incorrectly for nested iter::Zips,"January  3, 2021","April 13, 2021(last modified: July 15, 2023)",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28877', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28877'}",>=1.51.0,<1.11.0,"In the standard library in Rust before 1.51.0, the Zip implementation calls__iterator_get_unchecked()for the same index more than once when nested. This bug can lead to a memory safety violation due to an unmet safety requirement for theTrustedRandomAccesstrait. Advisory available underCC0-1.0license."
NA,VecDeque::make_contiguous may duplicate the contained elements,"December  7, 2020","April 13, 2021",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36318', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36318'}",>=1.49.0,<1.48.0,"In the standard library in Rust before 1.49.0, VecDeque::make_contiguous has a bug that pops the same element more than once under certain condition. This bug could result in a use-after-free or double free. Advisory available underCC0-1.0license."
NA,String::retain allows safely creating invalid strings when abusing panic,"October 28, 2020","April 13, 2021",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36317', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36317'}",>=1.49.0,<1.26.0,"In the standard library in Rust before 1.49.0, String::retain() function has a panic safety problem. It allows creation of a non-UTF-8 Rust string when the provided closure panics. This bug could result in a memory safety violation when other string APIs assume that UTF-8 encoding is used on the same string. Advisory available underCC0-1.0license."
NA,Panic safety violation in BinaryHeap,"May 27, 2015","April 13, 2021",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-20001', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-20001'}",>=1.2.0,<1.0.0,"In the standard library in Rust before 1.2.0, BinaryHeap is not panic-safe. The binary heap is left in an inconsistent state when the comparison of generic elements inside sift_up or sift_down_range panics. This bug leads to a drop of zeroed memory as an arbitrary type, which can result in a memory safety violation. Advisory available underCC0-1.0license."
NA,Zip can cause buffer overflow when a consumed Zip iterator is used again,"February 18, 2021","April 13, 2021",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28879', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28879'}",>=1.52.0,<1.14.0,"In the standard library in Rust before 1.52.0, the Zip implementation can report an incorrect size due to an integer overflow. This bug can lead to a buffer overflow when a consumed Zip iterator is used again. Advisory available underCC0-1.0license."
NA,Zip may call __iterator_get_unchecked twice with the same index,"February 19, 2021","April 13, 2021",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28878', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28878'}",>=1.52.0,<1.14.0,"In the standard library in Rust before 1.52.0, the Zip implementation calls __iterator_get_unchecked() more than once for the same index (under certain conditions) when next_back() and next() are used together. This bug could lead to a memory safety violation due to an unmet safety requirement for the TrustedRandomAccess trait. Advisory available underCC0-1.0license."
NA,Panic safety issue in Zip specialization,"February  4, 2021","April 13, 2021",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28876', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28876'}",>=1.52.0,<1.14.0,"In the standard library in Rust before 1.52.0, the Zip implementation has a panic safety issue. It calls __iterator_get_unchecked() more than once for the same index when the underlying iterator panics (in certain conditions). This bug could lead to a memory safety violation due to an unmet safety requirement for the TrustedRandomAccess trait. Advisory available underCC0-1.0license."
NA,Logic bug in Read can cause buffer overflow in read_to_end(),"January 10, 2021","April 13, 2021",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28875', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28875'}",>=1.50.0,<1.20.0,"In the standard library in Rust before 1.50.0, read_to_end() does not validate the return value from Read in an unsafe context. This bug could lead to a buffer overflow. Advisory available underCC0-1.0license."
NA,Multiple functions can cause double-frees,"February 26, 2021","April  2, 2021(last modified: June 13, 2023)",id-map(crates.io),/packages/id-map.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-30455', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-30455'}, {'text': 'CVE-2021-30456', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-30456'}, {'text': 'CVE-2021-30457', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-30457'}, {'text': 'GHSA-8gmx-cpcg-f8h5', 'url': 'https://github.com/advisories/GHSA-8gmx-cpcg-f8h5'}, {'text': 'GHSA-rccq-j2m7-8fwr', 'url': 'https://github.com/advisories/GHSA-rccq-j2m7-8fwr'}, {'text': 'GHSA-vfqx-hv88-f9cv', 'url': 'https://github.com/advisories/GHSA-vfqx-hv88-f9cv'}","{'text': 'https://github.com/andrewhickman/id-map/issues/3', 'url': 'https://github.com/andrewhickman/id-map/issues/3'}",no patched versions,"The following functions in the crate are affected: Theclone_fromimplementation forIdMapdrops the values present in the
map and then begins cloning values from the other map. If a.clone()call
pancics, then the afformentioned dropped elements can be freed again. get_or_insertreserves space for a value, before calling the user provided
insertion functionf. If the functionfpanics then uninitialized or
previously freed memory can be dropped. When removing a set of elements,ptr::drop_in_placeis called on each of the
element to be removed. If theDropimpl of one of these elements panics then
the previously dropped elements can be dropped again. Advisory available underCC0-1.0license."
NA,Multiple memory safety issues,"March  6, 2021","March  6, 2021(last modified: June 13, 2023)",fltk(crates.io),/packages/fltk.html,Vulnerability,,"{'text': 'CVE-2021-28306', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28306'}, {'text': 'CVE-2021-28307', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28307'}, {'text': 'CVE-2021-28308', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28308'}, {'text': 'GHSA-5pg8-h4gv-m3p8', 'url': 'https://github.com/advisories/GHSA-5pg8-h4gv-m3p8'}, {'text': 'GHSA-7qcc-g2m9-8533', 'url': 'https://github.com/advisories/GHSA-7qcc-g2m9-8533'}, {'text': 'GHSA-vjmg-pc8h-p6p8', 'url': 'https://github.com/advisories/GHSA-vjmg-pc8h-p6p8'}","{'text': 'https://github.com/MoAlyousef/fltk-rs/issues/519', 'url': 'https://github.com/MoAlyousef/fltk-rs/issues/519'}",>=0.15.3,Version,"<0.15.2, >=0.14.12",<0.15.2,<0.14.12,"Affected versions contain multiple memory safety issues, such as: Advisory available underCC0-1.0license.",fltk;;image;;pixmap;;new,"<0.15.2, >=0.14.12"
NA,Multiple memory safety issues in insert_row,"February 19, 2021","March  1, 2021(last modified: June 13, 2023)",toodee(crates.io),/packages/toodee.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-28028', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28028'}, {'text': 'CVE-2021-28029', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28029'}, {'text': 'GHSA-wcvp-r8j8-47pc', 'url': 'https://github.com/advisories/GHSA-wcvp-r8j8-47pc'}, {'text': 'GHSA-xm9m-2vj8-fmfr', 'url': 'https://github.com/advisories/GHSA-xm9m-2vj8-fmfr'}","{'text': 'https://github.com/antonmarsden/toodee/issues/13', 'url': 'https://github.com/antonmarsden/toodee/issues/13'}",>=0.3.0,Version,<0.3.0,"When inserting rows from an iterator at a particular index,toodeewould shift
items over, duplicating their ownership. The space reserved for the new elements
was based on thelen()returned by theExactSizeIterator. This could result in elements in the array being freed twice if the iterator
panics. Uninitialized or previously freed elements could also be exposed if thelen()didn't match the number of elements. These issues were fixed in commitced70c17by temporarily setting the length
of the array smaller while processing it and adding assertions on the number
of elements returned by the iterator. Advisory available underCC0-1.0license.",toodee;;toodee;;insert_row,<0.3.0
NA,Multiple soundness issues,"February  4, 2021","February  4, 2021(last modified: June 13, 2023)",xcb(crates.io),/packages/xcb.html,Vulnerability,"memory-corruption, memory-exposure","{'text': 'CVE-2021-26955', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26955'}, {'text': 'CVE-2021-26956', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26956'}, {'text': 'CVE-2021-26957', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26957'}, {'text': 'CVE-2021-26958', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26958'}, {'text': 'GHSA-2xpg-3hx4-fm9r', 'url': 'https://github.com/advisories/GHSA-2xpg-3hx4-fm9r'}, {'text': 'GHSA-3288-cwgw-ch86', 'url': 'https://github.com/advisories/GHSA-3288-cwgw-ch86'}, {'text': 'GHSA-3cj3-jrrp-9rxf', 'url': 'https://github.com/advisories/GHSA-3cj3-jrrp-9rxf'}, {'text': 'GHSA-mp6r-fgw2-rxfx', 'url': 'https://github.com/advisories/GHSA-mp6r-fgw2-rxfx'}","{'text': 'https://github.com/RustSec/advisory-db/issues/653', 'url': 'https://github.com/RustSec/advisory-db/issues/653'}, {'text': 'https://github.com/rust-x-bindings/rust-xcb/issues/78', 'url': 'https://github.com/rust-x-bindings/rust-xcb/issues/78'}, {'text': 'https://github.com/rust-x-bindings/rust-xcb/issues/94', 'url': 'https://github.com/rust-x-bindings/rust-xcb/issues/94'}, {'text': 'https://github.com/rust-x-bindings/rust-xcb/issues/95', 'url': 'https://github.com/rust-x-bindings/rust-xcb/issues/95'}, {'text': 'https://github.com/rust-x-bindings/rust-xcb/issues/96', 'url': 'https://github.com/rust-x-bindings/rust-xcb/issues/96'}",>=1.0,"The functionxcb::xproto::GetAtomNameReply::name()callsstd::str::from_utf8_unchecked()on the raw bytes that were received from the
X11 server without any validity checks. The X11 server only prevents interior
null bytes, but otherwise allows any X11 client to create an atom for arbitrary
bytes. This issue is tracked here: https://github.com/rust-x-bindings/rust-xcb/issues/96 The functionxcb::xproto::GetPropertyReply::value()returns a slice of typeTwhereTis an unconstrained type parameter. The raw bytes received from
the X11 server are interpreted as the requested type. The users of thexcbcrate are advised to only call this function with the
intended types. These areu8,u16, andu32. This issue is tracked here: https://github.com/rust-x-bindings/rust-xcb/issues/95 xcb::xproto::change_propertyhas (among others) the argumentsformat: u8anddata: &[T]. The intended use is one of the following cases: The users of thexcbcrate are advised to only call this function with one of
the intended argument combinations. This issue is tracked here: https://github.com/rust-x-bindings/rust-xcb/issues/94 The functionxcb::base::cast_event()takes a reference to axcb::base::GenericEventand returns a reference to an arbitrary type, as
requested by the caller (or found via type interference). The function is
implemented as a direct call tostd::mem::transmute(). Since the return type
is not constrained, this allows transmution to an incorrect type or a type that
is larger than the X11 event that was passed in. X11 events are mostly always 32 bytes large and this function works as intended. Users are advised to only cast to the event structs provided by thexcbcrate
(and hope for the best). This issue is tracked here: https://github.com/rust-x-bindings/rust-xcb/issues/78 Advisory available underCC0-1.0license."
NA,Soundness issues inraw-cpuid,"January 20, 2021","January 24, 2021(last modified: June 13, 2023)",raw-cpuid(crates.io),/packages/raw-cpuid.html,Vulnerability,"memory-corruption, denial-of-service","{'text': 'CVE-2021-26306', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26306'}, {'text': 'CVE-2021-26307', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26307'}, {'text': 'GHSA-hvqc-pc78-x9wh', 'url': 'https://github.com/advisories/GHSA-hvqc-pc78-x9wh'}, {'text': 'GHSA-jrf8-cmgg-gv2m', 'url': 'https://github.com/advisories/GHSA-jrf8-cmgg-gv2m'}","{'text': 'https://github.com/RustSec/advisory-db/pull/614', 'url': 'https://github.com/RustSec/advisory-db/pull/614'}",>=9.0.0,x86x86_64,"VendorInfo::as_string(),SoCVendorBrand::as_string(),
andExtendedFunctionInfo::processor_brand_string()construct byte slices
usingstd::slice::from_raw_parts(), with data coming from#[repr(Rust)]structs. This is always undefined behavior. See https://github.com/gz/rust-cpuid/issues/40. This flaw has been fixed in v9.0.0, by making the relevant structs#[repr(C)]. native_cpuid::cpuid_count()exposes the unsafe__cpuid_count()intrinsic
fromcore::arch::x86orcore::arch::x86_64as a safe function, and uses
it internally, without checking thesafety requirement: CPUID is available in most, but not all, x86/x86_64 environments. The crate
compiles only on these architectures, so others are unaffected. This issue is mitigated by the fact that affected programs are expected
to crash deterministically every time. See https://github.com/gz/rust-cpuid/issues/41. The flaw has been fixed in v9.0.0, by intentionally breaking compilation
when targeting SGX or 32-bit x86 without SSE. This covers all affected CPUs. Advisory available underCC0-1.0license."
NA,Async-h1 request smuggling possible with long unread bodies,"December 17, 2020","December 18, 2020(last modified: June 13, 2023)",async-h1(crates.io),/packages/async-h1.html,Vulnerability,,"{'text': 'CVE-2020-26281', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26281'}, {'text': 'CVE-2020-36202', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36202'}, {'text': 'GHSA-4vr9-8cjf-vf9c', 'url': 'https://github.com/advisories/GHSA-4vr9-8cjf-vf9c'}, {'text': 'GHSA-c8rq-crxj-mj9m', 'url': 'https://github.com/advisories/GHSA-c8rq-crxj-mj9m'}","{'text': 'https://github.com/http-rs/async-h1/releases/tag/v2.3.0', 'url': 'https://github.com/http-rs/async-h1/releases/tag/v2.3.0'}",>=2.3.0,Version,<2.3.0,<2.3.0,"This vulnerability affects any webserver that uses async-h1 behind a reverse proxy, including all such Tide applications. If the server does not read the body of a request which is longer than some buffer length, async-h1 will attempt to read a subsequent request from the body content starting at that offset into the body. One way to exploit this vulnerability would be for an adversary to craft a request such that the body contains a request that would not be noticed by a reverse proxy, allowing it to forge forwarded/x-forwarded headers. If an application trusted the authenticity of these headers, it could be misled by the smuggled request. Another potential concern with this vulnerability is that if a reverse proxy is sending multiple http clients' requests along the same keep-alive connection, it would be possible for the smuggled request to specify a long content and capture another user's request in its body. This content could be captured in a post request to an endpoint that allows the content to be subsequently retrieved by the adversary. The flaw was corrected in commit7df79fby ensuring that the request body is always consumed from the tcp stream before attempting to read subsequent keep-alive request headers from it. Advisory available underCC0-1.0license.",async_h1;;server;;accept,<2.3.0
NA,Use-after-free with objects returned byStream'sget_format_infoandget_contextmethods,"June 15, 2018","October 25, 2020(last modified: June 13, 2023)",libpulse-binding(crates.io),/packages/libpulse-binding.html,Vulnerability,memory-corruption,"{'text': 'CVE-2018-25027', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25027'}, {'text': 'CVE-2018-25028', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25028'}, {'text': 'GHSA-ghpq-vjxw-ch5w', 'url': 'https://github.com/advisories/GHSA-ghpq-vjxw-ch5w'}, {'text': 'GHSA-hxjf-h2mh-r6hj', 'url': 'https://github.com/advisories/GHSA-hxjf-h2mh-r6hj'}, {'text': 'GHSA-jqpv-jm4m-86j9', 'url': 'https://github.com/advisories/GHSA-jqpv-jm4m-86j9'}","{'text': 'https://github.com/jnqnfe/pulse-binding-rust/security/advisories/GHSA-ghpq-vjxw-ch5w', 'url': 'https://github.com/jnqnfe/pulse-binding-rust/security/advisories/GHSA-ghpq-vjxw-ch5w'}",>=1.2.1,Version,<1.2.1,<1.2.1,Affected versions contained a pair of use-after-free issues with the objects returned by theget_format_infoandget_contextmethods ofStreamobjects. These objects were mistakenly being constructed without setting an important flag to prevent destruction of the underlying C objects they reference upon their own destruction. Advisory available underCC0-1.0license.,libpulse_binding;;stream;;stream;;get_context,<1.2.1
NA,Please see RUSTSEC-2018-0020,"October 21, 2020","October 22, 2020(last modified: August 16, 2022)",libpulse-binding(crates.io),/packages/libpulse-binding.html,Vulnerability,"{'text': 'https://rustsec.org/advisories/RUSTSEC-2018-0020.html', 'url': 'https://rustsec.org/advisories/RUSTSEC-2018-0020.html'}",no patched versions,>0,This vulnerability was misfiled under the wrong year and has been withdrawn. Advisory available underCC0-1.0license.
NA,"directories is unmaintained, use directories-next instead","October 16, 2020","October 16, 2020(last modified: August 16, 2022)",directories(crates.io),/packages/directories.html,INFOUnmaintained,"{'text': 'https://github.com/dirs-dev/directories-rs', 'url': 'https://github.com/dirs-dev/directories-rs'}",no patched versions,"Thedirectoriescrate is not maintained any more;
usedirectories-nextinstead. Advisory available underCC0-1.0license."
NA,"dirs is unmaintained, use dirs-next instead","October 16, 2020","October 16, 2020(last modified: August 16, 2022)",dirs(crates.io),/packages/dirs.html,INFOUnmaintained,"{'text': 'https://github.com/dirs-dev/dirs-rs', 'url': 'https://github.com/dirs-dev/dirs-rs'}",no patched versions,"Thedirscrate is not maintained any more;
usedirs-nextinstead. Advisory available underCC0-1.0license."
NA,Undefined Behavior in bounded channel,"June 26, 2020","October 11, 2020(last modified: June 13, 2023)",crossbeam-channel(crates.io),/packages/crossbeam-channel.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-15254', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15254'}, {'text': 'CVE-2020-35904', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35904'}, {'text': 'GHSA-m8h8-v6jh-c762', 'url': 'https://github.com/advisories/GHSA-m8h8-v6jh-c762'}, {'text': 'GHSA-v5m7-53cv-f3hx', 'url': 'https://github.com/advisories/GHSA-v5m7-53cv-f3hx'}","{'text': 'https://github.com/crossbeam-rs/crossbeam/pull/533', 'url': 'https://github.com/crossbeam-rs/crossbeam/pull/533'}",>=0.4.4,<0.4.3,The affected version of this crate's theboundedchannel incorrectly assumes thatVec::from_iterhas allocated capacity that same as the number of iterator elements.Vec::from_iterdoes not actually guarantee that and may allocate extra memory. The destructor of theboundedchannel reconstructsVecfrom the raw pointer based on the incorrect assumes described above. This is unsound and causing deallocation with the incorrect capacity whenVec::from_iterhas allocated different sizes with the number of iterator elements. Advisory available underCC0-1.0license.
NA,Various memory safety issues,"April 23, 2020","October  1, 2020(last modified: June 13, 2023)",rusqlite(crates.io),/packages/rusqlite.html,Vulnerability,"{'text': 'CVE-2020-35866', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35866'}, {'text': 'CVE-2020-35867', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35867'}, {'text': 'CVE-2020-35868', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35868'}, {'text': 'CVE-2020-35869', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35869'}, {'text': 'CVE-2020-35870', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35870'}, {'text': 'CVE-2020-35871', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35871'}, {'text': 'CVE-2020-35872', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35872'}, {'text': 'CVE-2020-35873', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35873'}, {'text': 'GHSA-28ph-f7gx-fqj8', 'url': 'https://github.com/advisories/GHSA-28ph-f7gx-fqj8'}, {'text': 'GHSA-3cgf-9m6x-pwwr', 'url': 'https://github.com/advisories/GHSA-3cgf-9m6x-pwwr'}, {'text': 'GHSA-6q5w-m3c5-rv95', 'url': 'https://github.com/advisories/GHSA-6q5w-m3c5-rv95'}, {'text': 'GHSA-8h4j-vm3r-vcq3', 'url': 'https://github.com/advisories/GHSA-8h4j-vm3r-vcq3'}, {'text': 'GHSA-8r7q-r9mx-35rh', 'url': 'https://github.com/advisories/GHSA-8r7q-r9mx-35rh'}, {'text': 'GHSA-g4w7-3qr8-5623', 'url': 'https://github.com/advisories/GHSA-g4w7-3qr8-5623'}, {'text': 'GHSA-q3cc-7p7g-392c', 'url': 'https://github.com/advisories/GHSA-q3cc-7p7g-392c'}, {'text': 'GHSA-rjh8-p66p-jrh5', 'url': 'https://github.com/advisories/GHSA-rjh8-p66p-jrh5'}","{'text': 'https://github.com/rusqlite/rusqlite/releases/tag/0.23.0', 'url': 'https://github.com/rusqlite/rusqlite/releases/tag/0.23.0'}",>=0.23.0,Version,<0.23.0,<0.23.0,<0.23.0,<0.23.0,<0.23.0,<0.23.0,"Several memory safety issues have been uncovered in an audit of
rusqlite. See https://github.com/rusqlite/rusqlite/releases/tag/0.23.0 for a complete list. Advisory available underCC0-1.0license.",rusqlite;;connection;;get_aux,<0.23.0
NA,Unchecked vector pre-allocation,"November 21, 2017","October  1, 2020(last modified: June 13, 2023)",rmpv(crates.io),/packages/rmpv.html,Vulnerability,denial-of-service,,"{'text': 'GHSA-mcrf-7hf9-f6q5', 'url': 'https://github.com/advisories/GHSA-mcrf-7hf9-f6q5'}","{'text': 'https://github.com/3Hren/msgpack-rust/issues/151', 'url': 'https://github.com/3Hren/msgpack-rust/issues/151'}",>=0.4.2,"Affected versions of this crate pre-allocate memory on deserializing raw
buffers without checking whether there is sufficient data available. This allows an attacker to do denial-of-service attacks by sending small
msgpack messages that allocate gigabytes of memory. Advisory available underCC0-1.0license."
NA,Uncontrolled recursion leads to abort in deserialization,"September 17, 2018","October  1, 2020(last modified: June 13, 2023)",serde_yaml(crates.io),/packages/serde_yaml.html,Vulnerability,,"{'text': 'GHSA-39vw-qp34-rmwf', 'url': 'https://github.com/advisories/GHSA-39vw-qp34-rmwf'}","{'text': 'https://github.com/dtolnay/serde-yaml/pull/105', 'url': 'https://github.com/dtolnay/serde-yaml/pull/105'}",>=0.8.4,<0.6.0-rc1,"Affected versions of this crate did not properly check for recursion
while deserializing aliases. This allows an attacker to make a YAML file with an alias referring
to itself causing an abort. The flaw was corrected by checking the recursion depth. Advisory available underCC0-1.0license."
NA,fake-static allows converting any reference into a'staticreference,"April 24, 2020","October  1, 2020(last modified: June 13, 2023)",fake-static(crates.io),/packages/fake-static.html,Vulnerability,"{'text': 'GHSA-8xw8-mmqv-frqq', 'url': 'https://github.com/advisories/GHSA-8xw8-mmqv-frqq'}",no patched versions,"fake-static allows converting a reference with any lifetime into
a reference with'staticlifetime without theunsafekeyword. Internally, this crate does not use unsafe code, it instead
exploits a soundness bug in rustc: https://github.com/rust-lang/rust/issues/25860 Advisory available underCC0-1.0license."
NA,"Multiple security issues including data race, buffer overflow, and uninitialized memory drop","August 25, 2020","October  1, 2020(last modified: June 13, 2023)",arr(crates.io),/packages/arr.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-35886', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35886'}, {'text': 'CVE-2020-35887', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35887'}, {'text': 'CVE-2020-35888', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35888'}, {'text': 'GHSA-36xw-hgfv-jwm7', 'url': 'https://github.com/advisories/GHSA-36xw-hgfv-jwm7'}, {'text': 'GHSA-c7fw-cr3w-wvfc', 'url': 'https://github.com/advisories/GHSA-c7fw-cr3w-wvfc'}, {'text': 'GHSA-fhvj-7f9p-w788', 'url': 'https://github.com/advisories/GHSA-fhvj-7f9p-w788'}","{'text': 'https://github.com/sjep/array/issues/1', 'url': 'https://github.com/sjep/array/issues/1'}",no patched versions,"arrcrate contains multiple security issues. Specifically, Advisory available underCC0-1.0license."
NA,spin is no longer actively maintained,"November 21, 2019","October  1, 2020(last modified: August 16, 2022)",spin(crates.io),/packages/spin.html,INFOUnmaintained,"{'text': 'https://github.com/mvdnes/spin-rs/commit/7516c80', 'url': 'https://github.com/mvdnes/spin-rs/commit/7516c80'}",no patched versions,>=0,The author of thespincrate does not have time or interest to maintain it. Consider the following alternatives (all of which supportno_std): Advisory available underCC0-1.0license.
NA,Test advisory with associated example crate,"October  8, 2019","October  1, 2020(last modified: November  5, 2022)",rustsec-example-crate(crates.io),/packages/rustsec-example-crate.html,Vulnerability,"{'text': 'https://github.com/RustSec/advisory-db/issues/158', 'url': 'https://github.com/RustSec/advisory-db/issues/158'}",>=1.0.0,<0.0.1,"This is a test advisory useful for verifying RustSec tooling and vulnerability
detection pipelines are working correctly. Aside from the fact that it is filed
against an example crate, it is otherwise considered by the Advisory Database
itself to be a normal security advisory. It's filed againstrustsec-example-crate, an otherwise completely empty crate
with no functionality or code, which has three releases: Advisory available underCC0-1.0license."
NA,Multiple memory safety issues,"June  8, 2018","October  1, 2020(last modified: June 13, 2023)",actix-web(crates.io),/packages/actix-web.html,Vulnerability,memory-corruption,"{'text': 'CVE-2018-25024', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25024'}, {'text': 'CVE-2018-25025', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25025'}, {'text': 'CVE-2018-25026', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25026'}, {'text': 'GHSA-7x36-h62w-vw65', 'url': 'https://github.com/advisories/GHSA-7x36-h62w-vw65'}, {'text': 'GHSA-9qj6-4rfq-vm84', 'url': 'https://github.com/advisories/GHSA-9qj6-4rfq-vm84'}, {'text': 'GHSA-fgfm-hqjw-3265', 'url': 'https://github.com/advisories/GHSA-fgfm-hqjw-3265'}, {'text': 'GHSA-w65j-g6c7-g3m4', 'url': 'https://github.com/advisories/GHSA-w65j-g6c7-g3m4'}","{'text': 'https://github.com/actix/actix-web/issues/289', 'url': 'https://github.com/actix/actix-web/issues/289'}",>=0.7.15,"Affected versions contain multiple memory safety issues, such as: This may result in a variety of memory corruption scenarios, most likely use-after-free. A significant refactoring effort has been conducted to resolve these issues. Advisory available underCC0-1.0license."
NA,Obsolete versions of therustseccrate do not support the new V3 advisory format,"October  1, 2020","October  1, 2020",rustsec(crates.io),/packages/rustsec.html,Vulnerability,"{'text': 'https://github.com/RustSec/advisory-db/issues/414', 'url': 'https://github.com/RustSec/advisory-db/issues/414'}",no patched versions,>=0.19.0,"If you are seeing this message, you are running an obsolete version ofcargo-auditwhich does not support the new V3 advisory format.
These versions are end-of-life. This advisory is a notice that that it will soon be unable to parse the
advisory database. Please upgradecargo-auditto a newer release. Advisory available underCC0-1.0license."
NA,Buffer overflow and format vulnerabilities in functions exposed without unsafe,"June 15, 2019","October  1, 2020(last modified: June 13, 2023)",ncurses(crates.io),/packages/ncurses.html,Vulnerability,"{'text': 'CVE-2019-15547', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15547'}, {'text': 'CVE-2019-15548', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15548'}, {'text': 'GHSA-32v7-ghpr-c8hg', 'url': 'https://github.com/advisories/GHSA-32v7-ghpr-c8hg'}, {'text': 'GHSA-g7r5-x7cr-vm3v', 'url': 'https://github.com/advisories/GHSA-g7r5-x7cr-vm3v'}","{'text': 'https://github.com/RustSec/advisory-db/issues/106', 'url': 'https://github.com/RustSec/advisory-db/issues/106'}",no patched versions,Version,>=0,>=0,>=0,>=0,>=0,ncursesexposes functions from the ncurses library which: Advisory available underCC0-1.0license.,ncurses;;instr,>=0
NA,Incorrect implementation of the Streebog hash functions,"October  6, 2019","October  1, 2020(last modified: November  2, 2023)",streebog(crates.io),/packages/streebog.html,Vulnerability,crypto-failure,"{'text': 'CVE-2019-25006', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25006'}, {'text': 'CVE-2019-25007', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25007'}, {'text': 'GHSA-39wr-f4ff-xm6p', 'url': 'https://github.com/advisories/GHSA-39wr-f4ff-xm6p'}, {'text': 'GHSA-gf93-h79q-6jjv', 'url': 'https://github.com/advisories/GHSA-gf93-h79q-6jjv'}","{'text': 'https://github.com/RustCrypto/hashes/pull/91', 'url': 'https://github.com/RustCrypto/hashes/pull/91'}",>=0.8.0,"Internalupdate-sigmafunction was implemented incorrectly and depending ondebug-assertionsit could've caused an incorrect result or panic for certain
inputs. Advisory available underCC0-1.0license."
NA,index()allows out-of-bound read andremove()has off-by-one error,"September  3, 2020","October  1, 2020(last modified: June 13, 2023)",simple-slab(crates.io),/packages/simple-slab.html,Vulnerability,"{'text': 'CVE-2020-35892', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35892'}, {'text': 'CVE-2020-35893', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35893'}, {'text': 'GHSA-438g-fx34-4h9m', 'url': 'https://github.com/advisories/GHSA-438g-fx34-4h9m'}, {'text': 'GHSA-hqc8-j86x-2764', 'url': 'https://github.com/advisories/GHSA-hqc8-j86x-2764'}","{'text': 'https://github.com/nathansizemore/simple-slab/issues/2', 'url': 'https://github.com/nathansizemore/simple-slab/issues/2'}",>=0.3.3,"Slab::index()does not perform the boundary checking, which leads to out-of-bound read access.Slab::remove()copies an element from an invalid address due to off-by-one error, resulting in memory leakage and uninitialized memory drop. Advisory available underCC0-1.0license."
NA,Buffer overflow vulnerability in VecDeque::reserve(),"August 20, 2018","October  1, 2020",std,/packages/std.html,Vulnerability,"code-execution, denial-of-service","{'text': 'https://github.com/rust-lang/rust/issues/44800', 'url': 'https://github.com/rust-lang/rust/issues/44800'}",>=1.22.0,<1.3.0,Version,"<1.22.0, >=1.3.0","Thestd::collections::vec_deque::VecDeque::reserve()function contains a
buffer overflow vulnerability that can potentially result in arbitrary code
execution. Advisory available underCC0-1.0license.",std;;collections;;vec_deque;;vecdeque;;reserve,"<1.22.0, >=1.3.0"
NA,Memory safety vulnerabilities arising fromError::type_id,"May 13, 2019","October  1, 2020",std,/packages/std.html,Vulnerability,memory-corruption,"{'text': 'https://groups.google.com/forum/#!topic/rustlang-security-announcements/aZabeCMUv70', 'url': 'https://groups.google.com/forum/#!topic/rustlang-security-announcements/aZabeCMUv70'}",>1.34.1,<1.34.0,"The Rust team was recently notified of a security vulnerability affecting
manual implementations ofError::type_idand their interaction with theError::downcastfamily of functions in the standard library. If your code
does not manually implementError::type_idyour code is not affected. TheError::type_idfunction in the standard library was stabilized in the
1.34.0 release on 2019-04-11. This function allows acquiring the concreteTypeIdfor the underlying error type to downcast back to the original type.
This function has a default implementation in the standard library, but it can
also be overridden by downstream crates. For example, the following is
currently allowed on Rust 1.34.0 and Rust 1.34.1: When combined with theError::downcast*family of methods this can enable
safe casting of a type to the wrong type, causing security issues such as out
of bounds reads/writes/etc. Prior to the 1.34.0 release this function was not stable and could not be
either implemented or called in stable Rust. TheError::type_idfunction was first stabilized in Rust 1.34.0, released on
2019-04-11. The Rust 1.34.1 release, published 2019-04-25, is also affected.
TheError::type_idfunction has been present, unstable, for all releases of
Rust since 1.0.0 meaning code compiled with nightly may have been affected at
any time. Immediate mitigation of this bug requires removing manual implementations ofError::type_id, instead inheriting the default implementation which is
correct from a safety perspective. It is not the intention to haveError::type_idreturnTypeIdinstances for other types. For long term mitigation we are going to destabilize this function. This is
unfortunately a breaking change for users callingError::type_idand for
users overridingError::type_id. For users overriding it's likely memory
unsafe, but users callingError::type_idhave only been able to do so on
stable for a few weeks since the last 1.34.0 release, so it's thought that the
impact will not be too great to overcome. We will be releasing a 1.34.2 point release on 2019-05-14 (tomorrow) which
reverts#58048and destabilizes theError::type_idfunction. The
upcoming 1.35.0 release along with the beta/nightly channels will also all be
updated with a destabilization. The final fate of theError::type_idAPI isn't decided upon just yet and is
the subject of#60784. No action beyond destabilization is currently
planned so nightly code may continue to exhibit this issue. We hope to fully
resolve this in the standard library soon. Thanks to Sean McArthur, who found this bug and reported it to us in accordance
with our security policy https://www.rust-lang.org/policies/security. Advisory available underCC0-1.0license."
NA,Cargo prior to Rust 1.26.0 may download the wrong dependency,"September 30, 2019","October  1, 2020",cargo,/packages/cargo.html,Vulnerability,"{'text': 'GHSA-phjm-8x66-qw4r', 'url': 'https://github.com/advisories/GHSA-phjm-8x66-qw4r'}","{'text': 'https://groups.google.com/forum/#!topic/rustlang-security-announcements/rVQ5e3TDnpQ', 'url': 'https://groups.google.com/forum/#!topic/rustlang-security-announcements/rVQ5e3TDnpQ'}",>=1.26.0,"The Rust team was recently notified of a security concern when using older
versions of Cargo to build crates which use the package rename feature added in
newer versions of Cargo. If you're using Rust 1.26.0, released on 2018-05-10,
or later you're not affected. The CVE for this vulnerability isCVE-2019-16760. Cargo can be configured throughCargo.tomland the[dependencies]section
to depend on different crates, such as those from crates.io. There are multiple
ways to configure how you depend on crates as well, for example if you depend
onserdeand enable thederivefeature it would look like: Rust 1.31.0introduced a new feature of Cargowhere one of the optional
keys you can specify in this map ispackage, a way torename a crate
locally. For example if you preferred to useserde1locally instead ofserde, you could write: It's the addition of thepackagekey that causes Cargo to compile the crate
differently. This feature wasfirst implementedin Rust 1.26.0, but it was
unstable at the time. For Rust 1.25.0 and prior, however, Cargo would ignore
thepackagekey and and interpret the dependency line as if it were: This means when compiled with Rust 1.25.0 and prior then it would attempt to
download theserde1crate. A malicious user could squat theserde1name on
crates.io to look likeserde 1.0.0but instead act maliciously when built. In summary, usage of thepackagekey to rename dependencies inCargo.tomlis ignored in Rust 1.25.0 and prior. When Rust 1.25.0 and prior is used Cargo
will ignorepackageand download the wrong dependency, which could be
squatted on crates.io to be a malicious package. This not only affects
manifests that you write locally yourself, but also manifests published to
crates.io. If you published a crate, for example, that depends onserde1to
crates.io then users who depend on you may also be vulnerable if they use Rust
1.25.0 and prior. Rust 1.0.0 through Rust 1.25.0 is affected by this advisory because Cargo will
ignore thepackagekey in manifests. Rust 1.26.0 through Rust 1.30.0 are not
affected and typically will emit an error because thepackagekey is
unstable. Rust 1.31.0 and after are not affected because Cargo understands thepackagekey. In terms of Cargo versions, this affects Cargo up through Cargo 0.26.0. All
future versions of Cargo are unaffected. We strongly recommend that users of the affected versions update their compiler
to the latest available one. Preventing this issue from happening requires
updating your compiler to either Rust 1.26.0 or newer. We will not be issuing a patch release for Rust versions prior to 1.26.0. Users
of Rust 1.19.0 to Rust 1.25.0 can instead applythe provided patchesto
mitigate the issue. An audit of existing crates published to crates.io using thepackagekey has
been performed and there is no evidence that this vulnerability has been
exploited in the wild. Our audit only covers the crates currently published on
crates.io: if you notice crates exploiting this vulnerability in the future
please don't hesitate to email secu...@rust-lang.org in accordance withour
security policy. Thanks to Elichai Turkel, who found this bug and reported it to us in accordance
with oursecurity policy. Advisory available underCC0-1.0license."
INFO,Use-after-free when setting the locale,"January 19, 2024","January 23, 2024",rust-i18n-support(crates.io),/packages/rust-i18n-support.html,INFOUnsound,memory-exposure,"{'text': 'https://github.com/longbridgeapp/rust-i18n/issues/71', 'url': 'https://github.com/longbridgeapp/rust-i18n/issues/71'}, {'text': 'https://github.com/longbridgeapp/rust-i18n/pull/72', 'url': 'https://github.com/longbridgeapp/rust-i18n/pull/72'}, {'text': 'https://github.com/longbridgeapp/rust-i18n/releases/tag/v3.0.1', 'url': 'https://github.com/longbridgeapp/rust-i18n/releases/tag/v3.0.1'}",>=3.0.1,<3.0.0,Version,"<3.0.1, >=3.0.0","Version 3.0.0 introduced anAtomicStrtype, that is used to store the current locale.
It stores the locale as a raw pointer to anArc<String>.
The locale can be read withAtomicStr::as_str().AtomicStr::as_str()does not increment the usage counter of theArc. If the locale is changed in one thread, another thread can have a stale -- possibly already freed --
reference to the stored string. Advisory available underCC0-1.0license.",rust_i18n_support;;atomicstr;;as_str,"<3.0.1, >=3.0.0"
INFO,Unsound sending of non-Send types across threads,"January  7, 2024","January 22, 2024",threadalone(crates.io),/packages/threadalone.html,INFOUnsound,"{'text': 'https://github.com/cr0sh/threadalone/issues/1', 'url': 'https://github.com/cr0sh/threadalone/issues/1'}",>=0.2.1,"Affected versions can run theDropimpl of a non-Send type on a different
thread than it was created on. The flaw occurs when a stderr write performed by thethreadalonecrate fails,
for example because stderr is redirected to a location on a filesystem that is
full, or because stderr is a pipe that has been closed by the reader. Dropping a non-Send type on the wrong thread is unsound. If used with a type
such as a pthread-basedMutexGuard,the consequence is undefined
behavior. If used withRc, there would be a data race on the
reference count, which is likewise undefined behavior. Advisory available underCC0-1.0license."
INFO,cosmwasmis unmaintained,"January 20, 2024","January 21, 2024",cosmwasm(crates.io),/packages/cosmwasm.html,INFOUnmaintained,"{'text': 'https://github.com/CosmWasm/cosmwasm/issues/1430', 'url': 'https://github.com/CosmWasm/cosmwasm/issues/1430'}",no patched versions,"The cratecosmwasmisnot used anymoresince spring 2020.
The functionality was split in multiple different crates, such as the standard librarycosmwasm-stdand the virtual machinecosmwasm-vm. An overview can be found in thecosmwasm repository. If you have this crate in your dependency tree, this is very likely by mistake and should be corrected. Advisory available underCC0-1.0license."
INFO,Unsound use of str::from_utf8_unchecked on bytes which are not UTF-8,"January 13, 2024","January 13, 2024",ferris-says(crates.io),/packages/ferris-says.html,INFOUnsound,"{'text': 'https://github.com/rust-lang/ferris-says/pull/21', 'url': 'https://github.com/rust-lang/ferris-says/pull/21'}",>=0.3.1,<=0.1.2,"Affected versions receive a&[u8]from the caller through a safe API, and pass
it directly to the unsafestr::from_utf8_uncheckedfunction. The behavior offerris_says::sayis undefined if the bytes from the caller
don't happen to be valid UTF-8. The flaw was corrected inferris-says#21by using the safestr::from_utf8instead, and returning an error on invalid input. However this fix has not yet
been published to crates.io as a patch version for 0.2. Separately,ferris-says#32has introduced a different API for version 0.3
which accepts input as&strrather than&[u8], so is unaffected by this bug. Advisory available underCC0-1.0license."
INFO,Potential stack use-after-free inInstrumented::into_inner,"October 19, 2023","January 13, 2024",tracing(crates.io),/packages/tracing.html,INFOUnsound,memory-corruption,,"{'text': 'https://github.com/tokio-rs/tracing/pull/2765', 'url': 'https://github.com/tokio-rs/tracing/pull/2765'}",>=0.1.40,<=0.1.37,Version,>=0.1.38<0.1.40,"The implementation of theInstrumented::into_innermethod in affected
versions of this crate contains undefined behavior due to incorrect use ofstd::mem::forgetThe function creates*constpointers toself, callsmem::forget(self), and then moves values out of those
pointers usingstd::ptr::read. However, themem::forgetdocumentationstates: This means that these pointers are no longer valid. This could result in a stack
use-after-free if LLVM chooses to reuseself's stack slot for a rebinding
after the call tostd::mem::forget. This undefined behavior has not been observed to cause miscompilation as of Rust
1.73.0. However, any use of this method with the affected versions oftracingare unsound. The flaw was corrected in commit20a1762(PR #2765) by replacing the use ofstd::mem::forgetwithstd::mem::ManuallyDrop, ensuring that the stack slot
is not reused and the pointers remain valid when they are read. The fix is
published intracingv0.1.40. Affected versions have been yanked from
crates.io. Thanks toTaylor CramerandManish Goregaokarfor finding and correcting
this issue! Advisory available underCC0-1.0license.",tracing;;instrument;;instrumented;;into_inner,>=0.1.38<0.1.40
INFO,Unaligned write of u64 on 32-bit and 16-bit platforms,"December 20, 2023","December 20, 2023",unsafe-libyaml(crates.io),/packages/unsafe-libyaml.html,INFOUnsound,,"{'text': 'https://github.com/dtolnay/unsafe-libyaml/issues/21', 'url': 'https://github.com/dtolnay/unsafe-libyaml/issues/21'}",>=0.2.10,"Affected versions allocate memory using the alignment ofusizeand write data
to it of typeu64, without usingcore::ptr::write_unaligned. In platforms
with sub-64bit alignment forusize(including wasm32 and x86) these writes
are insufficiently aligned some of the time. If using an ordinary optimized standard library, the bug exhibits Undefined
Behavior so may or may not behave in any sensible way, depending on
optimization settings and hardware and other things. If using a Rust standard
library built with debug assertions enabled, the bug manifests deterministically
in a crash (non-unwinding panic) saying""ptr::write requires that the pointer
argument is aligned and non-null"". No 64-bit platform is impacted by the bug. The flaw was corrected by allocating with adequately high alignment on all
platforms. Advisory available underCC0-1.0license."
INFO,cpythonis unmaintained,"November 14, 2023","December 20, 2023",cpython(crates.io),/packages/cpython.html,INFOUnmaintained,"{'text': 'https://github.com/dgrunwald/rust-cpython/commit/e815555', 'url': 'https://github.com/dgrunwald/rust-cpython/commit/e815555'}, {'text': 'https://github.com/dgrunwald/rust-cpython/issues/265', 'url': 'https://github.com/dgrunwald/rust-cpython/issues/265'}, {'text': 'https://github.com/dgrunwald/rust-cpython/issues/294', 'url': 'https://github.com/dgrunwald/rust-cpython/issues/294'}",no patched versions,"Thecpythoncrate and the underlyingpython3-sysandpython27-syscrates have been marked asno longer actively maintainedby the developer. There are also open issues for unsound code that is currently in these crates: Thepyo3crate is actively maintained. Preliminary support for Python 3.12 was added in version 0.19.2, and version 0.20.0 was released with full support for Python 3.12. Both versions implement string functions correctly on big-endian architectures. The endianness issue affecting thecpythoncrate was fixed in recent versions ofpyo3. Advisory available underCC0-1.0license."
INFO,opensslX509StoreRef::objectsis unsound,"November 23, 2023","November 28, 2023(last modified: December 20, 2023)",openssl(crates.io),/packages/openssl.html,INFOUnsound,memory-corruption,"{'text': 'https://github.com/sfackler/rust-openssl/issues/2096', 'url': 'https://github.com/sfackler/rust-openssl/issues/2096'}",>=0.10.60,Version,"<0.10.60, >=0.10.29","This function returned a shared reference into an OpenSSL datastructure but did not account for interior mutability. OpenSSL may modify the data behind this reference, meaning accesses can race and the reference is unsound. Use of this function should be replaced withX509StoreRef::all_certificates. Advisory available underCC0-1.0license.",openssl;;x509;;store;;x509storeref;;objects,"<0.10.60, >=0.10.29"
INFO,fehleris unmaintained; useculpainstead,"October 12, 2023","October 14, 2023",fehler(crates.io),/packages/fehler.html,INFOUnmaintained,"{'text': 'https://github.com/withoutboats/fehler/issues/66', 'url': 'https://github.com/withoutboats/fehler/issues/66'}",no patched versions,"Thefehlercrate is no longer maintained.
Consider usingculpainstead. Advisory available underCC0-1.0license."
INFO,Fails to prohibit standard library access prior to initialization of Rust standard library runtime,"September 10, 2023","September 10, 2023",inventory(crates.io),/packages/inventory.html,INFOUnsound,,"{'text': 'https://github.com/dtolnay/inventory/pull/43', 'url': 'https://github.com/dtolnay/inventory/pull/43'}",>=0.2.0,"Affected versions allow arbitrary caller-provided code to execute before the
lifetime ofmain. If the caller-provided code accesses particular pieces of the standard library
that require an initialized Rust runtime, such asstd::ioorstd::thread,
these may not behave as documented. Panics are likely; UB is possible. The flaw was corrected by enforcing that only code written within theinventorycrate, which is guaranteed not to access runtime-dependent parts of
the standard library, runs beforemain. Caller-provided code is restricted to
running at compile time. Advisory available underCC0-1.0license."
INFO,Exposes reference to non-Sync data to an arbitrary thread,"September 10, 2023","September 10, 2023",inventory(crates.io),/packages/inventory.html,INFOUnsound,thread-safety,,"{'text': 'https://github.com/dtolnay/inventory/pull/42', 'url': 'https://github.com/dtolnay/inventory/pull/42'}",>=0.2.0,"Affected versions do not enforce aSyncbound on the type of caller-provided
value held in the plugin registry. References to these values are made
accessible to arbitrary threads other than the one that constructed them. A caller could use this flaw to submit thread-unsafe data into inventory, then
access it as a reference simultaneously from multiple threads. The flaw was corrected by enforcing that data submitted by the caller into
inventory isSync. Advisory available underCC0-1.0license."
INFO,Unaligned read of*const *const c_charpointer,"September 10, 2023","September 10, 2023(last modified: September 12, 2023)",users(crates.io),/packages/users.html,INFOUnsound,,"{'text': 'https://github.com/ogham/rust-users/issues/55', 'url': 'https://github.com/ogham/rust-users/issues/55'}",no patched versions,"Affected versions dereference a potentially unaligned pointer. The pointer is
commonly unaligned in practice, resulting in undefined behavior. In some build modes, this is observable as a panic followed by abort. In other
build modes the UB may manifest in some other way, including the possibility of
working correctly in some architectures. The crate is not currently maintained, so a patched version is not available. Advisory available underCC0-1.0license."
INFO,Multiple soundness issues,"September  3, 2023","September  3, 2023",lexical(crates.io),/packages/lexical.html,INFOUnsound,"{'text': 'https://github.com/Alexhuszagh/rust-lexical/issues/102', 'url': 'https://github.com/Alexhuszagh/rust-lexical/issues/102'}, {'text': 'https://github.com/Alexhuszagh/rust-lexical/issues/101', 'url': 'https://github.com/Alexhuszagh/rust-lexical/issues/101'}, {'text': 'https://github.com/Alexhuszagh/rust-lexical/issues/95', 'url': 'https://github.com/Alexhuszagh/rust-lexical/issues/95'}, {'text': 'https://github.com/Alexhuszagh/rust-lexical/issues/104', 'url': 'https://github.com/Alexhuszagh/rust-lexical/issues/104'}",no patched versions,"lexicalcontains multiple soundness issues: The crate also has some correctness issues and appears to be unmaintained. For quickly parsing floating-point numbers third-party crates are no longer needed. A fast float parsing algorith by the author oflexicalhas beenmergedinto libcore. For quickly parsing integers, consideratoiandbtoicrates (100% safe code).atoi_radix10provides even faster parsing, but only with-C target-cpu=native, and at the cost of someunsafe. For formatting integers in a#[no_std]context consider thenumtoacrate. For working with big numbers considernum-bigintandnum-traits. Advisory available underCC0-1.0license."
INFO,dlopen_deriveis unmaintained,"July 30, 2023","August 19, 2023",dlopen_derive(crates.io),/packages/dlopen_derive.html,INFOUnmaintained,"{'text': 'https://github.com/szymonwieloch/rust-dlopen/issues/47', 'url': 'https://github.com/szymonwieloch/rust-dlopen/issues/47'}",no patched versions,"dlopen_derivehasn't been updated since June 9, 2019. dlopen_derivedepends onquote = ""0.6.12""andsyn = ""0.15.34"". Versions1.0.0of these dependencies were published on August 13, 2019. The0.*versions haven't received updates since. Note thatdlopenis an unmaintained crate from the same repository asdlopen_derive. However, migrating away fromdlopen_deriveimplies migrating away fromdlopen, as well. Advisory available underCC0-1.0license."
INFO,multipart is Unmaintained,"April 11, 2023","August 18, 2023",multipart(crates.io),/packages/multipart.html,INFOUnmaintained,no patched versions,"Themultipartcrate is unmaintained. The author has archived the github
repository. Alternatives: Advisory available underCC0-1.0license."
INFO,tuiis unmaintained; useratatuiinstead,"August  7, 2023","August  7, 2023",tui(crates.io),/packages/tui.html,INFOUnmaintained,"{'text': 'https://github.com/fdehau/tui-rs/issues/654', 'url': 'https://github.com/fdehau/tui-rs/issues/654'}",no patched versions,Thetuicrate is no longer maintained. Consider using theratatuicrate instead. Advisory available underCC0-1.0license.
INFO,Unsoundness ininternmethods onintagliosymbol interners,"July 26, 2023","July 27, 2023(last modified: July 29, 2023)",intaglio(crates.io),/packages/intaglio.html,INFOUnsound,"{'text': 'GHSA-gch5-hwqf-mxhp', 'url': 'https://github.com/advisories/GHSA-gch5-hwqf-mxhp'}","{'text': 'https://github.com/artichoke/intaglio/pull/236', 'url': 'https://github.com/artichoke/intaglio/pull/236'}, {'text': 'https://github.com/artichoke/intaglio/issues/235', 'url': 'https://github.com/artichoke/intaglio/issues/235'}, {'text': 'https://github.com/artichoke/intaglio/pull/236', 'url': 'https://github.com/artichoke/intaglio/pull/236'}, {'text': 'https://github.com/artichoke/intaglio/releases/tag/v1.9.0', 'url': 'https://github.com/artichoke/intaglio/releases/tag/v1.9.0'}",>=1.9.0,Version,<1.9.0,<1.9.0,"<1.9.0, >=1.5.0","<1.9.0, >=1.5.0","<1.9.0, >=1.5.0","Affected versions of this crate have a stacked borrows violation when creating
references to interned contents. All interner types are affected. The flaw was corrected in version 1.9.0 by reordering move and borrowing
operations and storing interned contents by raw pointer instead of as aBox. Advisory available underCC0-1.0license.",intaglio;;symboltable;;intern,<1.9.0
INFO,implFromMdbValuefor bool is unsound,"June 26, 2023","July 18, 2023(last modified: July 29, 2023)",lmdb-rs(crates.io),/packages/lmdb-rs.html,INFOUnsound,,"{'text': 'GHSA-f9g6-fp84-fv92', 'url': 'https://github.com/advisories/GHSA-f9g6-fp84-fv92'}","{'text': 'https://github.com/vhbit/lmdb-rs/issues/67', 'url': 'https://github.com/vhbit/lmdb-rs/issues/67'}",no patched versions,"The implementation ofFromMdbValuehave several unsoundness issues. First of all, it allows to reinterpret arbitrary bytes as a bool and could make undefined behavior happen with safe function. Secondly, it allows transmuting pointer without taking memory layout into consideration. The details of reproducing the bug were included in url above. Advisory available underCC0-1.0license."
INFO,Misaligned pointer dereference inChunkId::new,"June 15, 2023","June 22, 2023(last modified: July  8, 2023)",cyfs-base(crates.io),/packages/cyfs-base.html,INFOUnsound,,"{'text': 'GHSA-g753-ghr7-q33w', 'url': 'https://github.com/advisories/GHSA-g753-ghr7-q33w'}","{'text': 'https://github.com/buckyos/CYFS/issues/275', 'url': 'https://github.com/buckyos/CYFS/issues/275'}",no patched versions,"The functionChunkId::newcreates a misaligned pointer by casting mutable pointer ofu8slice which has alignment 1 to the mutable pointer ofu32which has alignment 4, and dereference the misaligned pointer leading UB, which should not be allowed in safe function. Advisory available underCC0-1.0license."
INFO,memoffset allows reading uninitialized memory,"June 21, 2023","June 21, 2023(last modified: July  8, 2023)",memoffset(crates.io),/packages/memoffset.html,INFOUnsound,memory-corruption,,"{'text': 'GHSA-wfg4-322g-9vqv', 'url': 'https://github.com/advisories/GHSA-wfg4-322g-9vqv'}","{'text': 'https://github.com/Gilnaa/memoffset/issues/24', 'url': 'https://github.com/Gilnaa/memoffset/issues/24'}",>=0.6.2,Version,<0.6.2,"memoffset allows attempt of reading data from address0with arbitrary type. This behavior is an undefined behavior because address0tostd::mem::size_of<T>may not have valid bit-pattern withT. Old implementation dereferences uninitialized memory obtained fromstd::mem::align_of. Older implementation prior to it allows using uninitialized data obtained fromstd::mem::uninitializedwith arbitrary type then compute offset by taking the address of field-projection. This may also result in an undefined behavior for ""father"" that includes (directly or transitively) type thatdoes not allow to be uninitialized. This flaw was corrected by usingstd::ptr::addr_ofinhttps://github.com/Gilnaa/memoffset/pull/50. Advisory available underCC0-1.0license.",memoffset;;offset_of,<0.6.2
INFO,"ftp is unmaintained, use suppaftp instead","February 20, 2023","June 14, 2023",ftp(crates.io),/packages/ftp.html,INFOUnmaintained,,"{'text': 'https://github.com/mattnenterprise/rust-ftp/pull/92', 'url': 'https://github.com/mattnenterprise/rust-ftp/pull/92'}, {'text': 'https://github.com/mattnenterprise/rust-ftp/issues/91', 'url': 'https://github.com/mattnenterprise/rust-ftp/issues/91'}, {'text': 'https://github.com/mattnenterprise/rust-ftp/issues/84', 'url': 'https://github.com/mattnenterprise/rust-ftp/issues/84'}",no patched versions,"Theftpcrate is not maintained any more;
usesuppaftpinstead. Advisory available underCC0-1.0license."
INFO,Ouroboros is Unsound,"June 11, 2023","June 12, 2023(last modified: July  8, 2023)",ouroboros(crates.io),/packages/ouroboros.html,INFOUnsound,"{'text': 'GHSA-87mf-9wg6-ppf8', 'url': 'https://github.com/advisories/GHSA-87mf-9wg6-ppf8'}","{'text': 'https://github.com/joshua-maros/ouroboros/issues/88', 'url': 'https://github.com/joshua-maros/ouroboros/issues/88'}",>=0.16.0,"Ouroboros has a soundness problem, but a fix has been implemented in 0.16.0. In 0.15.0, Ouroboros works internally by creating a struct where all
uses of 'this are replaced by 'static. However, a recent addition to
Miri checks that references passed to functions are valid during the
entire execution of the function, even when those references are
passed inside a struct. This poses an issue for dropping
self-referencing values, as the reference becomes invalid during the
dropping process. Effectively, since self-referencing structs are
not allowed in vanilla Rust, there is no allowance for dropping data
during a function that has also been given a reference to that data.
There's usually no way to pass a and &a to the same function. A fix was attempted, where the struct would be turned in to a raw
byte array and only transformed back into the underlying data type
inside each function. This is allowable as a reference can be
created and die over the body of a function, as long as the
reference was created inside the function. However, this is also
not sound if the original struct contains padding. There is no
way to initialize padding bytes to a known value that Miri will
accept, so when it is cast to an array some of the bytes contain
uninitialized values. This is not acceptable (despite the fact
that these bytes are never read) due to the potential for
optimizations that may read from the uninitialized bytes. Besides
which, this fix does not allow for template or constant parameters
as there is no way to check the size of a templated type without
giving specific, concrete values for the template parameters. The final solution was to use this fix while wrapping the raw byte
array inMaybeUninit<>. Advisory available underCC0-1.0license."
INFO,userscrate is unmaintained,"June  1, 2023","June  1, 2023(last modified: August 21, 2023)",users(crates.io),/packages/users.html,INFOUnmaintained,"{'text': 'https://github.com/ogham/rust-users/issues/54', 'url': 'https://github.com/ogham/rust-users/issues/54'}",no patched versions,Theuserscrate hasn't seen any action since 2020-10-08. The developer seemsMIAsince. Advisory available underCC0-1.0license.
INFO,crate has been renamed tocrypto_secretbox,"May 16, 2023","May 16, 2023",xsalsa20poly1305(crates.io),/packages/xsalsa20poly1305.html,INFOUnmaintained,"{'text': 'https://github.com/RustCrypto/AEADs/pull/525', 'url': 'https://github.com/RustCrypto/AEADs/pull/525'}",no patched versions,This crate has been forked/renamed fromxsalsa20poly1305tocrypto_secretbox. The new repository location is at: https://github.com/RustCrypto/nacl-compat/tree/master/crypto_secretbox Advisory available underCC0-1.0license.
INFO,tree_magic is Unmaintained,"April 11, 2023","April 24, 2023",tree_magic(crates.io),/packages/tree_magic.html,INFOUnmaintained,"{'text': 'https://github.com/aahancoc/tree_magic/issues/16', 'url': 'https://github.com/aahancoc/tree_magic/issues/16'}",no patched versions,"Thetree_magiccrate is unmaintained. The author has archived the github
repository. Alternatives: Advisory available underCC0-1.0license."
INFO,Adverserial use ofmake_bitflags!macro can cause undefined behavior,"April 17, 2023","April 23, 2023(last modified: June 13, 2023)",enumflags2(crates.io),/packages/enumflags2.html,INFOUnsound,"{'text': 'GHSA-qvc4-78gw-pv8p', 'url': 'https://github.com/advisories/GHSA-qvc4-78gw-pv8p'}","{'text': 'https://github.com/meithecatte/enumflags2/releases/tag/v0.7.7', 'url': 'https://github.com/meithecatte/enumflags2/releases/tag/v0.7.7'}",>=0.7.7,<0.7.0,"The macro relied on an expression of the formEnum::Variantalways being a
variant of the enum. However, it may also be an associated integer constant, in
which case there's no guarantee that the value of said constant consists only of
bits valid for this bitflag type. Thus, code like this could create an invalidBitFlags<Test>, which would cause
iterating over it to trigger undefined behavior. As the debug formatter
internally iterates over the value, it is also affected. Advisory available underCC0-1.0license."
INFO,Parsing borsh messages with ZST which are not-copy/clone is unsound,"April 12, 2023","April 13, 2023(last modified: September 28, 2023)",borsh(crates.io),/packages/borsh.html,INFOUnsound,memory-corruption,"{'text': 'GHSA-fjx5-qpf4-xjf2', 'url': 'https://github.com/advisories/GHSA-fjx5-qpf4-xjf2'}","{'text': 'https://github.com/near/borsh-rs/issues/19', 'url': 'https://github.com/near/borsh-rs/issues/19'}, {'text': 'https://github.com/near/borsh-rs/pull/136', 'url': 'https://github.com/near/borsh-rs/pull/136'}",>=1.0.0-alpha.1,"Affected versions of borsh cause undefined behavior when zero-sized-types (ZST)
are parsed and the Copy/Clone traits are not implemented/derived.
For instance if 1000 instances of a ZST are deserialized, and the ZST is not copy
(this can be achieved through a singleton), then accessing/writing to deserialized
data will cause a segmentation fault. There is currently no way for borsh to read data without also providing a Rust type.
Therefore, if not ZST are used for serialization, then you are not affected by this issue. Advisory available underCC0-1.0license."
INFO,Unsound FFI: Wrong API usage causes write past allocated area,"March 22, 2023","April  6, 2023(last modified: June 13, 2023)",ntru(crates.io),/packages/ntru.html,INFOUnsound,memory-corruption,,"{'text': 'GHSA-fq33-vmhv-48xh', 'url': 'https://github.com/advisories/GHSA-fq33-vmhv-48xh'}","{'text': 'https://github.com/FrinkGlobal/ntru-rs/issues/8', 'url': 'https://github.com/FrinkGlobal/ntru-rs/issues/8'}",no patched versions,Version,>=0.4.3,>=0.4.3,"The following usage causes undefined behavior. When compiled with debug assertions, the code above will trigger aattempt to subtract with overflowpanic before UB occurs.
Other mistakes (e.g. usingEncParamsfrom a different key) may always trigger UB. Likely, older versions of this crate are also affected, but have not been tested. Advisory available underCC0-1.0license.",ntru;;types;;privatekey;;export,>=0.4.3
INFO,Initialisation failure inOnce::try_call_oncecan lead to undefined behaviour for other initialisers,"March 31, 2023","April  4, 2023(last modified: June 13, 2023)",spin(crates.io),/packages/spin.html,INFOUnsound,"{'text': 'GHSA-2qv5-7mw5-j3cg', 'url': 'https://github.com/advisories/GHSA-2qv5-7mw5-j3cg'}","{'text': 'https://github.com/mvdnes/spin-rs/issues/148', 'url': 'https://github.com/mvdnes/spin-rs/issues/148'}",>=0.9.8,<0.9.3,Once::try_call_onceis unsound if invoked more than once concurrently and any call fails to initialise successfully. Advisory available underCC0-1.0license.
INFO,buf_redux is Unmaintained,"January 24, 2023","March 25, 2023",buf_redux(crates.io),/packages/buf_redux.html,INFOUnmaintained,"{'text': 'https://github.com/abonander/buf_redux/issues', 'url': 'https://github.com/abonander/buf_redux/issues'}",no patched versions,Last release was over three years ago. The maintainer(s) have been unreachable to respond to any issues that may or may not include security issues. The repository is now archived and there is no security policy in place to contact the maintainer(s) otherwise. The safety-undocumented unsafe in the crate may or may not be safe to use. The crate also has a current future incompatibility warningbuf_redux/23. The below may or may not provide alternative(s) Advisory available underCC0-1.0license.
INFO,Gitoxide has renamed its crates.,"March 14, 2023","March 25, 2023",git-hash(crates.io),/packages/git-hash.html,INFOUnmaintained,"{'text': 'https://github.com/Byron/gitoxide/pull/741', 'url': 'https://github.com/Byron/gitoxide/pull/741'}",no patched versions,"All crates in the gitoxide project have been renamed from git-to
gix-. The git- prefixed crates are no longer being updated. Switch
to using gix-hash to continue receiving updates. Advisory available underCC0-1.0license."
INFO,Gitoxide has renamed its crates.,"March 14, 2023","March 25, 2023",git-path(crates.io),/packages/git-path.html,INFOUnmaintained,"{'text': 'https://github.com/Byron/gitoxide/pull/741', 'url': 'https://github.com/Byron/gitoxide/pull/741'}",no patched versions,"All crates in the gitoxide project have been renamed from git-to
gix-. The git- prefixed crates are no longer being updated. Switch
to using gix-path to continue receiving updates. Advisory available underCC0-1.0license."
INFO,rmp-serdeRawandRawRefunsound,"April 13, 2022","March 22, 2023(last modified: June 13, 2023)",rmp-serde(crates.io),/packages/rmp-serde.html,INFOUnsound,memory-corruption,"{'text': 'GHSA-255r-3prx-mf99', 'url': 'https://github.com/advisories/GHSA-255r-3prx-mf99'}","{'text': 'https://github.com/3Hren/msgpack-rust/issues/305', 'url': 'https://github.com/3Hren/msgpack-rust/issues/305'}",>=1.1.1,It was found thatRaw::from_utf8expects valid UTF-8. If invalid UTF-8 is received it can cause the process to crash. Advisory available underCC0-1.0license.
INFO,const-cstr is Unmaintained,"March 12, 2023","March 13, 2023",const-cstr(crates.io),/packages/const-cstr.html,INFOUnsound,"{'text': 'https://github.com/abonander/const-cstr', 'url': 'https://github.com/abonander/const-cstr'}",no patched versions,Last release was about five years ago. The maintainer(s) have been unreachable to respond to any issues that may or may not include security issues. The repository is now archived and there is no security policy in place to contact the maintainer(s) otherwise. No direct fork exist. The crate violates the safety contract offfi::CStr::from_bytes_with_nul_uncheckedused inConstCStr::as_cstr No interior nul bytes checking is done either by the constructor or the canonical macro to create theConstCStr Additionally the crate may cause runtime panics if statically compiled and ran with any untrusted data that is not nul-terminated. This is however unlikely but the the crate should not be used for untrusted data in context where panic may create a DoS vector. The below may or may not provide alternative(s) Advisory available underCC0-1.0license.
INFO,ncollide2d is unmaintained,"January 29, 2021","March 12, 2023",ncollide2d(crates.io),/packages/ncollide2d.html,INFOUnmaintained,"{'text': 'https://github.com/dimforge/ncollide', 'url': 'https://github.com/dimforge/ncollide'}",no patched versions,"The maintainer has advised that this crate is passively-maintained and that it
is being superseded by theParryproject. Advisory available underCC0-1.0license."
INFO,ncollide3d is unmaintained,"January 29, 2021","March 12, 2023",ncollide3d(crates.io),/packages/ncollide3d.html,INFOUnmaintained,"{'text': 'https://github.com/dimforge/ncollide', 'url': 'https://github.com/dimforge/ncollide'}",no patched versions,"The maintainer has advised that this crate is passively-maintained and that it
is being superseded by theParryproject. Advisory available underCC0-1.0license."
INFO,nphysics2d is unmaintained,"January 29, 2021","March 12, 2023",nphysics2d(crates.io),/packages/nphysics2d.html,INFOUnmaintained,"{'text': 'https://github.com/dimforge/nphysics', 'url': 'https://github.com/dimforge/nphysics'}",no patched versions,"The maintainer has advised that this crate is passively-maintained and that it
is being superseded by theRapierproject. Advisory available underCC0-1.0license."
INFO,encodingis unmaintained,"December  5, 2021","March 12, 2023",encoding(crates.io),/packages/encoding.html,INFOUnmaintained,"{'text': 'https://github.com/lifthrasiir/rust-encoding/issues/127', 'url': 'https://github.com/lifthrasiir/rust-encoding/issues/127'}",no patched versions,Last release was on 2016-08-28. Theissueinquiring as to the status of the crate has gone unanswered by the maintainer. Advisory available underCC0-1.0license.
INFO,out_reference::Out::from_rawshould beunsafe,"January 20, 2021","March 12, 2023(last modified: June 13, 2023)",out-reference(crates.io),/packages/out-reference.html,INFOUnsound,memory-corruption,,"{'text': 'GHSA-p7mj-xvxg-grff', 'url': 'https://github.com/advisories/GHSA-p7mj-xvxg-grff'}","{'text': 'https://github.com/RustyYato/out-ref/issues/1', 'url': 'https://github.com/RustyYato/out-ref/issues/1'}",>=0.2.0,<0.1.0,Version,">=0.1.0, <0.2.0",Out::from_rawin affected versions allows writing a value to invalid memory address without requiringunsafe. The soundness issue has been addressed by makingOut::from_rawan unsafe function. Advisory available underCC0-1.0license.,out_reference;;out;;from_raw,">=0.1.0, <0.2.0"
INFO,nphysics3d is unmaintained,"January 29, 2021","March 12, 2023",nphysics3d(crates.io),/packages/nphysics3d.html,INFOUnmaintained,"{'text': 'https://github.com/dimforge/nphysics', 'url': 'https://github.com/dimforge/nphysics'}",no patched versions,"The maintainer has advised that this crate is passively-maintained and that it
is being superseded by theRapierproject. Advisory available underCC0-1.0license."
INFO,boxfnonceobsolete with release of Rust 1.35.0,"June 20, 2019","March 12, 2023",boxfnonce(crates.io),/packages/boxfnonce.html,INFOUnmaintained,"{'text': 'https://github.com/stbuehler/rust-boxfnonce/commit/058ac7e1a7d732076da9d8a37baa66bcb67758d8', 'url': 'https://github.com/stbuehler/rust-boxfnonce/commit/058ac7e1a7d732076da9d8a37baa66bcb67758d8'}",no patched versions,Thiscommit marks theboxfnoncecrate as obsolete and the GitHub repo has since been archived. The functionality ofboxfnoncehas been added to Rust since 1.35.0. UseBox<dyn FnOnce(...) -> ...>. Advisory available underCC0-1.0license.
INFO,mach is unmaintained,"July 14, 2020","March 12, 2023",mach(crates.io),/packages/mach.html,INFOUnmaintained,"{'text': 'https://github.com/fitzgen/mach/issues/63', 'url': 'https://github.com/fitzgen/mach/issues/63'}",no patched versions,Last release was almost 4 years ago. Maintainer(s) seem to be completely unreachable. These may or may not be suitable alternatives and have not been vetted in any way; Advisory available underCC0-1.0license.
INFO,kuchikiis unmaintained,"January 21, 2023","March  7, 2023(last modified: May 23, 2023)",kuchiki(crates.io),/packages/kuchiki.html,INFOUnmaintained,"{'text': 'https://github.com/kuchiki-rs/kuchiki/commit/f92e4c047fdc30619555da282ac7ccce1d313aa6', 'url': 'https://github.com/kuchiki-rs/kuchiki/commit/f92e4c047fdc30619555da282ac7ccce1d313aa6'}",no patched versions,Thekuchikirepo was marked as archived inthiscommit. Possible alternatives may include: Advisory available underCC0-1.0license.
INFO,maligned::align_firstcauses incorrect deallocation,"March  4, 2023","March  4, 2023(last modified: June 13, 2023)",maligned(crates.io),/packages/maligned.html,INFOUnsound,memory-corruption,,"{'text': 'GHSA-wm8x-php5-hvq6', 'url': 'https://github.com/advisories/GHSA-wm8x-php5-hvq6'}","{'text': 'https://github.com/tylerhawkes/maligned/issues/5', 'url': 'https://github.com/tylerhawkes/maligned/issues/5'}",no patched versions,Version,*,*,*,*,"maligned::align_firstmanually allocates with an alignment larger than T, and then usesVec::from_raw_partson that allocation to get aVec<T>. GlobalAlloc::deallocrequires that thelayoutargument must be the same layout that was used to allocate that block of memory. When deallocating,BoxandVecmay not respect the specified alignment and can cause undefined behavior. Advisory available underCC0-1.0license.",maligned;;align_first,*
INFO,Possible out-of-bounds read in release mode,"February 20, 2023","February 25, 2023(last modified: June 13, 2023)",partial_sort(crates.io),/packages/partial_sort.html,INFOUnsound,memory-exposure,,"{'text': 'GHSA-5x36-7567-3cw6', 'url': 'https://github.com/advisories/GHSA-5x36-7567-3cw6'}","{'text': 'https://github.com/sundy-li/partial_sort/issues/7', 'url': 'https://github.com/sundy-li/partial_sort/issues/7'}",>=0.2.0,"Affected versions of this crate were using a debug assertion to validate thelastparameter ofpartial_sort(). This would allow invalid inputs to cause
an out-of-bounds read instead of immediately panicking, when compiled without
debug assertions. All writes are bounds-checked, so the out-of-bounds memory access is read-only.
This also means that the first attempted out-of-bounds write will panic,
limiting the possible reads. The accessible region is further limited by an initial bounds-checked read
at(last / 2) - 1, i.e., it is proportional to the size of the vector. This bug has been fixed in v0.2.0. Advisory available underCC0-1.0license."
INFO,Ascii allows out-of-bounds array indexing in safe code,"February 25, 2023","February 25, 2023(last modified: June 13, 2023)",ascii(crates.io),/packages/ascii.html,INFOUnsound,memory-corruption,,"{'text': 'GHSA-mrrw-grhq-86gf', 'url': 'https://github.com/advisories/GHSA-mrrw-grhq-86gf'}","{'text': 'https://github.com/tomprogrammer/rust-ascii/issues/64', 'url': 'https://github.com/tomprogrammer/rust-ascii/issues/64'}",>=0.9.3,<=0.6.0,Affected version of this crate had implementation ofFrom<&mut AsciiStr>for&mut [u8]and&mut str. This can result in out-of-bounds array indexing in safe code. The flaw was corrected in commit8a6c779by removing those impls. Advisory available underCC0-1.0license.
INFO,Miscompilation in cortex-m-rt 0.7.1 and 0.7.2,"February 13, 2023","February 14, 2023(last modified: June 13, 2023)",cortex-m-rt(crates.io),/packages/cortex-m-rt.html,INFOUnsound,"{'text': 'GHSA-xw5j-gv2g-mjm2', 'url': 'https://github.com/advisories/GHSA-xw5j-gv2g-mjm2'}","{'text': 'https://github.com/rust-embedded/cortex-m/discussions/469', 'url': 'https://github.com/rust-embedded/cortex-m/discussions/469'}",>=0.7.3,<=0.7.0,"Version 0.7.1 of thecortex-m-rtcrate introduced a regression causing the stack to NOT be eight-byte aligned prior to callingmain(or any other specified entrypoint), violating thestack ABI of AAPCS32, the default ABI used by all Cortex-M targets. This regression is also present in version 0.7.2 of thecortex-m-rtcrate. This regression can cause certain compiler optimizations (which assume the eight-byte alignment) to produce incorrect behavior at runtime. This incorrect behavior has beenobserved in real-world applications. It is advised that ALL users ofv0.7.1andv0.7.2of thecortex-m-rtcrate update to the latest version (v0.7.3), AS SOON AS POSSIBLE.Users ofv0.7.0and prior versions ofcortex-m-rtare not affected by this regression. It will be necessary to rebuild all affected firmware binaries, and flash or deploy the new firmware binaries to affected devices. Advisory available underCC0-1.0license."
INFO,tokio::io::ReadHalf<T>::unsplitis Unsound,"January 11, 2023","February  3, 2023(last modified: June 13, 2023)",tokio(crates.io),/packages/tokio.html,INFOUnsound,memory-exposure,"{'text': 'GHSA-4q83-7cq4-p6wg', 'url': 'https://github.com/advisories/GHSA-4q83-7cq4-p6wg'}","{'text': 'https://github.com/tokio-rs/tokio/issues/5372', 'url': 'https://github.com/tokio-rs/tokio/issues/5372'}",">=1.18.5, <1.19.0>=1.20.4, <1.21.0>=1.24.2",<0.2.0,"tokio::io::ReadHalf<T>::unsplitcan violate thePincontract The soundness issue is described in thetokio/issues#5372 Specific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)
is unusual, combined with the difficulty of making any arbitrary use-after-free
exploitable in Rust without doing a lot of careful alignment of data types in
the surrounding code. Thetokiofeatureio-utilis also required to be enabled to trigger this
soundness issue. Thanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e
and carllerche appropriately responding and fixing the soundness bug. Tokio before 0.2.0 usedfutures0.1 that did not havePin, so it is not
affected by this issue. Advisory available underCC0-1.0license."
INFO,personnummer Input validation error,"September  4, 2020","February  2, 2023",personnummer(crates.io),/packages/personnummer.html,INFONotice,"{'text': 'GHSA-28r9-pq4c-wp3c', 'url': 'https://github.com/advisories/GHSA-28r9-pq4c-wp3c'}","{'text': 'https://github.com/personnummer/rust/pull/4', 'url': 'https://github.com/personnummer/rust/pull/4'}",>=3.0.1,"Swedish personal identity is in the form of YYMMDD-XXXX An issue arises from the regular expression allowing the first three digits in
the last four digits of the personnummer to be 000, which is invalid. To mitigate this without upgrading, a check on the last four digits can be made
to make sure it's not 000x. The affected version should not be relied on without the mitigation to check
that the swedish personal identity number is valid. Advisory available underCC0-1.0license."
INFO,json is unmaintained,"February  1, 2022","January 19, 2023(last modified: August 25, 2023)",json(crates.io),/packages/json.html,INFOUnmaintained,"{'text': 'https://github.com/maciejhirsz/json-rust/issues/205', 'url': 'https://github.com/maciejhirsz/json-rust/issues/205'}, {'text': 'https://github.com/maciejhirsz/json-rust/issues/196', 'url': 'https://github.com/maciejhirsz/json-rust/issues/196'}",no patched versions,Last release was almost 3 years ago. The maintainer is unresponsive with outstanding issues. One of the outstanding issues includea possible soundness issue. The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license.
INFO,parity-util-mem Unmaintained,"November 30, 2022","January 16, 2023",parity-util-mem(crates.io),/packages/parity-util-mem.html,INFOUnmaintained,"{'text': 'https://github.com/paritytech/parity-common/pull/696', 'url': 'https://github.com/paritytech/parity-common/pull/696'}, {'text': 'https://github.com/paritytech/parity-common/issues/607', 'url': 'https://github.com/paritytech/parity-common/issues/607'}, {'text': 'https://github.com/paritytech/parity-common/pull/697', 'url': 'https://github.com/paritytech/parity-common/pull/697'}",no patched versions,The crate has been deprecated and will receive no updates with no repository source. The crate hasa warningsurrounding it's use related to global allocator use that may lead to UB. Advisory available underCC0-1.0license.
INFO,Cratetwowaydeprecated by the author,"May 20, 2021","January 15, 2023(last modified: February  9, 2023)",twoway(crates.io),/packages/twoway.html,INFOUnmaintained,"{'text': 'https://github.com/bluss/twoway', 'url': 'https://github.com/bluss/twoway'}, {'text': 'https://github.com/bluss/twoway/commit/e99b3c718df1117ad7f54c33f6540c8f46cc17dd', 'url': 'https://github.com/bluss/twoway/commit/e99b3c718df1117ad7f54c33f6540c8f46cc17dd'}",no patched versions,The commite99b3c7releasing version 0.2.2 explicitly deprecatestwowayin favour ofmemchrcrate. Advisory available underCC0-1.0license.
INFO,claimis Unmaintained,"December  4, 2022","January 14, 2023(last modified: February  4, 2023)",claim(crates.io),/packages/claim.html,INFOUnmaintained,"{'text': 'https://github.com/svartalf/rust-claim/issues/12', 'url': 'https://github.com/svartalf/rust-claim/issues/12'}",no patched versions,"The last release was in February 2021, almost two years ago. The maintainer has been unresponsive regarding this crate for over a year. A pending issue withclaim's dependencies has made the cratedifficult to use. The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license."
INFO,Use-after-free due to a lifetime error inVec::into_iter(),"January 14, 2022","January 14, 2023(last modified: June 13, 2023)",bumpalo(crates.io),/packages/bumpalo.html,INFOUnsound,"memory-corruption, memory-exposure",,"{'text': 'GHSA-f85w-wvc7-crwc', 'url': 'https://github.com/advisories/GHSA-f85w-wvc7-crwc'}","{'text': 'https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111', 'url': 'https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111'}",>=3.11.1,<1.1.0,Version,<3.11.1,"In affected versions of this crate, the lifetime of the iterator produced byVec::into_iter()is not constrained to the lifetime of theBumpthat
allocated the vector's memory. Using the iterator after theBumpis dropped
causes use-after-free accesses. The following example demonstrates memory corruption arising from a misuse of
this unsoundness. The issue was corrected in version 3.11.1 by adding a lifetime to theIntoItertype, and updating the signature ofVec::into_iter()to constrain this
lifetime. Advisory available underCC0-1.0license.",bumpalo;;collections;;vec;;vec;;into_iter,<3.11.1
INFO,Force cast a &Vecto &[T],"December  2, 2022","December 27, 2022(last modified: June 13, 2023)",prettytable-rs(crates.io),/packages/prettytable-rs.html,INFOUnsound,,"{'text': 'GHSA-gfgm-chr3-x6px', 'url': 'https://github.com/advisories/GHSA-gfgm-chr3-x6px'}","{'text': 'https://github.com/phsym/prettytable-rs/issues/145', 'url': 'https://github.com/phsym/prettytable-rs/issues/145'}",>=0.10.0,"In functionTable::as_ref, a reference of vector is force cast to slice. There are multiple problems here: Advisory available underCC0-1.0license."
INFO,crate has been renamed toembedded-alloc,"December 21, 2022","December 23, 2022",alloc-cortex-m(crates.io),/packages/alloc-cortex-m.html,INFOUnmaintained,"{'text': 'https://github.com/rust-embedded/embedded-alloc/pull/56', 'url': 'https://github.com/rust-embedded/embedded-alloc/pull/56'}",no patched versions,This crate has been renamed fromalloc-cortex-mtoembedded-alloc. The new repository location is: https://github.com/rust-embedded/embedded-alloc Advisory available underCC0-1.0license.
INFO,Rusoto is unmaintained,"April 24, 2022","December 18, 2022",rusoto_credential(crates.io),/packages/rusoto_credential.html,INFOUnmaintained,"{'text': 'https://github.com/rusoto/rusoto/issues/1651', 'url': 'https://github.com/rusoto/rusoto/issues/1651'}",no patched versions,"The maintainers of Rusoto advise that all its crates are deprecated. This includes the common cratesrusoto_core,rusoto_signature,rusoto_credential, and service crates such asrusoto_s3andrusoto_ec2. Users should migrate to theAWS SDK for Rust, which is maintained by AWS. Advisory available underCC0-1.0license."
INFO,Unsound API insecp256k1allows use-after-free and invalid deallocation from safe code,"November 30, 2022","December  7, 2022(last modified: June 13, 2023)",secp256k1(crates.io),/packages/secp256k1.html,INFOUnsound,memory-corruption,,"{'text': 'GHSA-969w-q74q-9j8v', 'url': 'https://github.com/advisories/GHSA-969w-q74q-9j8v'}","{'text': 'https://github.com/rust-bitcoin/rust-secp256k1/issues/543', 'url': 'https://github.com/rust-bitcoin/rust-secp256k1/issues/543'}, {'text': 'https://github.com/rust-bitcoin/rust-secp256k1/pull/548', 'url': 'https://github.com/rust-bitcoin/rust-secp256k1/pull/548'}",">=0.22.2, <0.23.0>=0.23.5, <0.24.0>=0.24.2",<0.14.0,Version,"<0.22.2>=0.23.0, <0.23.5>=0.24.0, <0.24.2","Because of incorrect bounds on methodSecp256k1::preallocated_gen_newit was possible to cause use-after-free from safe consumer code. It was also possible to ""free"" memory not allocated by the appropriate allocator. The method takes a place for storing the context as a mutable reference and returns context containing that reference. Because the code internally usesunsafeand the bounds were incorrect it was possible to create a context that outlived the passed reference (e.g.'static). Because the context can alternatively carry heap-allocated pointer freed on drop it was possible to ""deallocate"" a pointer that wasn't returned from appropriate allocator. The code decides whether to free the memory based on type parameter but because of missing bound it was possible to construct the context with invalid parameter. You are unaffected if you either The patched version uses correct bounds which means it is API-breaking. This effectively means adopting the policy of Rust lang itself allowing API-breaking changes to fix soundness bugs. Note however that valid straightforward usage of the code will continue to compile. Only unsound code or code that propagates the bound in custom generics will fail to compile. If the code is sound fixing the bounds should be sufficient to make the code compile. See theGitHub issuefor example ""exploit"" code and further discussion. Advisory available underCC0-1.0license.",secp256k1;;secp256k1;;preallocated_gen_new,"<0.22.2>=0.23.0, <0.23.5>=0.24.0, <0.24.2"
INFO,Potential unaligned read,"July  4, 2021","November 22, 2022(last modified: July  8, 2023)",atty(crates.io),/packages/atty.html,INFOUnsound,,"{'text': 'GHSA-g98v-hv3f-hcfr', 'url': 'https://github.com/advisories/GHSA-g98v-hv3f-hcfr'}","{'text': 'https://github.com/softprops/atty/issues/50', 'url': 'https://github.com/softprops/atty/issues/50'}, {'text': 'https://github.com/softprops/atty/pull/51', 'url': 'https://github.com/softprops/atty/pull/51'}, {'text': 'https://github.com/softprops/atty/issues/57', 'url': 'https://github.com/softprops/atty/issues/57'}",no patched versions,windows,"On windows,attydereferences a potentially unaligned pointer. In practice however, the pointer won't be unaligned unless a custom global allocator is used. In particular, theSystemallocator on windows usesHeapAlloc, which guarantees a large enough alignment. A Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable. Last release ofattywas almost 3 years ago. The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license."
INFO,Invalid use ofmem::uninitializedcausesuse-of-uninitialized-value,"October 22, 2022","November  7, 2022(last modified: June 13, 2023)",lzf(crates.io),/packages/lzf.html,INFOUnsound,,"{'text': 'GHSA-5m39-wx2q-mxg3', 'url': 'https://github.com/advisories/GHSA-5m39-wx2q-mxg3'}","{'text': 'https://github.com/badboy/lzf-rs/issues/9', 'url': 'https://github.com/badboy/lzf-rs/issues/9'}",>=0.3.2,Version,<0.3.2,<0.3.2,"The compression and decompression function usedmem:uninitializedto create an array of uninitialized values, to later write values into it.
This later leads to reads from uninitialized memory. The flaw was corrected in commit b633bf265e41c60dfce3be7eac4e4dd5e18d06cf
by using a heap-allocatedVecand removing out use ofmem::uninitialized.
The fix was released in v0.3.2 and v1.0.0 Subsequently the crate was deprecated and its use is discouraged. Advisory available underCC0-1.0license.",lzf;;compress,<0.3.2
INFO,Crateparity-wasmdeprecated by the author,"October  1, 2022","October 23, 2022",parity-wasm(crates.io),/packages/parity-wasm.html,INFOUnmaintained,"{'text': 'https://github.com/paritytech/parity-wasm/pull/334', 'url': 'https://github.com/paritytech/parity-wasm/pull/334'}",no patched versions,"This PRexplicitly deprecatesparity-wasm.
The author recommends switching towasm-tools. Advisory available underCC0-1.0license."
INFO,orbtk is Unmaintained,"October 13, 2022","October 19, 2022",orbtk(crates.io),/packages/orbtk.html,INFOUnmaintained,"{'text': 'https://github.com/redox-os/orbtk/blob/eba9e77821551076bbf1d9f7ab44d788150e3446/README.md#orbtk-is-sunsetting', 'url': 'https://github.com/redox-os/orbtk/blob/eba9e77821551076bbf1d9f7ab44d788150e3446/README.md#orbtk-is-sunsetting'}",no patched versions,Theorbtkcrate is no longer maintained. Alternatives proposed by the authors: Advisory available underCC0-1.0license.
INFO,Library exclusively intended to inject UB into safe Rust.,"September 28, 2022","October 11, 2022",inconceivable(crates.io),/packages/inconceivable.html,INFONotice,"{'text': 'https://crates.io/crates/inconceivable', 'url': 'https://crates.io/crates/inconceivable'}",no patched versions,"Quoting from the crate description: Specifically, theinconceivable!macro is insta-UB if theub_inconceivablefeature is enabled byanyreverse dependency.
The value this adds is questionable, and hidesunsafecode from naive analysis. Advisory available underCC0-1.0license."
INFO,badge is Unmaintained,"August 31, 2022","October  4, 2022(last modified: February  9, 2023)",badge(crates.io),/packages/badge.html,INFOUnmaintained,"{'text': 'https://github.com/rust-lang/docs.rs/issues/1813#issuecomment-1232875809', 'url': 'https://github.com/rust-lang/docs.rs/issues/1813#issuecomment-1232875809'}",no patched versions,"The maintainer has advised this crate is deprecated and will not receive any maintenance. The crate depends on the deprecatedrusttypecrate and won't receive updates
anymore. The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license."
INFO,clipboard is Unmaintained,"June 25, 2022","September 24, 2022",clipboard(crates.io),/packages/clipboard.html,INFOUnmaintained,"{'text': 'https://github.com/aweinstock314/rust-clipboard/issues/91', 'url': 'https://github.com/aweinstock314/rust-clipboard/issues/91'}, {'text': 'https://github.com/aweinstock314/rust-clipboard/issues/90', 'url': 'https://github.com/aweinstock314/rust-clipboard/issues/90'}",no patched versions,Last release was almost 4 years ago and the repository with outstanding issues and pull requests seems to be abandoned by the maintainer. In addition the sole maintainer account may be abandoned that may represent account takeover risk. Current outstanding issues include vulnerable dependencies that all together may mean that security issues may not be addressed now or in the future. The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license.
INFO,wee_alloc is Unmaintained,"May 11, 2022","September  8, 2022(last modified: June 13, 2023)",wee_alloc(crates.io),/packages/wee_alloc.html,INFOUnmaintained,"{'text': 'GHSA-rc23-xxgq-x27g', 'url': 'https://github.com/advisories/GHSA-rc23-xxgq-x27g'}","{'text': 'https://github.com/rustwasm/wee_alloc/issues/107', 'url': 'https://github.com/rustwasm/wee_alloc/issues/107'}, {'text': 'https://www.reddit.com/r/rust/comments/x1cle0/dont_use_wee_alloc_in_production_code_targeting/', 'url': 'https://www.reddit.com/r/rust/comments/x1cle0/dont_use_wee_alloc_in_production_code_targeting/'}, {'text': 'https://github.com/rustwasm/wee_alloc/issues/85', 'url': 'https://github.com/rustwasm/wee_alloc/issues/85'}, {'text': 'https://github.com/rustwasm/wee_alloc/issues/106', 'url': 'https://github.com/rustwasm/wee_alloc/issues/106'}",no patched versions,Two of the maintainers have indicated that the crate may not be maintained. The crate has open issues including memory leaks and may not be suitable for production use. It may be best to switch to the default Rust standard allocator on wasm32 targets. Last release seems to have been three years ago. The below list has not been vetted in any way and may or may not contain alternatives; The below may serve to educate on potential future alternatives: Advisory available underCC0-1.0license.
INFO,typemap is Unmaintained,"April  6, 2019","September  8, 2022(last modified: June 13, 2023)",typemap(crates.io),/packages/typemap.html,INFOUnmaintained,"{'text': 'GHSA-vfv3-9w6v-23jp', 'url': 'https://github.com/advisories/GHSA-vfv3-9w6v-23jp'}","{'text': 'https://github.com/reem/rust-typemap/issues/45', 'url': 'https://github.com/reem/rust-typemap/issues/45'}, {'text': 'https://github.com/rustsec/advisory-db/issues/1088', 'url': 'https://github.com/rustsec/advisory-db/issues/1088'}",no patched versions,The maintainer seems unreachable. The crate may or may not be usable as-is despite no maintenance and may not work in future versions of Rust. The last release seems to have been seven years ago. The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license.
INFO,traitobject is Unmaintained,"October  4, 2021","September  8, 2022(last modified: June 13, 2023)",traitobject(crates.io),/packages/traitobject.html,INFOUnmaintained,"{'text': 'GHSA-pp8r-vv2j-9j5v', 'url': 'https://github.com/advisories/GHSA-pp8r-vv2j-9j5v'}","{'text': 'https://github.com/reem/rust-traitobject/issues/7', 'url': 'https://github.com/reem/rust-traitobject/issues/7'}, {'text': 'https://rustsec.org/advisories/RUSTSEC-2020-0027', 'url': 'https://rustsec.org/advisories/RUSTSEC-2020-0027'}",no patched versions,Cratetraitobjecthas not had a release for over five years. In addition there is an existing security advisory that has not been addressed: The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license.
INFO,dotenv is Unmaintained,"December 24, 2021","August 31, 2022",dotenv(crates.io),/packages/dotenv.html,INFOUnmaintained,"{'text': 'https://github.com/dotenv-rs/dotenv/issues/74', 'url': 'https://github.com/dotenv-rs/dotenv/issues/74'}",no patched versions,dotenv by description is meant to be used in development or testing only. Using this in production may or may not be advisable. The below may or may not be feasible alternative(s): Advisory available underCC0-1.0license.
INFO,mozjpeg DecompressScanlines::read_scanlines is Unsound,"July  4, 2020","August 31, 2022(last modified: June 13, 2023)",mozjpeg(crates.io),/packages/mozjpeg.html,INFOUnsound,memory-corruption,,"{'text': 'GHSA-v8gq-5grq-9728', 'url': 'https://github.com/advisories/GHSA-v8gq-5grq-9728'}","{'text': 'https://github.com/ImageOptim/mozjpeg-rust/issues/10', 'url': 'https://github.com/ImageOptim/mozjpeg-rust/issues/10'}, {'text': 'https://github.com/kornelski/rust-rgb/issues/35', 'url': 'https://github.com/kornelski/rust-rgb/issues/35'}, {'text': 'https://rustsec.org/advisories/RUSTSEC-2020-0029.html', 'url': 'https://rustsec.org/advisories/RUSTSEC-2020-0029.html'}",>=0.8.19,Version,<0.8.19,"This issue and vector is similar toRUSTSEC-2020-0029ofrgbcrate whichmozjpegdepends on. Affected versions ofmozjpegcrate allow creating instances of any typeTfrom bytes,
and do not correctly constrainTto the types for which it is safe to do so. Examples of safety violation possible for a typeT: The issue was fixed in 0.8.19 by using safer types and involvingrgbdependency bump. Advisory available underCC0-1.0license.",mozjpeg;;decompressscanlines;;read_scanlines,<0.8.19
INFO,cell-projectused incorrect variance when projecting through&Cell<T>,"August 27, 2020","August 31, 2022(last modified: June 13, 2023)",cell-project(crates.io),/packages/cell-project.html,INFOUnsound,memory-corruption,,"{'text': 'GHSA-p75v-367r-2v23', 'url': 'https://github.com/advisories/GHSA-p75v-367r-2v23'}","{'text': 'https://github.com/RustyYato/cell-project/issues/3', 'url': 'https://github.com/RustyYato/cell-project/issues/3'}, {'text': 'https://github.com/RustyYato/cell-project/issues/3', 'url': 'https://github.com/RustyYato/cell-project/issues/3'}, {'text': 'https://github.com/RustyYato/cell-project/issues/4', 'url': 'https://github.com/RustyYato/cell-project/issues/4'}",>=0.1.4,Version,<0.1.4,<0.1.4,"The issue lies in the implementation of thecell_projectmacro which usedfield as *const _instead offield as *mut _.
The problem being that*const Tis covariant inTwhile*mut Tis invariant inT. Keep in mind that&Cell<T>is invariant inT,
so casting to*const Trelaxed the variance, and lead to unsoundness, as shown in the example below.","All versions of the cell-project crate before0.1.4are affected., This was fixed inIssues/4, and released as version0.1.4.
So just updating to the latest version will include the fix (which may result in a compile error on unsound usage)., {'text': 'Issues/4', 'url': 'https://github.com/RustyYato/cell-project/issues/4'}, This was discovered and fixed by @SoniEx2 in cell-project:Issues/3andIssues/4, {'text': 'Issues/3', 'url': 'https://github.com/RustyYato/cell-project/issues/3'}, {'text': 'Issues/4', 'url': 'https://github.com/RustyYato/cell-project/issues/4'}, Advisory available underCC0-1.0license., {'text': 'CC0-1.0', 'url': 'https://spdx.org/licenses/CC0-1.0.html'}",cell_project;;cell_project,<0.1.4
INFO,rusttype is Unmaintained,"April  1, 2021","August 31, 2022(last modified: February  9, 2023)",rusttype(crates.io),/packages/rusttype.html,INFOUnmaintained,"{'text': 'https://gitlab.redox-os.org/redox-os/rusttype/-/issues/148', 'url': 'https://gitlab.redox-os.org/redox-os/rusttype/-/issues/148'}",no patched versions,"The maintainer has advised this crate is deprecated and will not
receive any maintenance. The maintainer has further advised to migrate over toab_glyph. Last release seems to have been over two years ago. The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license."
INFO,dotenv is Unmaintained,"December 24, 2021","August 31, 2022",dotenv_codegen(crates.io),/packages/dotenv_codegen.html,INFOUnmaintained,"{'text': 'https://github.com/dotenv-rs/dotenv/issues/74', 'url': 'https://github.com/dotenv-rs/dotenv/issues/74'}",no patched versions,dotenv by description is meant to be used in development or testing only. Using this in production may or may not be advisable. The below may or may not be feasible alternative(s): Advisory available underCC0-1.0license.
INFO,os_socketaddrinvalidly assumes the memory layout of std::net::SocketAddr,"August 26, 2022","August 27, 2022(last modified: June 13, 2023)",os_socketaddr(crates.io),/packages/os_socketaddr.html,INFOUnsound,memory-corruption,,"{'text': 'GHSA-c439-chv8-8g2j', 'url': 'https://github.com/advisories/GHSA-c439-chv8-8g2j'}","{'text': 'https://github.com/a-ba/os_socketaddr/issues/3', 'url': 'https://github.com/a-ba/os_socketaddr/issues/3'}",>=0.2.2,"Theos_socketaddrcrate has assumedstd::net::SocketAddrV4andstd::net::SocketAddrV6have the same memory layout as the system C
representationsockaddr. It has simply casted the pointers to convert the socket addresses to the
system representation. These layout werechanged into idiomatic rust typesin nightlystd. Starting from rustc 1.64 the affected versions of this crate will have undefined
behaviour. Advisory available underCC0-1.0license."
INFO,mapr is Unmaintained,"August 24, 2022","August 27, 2022(last modified: February  9, 2023)",mapr(crates.io),/packages/mapr.html,INFOUnmaintained,"{'text': 'https://github.com/rustsec/advisory-db/pull/1381', 'url': 'https://github.com/rustsec/advisory-db/pull/1381'}",no patched versions,"Themaprfork has been merged back into upstream forkmemmap2. The maintainer(s) have advisedmapris deprecated and will not
receive any maintenance in favor of usingmemmap2. The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license."
INFO,ansi_term is Unmaintained,"August 18, 2021","August 19, 2022(last modified: September  7, 2023)",ansi_term(crates.io),/packages/ansi_term.html,INFOUnmaintained,"{'text': 'https://github.com/ogham/rust-ansi-term/issues/72', 'url': 'https://github.com/ogham/rust-ansi-term/issues/72'}",no patched versions,The maintainer has advised that this crate is deprecated and will not receive any maintenance. The crate does not seem to have much dependencies and may or may not be ok to use as-is. Last release seems to have been three years ago. The below list has not been vetted in any way and may or may not contain alternatives; Advisory available underCC0-1.0license.
INFO,Interledger is Unmaintained,"August  4, 2022","August 19, 2022",interledger-packet(crates.io),/packages/interledger-packet.html,INFOUnmaintained,"{'text': 'https://github.com/interledger-rs/interledger-rs/issues/745', 'url': 'https://github.com/interledger-rs/interledger-rs/issues/745'}, {'text': 'https://github.com/interledger-rs/interledger-rs/pull/744', 'url': 'https://github.com/interledger-rs/interledger-rs/pull/744'}",no patched versions,Interledger family of crates is not being actively maintained anymore. The owner of the published crate does not appear to be responsive. There is an outstanding concern around username comparison. This concern may or may not be resolved by bumping up the dependencies of the project. Advisory available underCC0-1.0license.
INFO,Use after free in MacOS / iOS implementation,"August 15, 2022","August 17, 2022(last modified: June 13, 2023)",iana-time-zone(crates.io),/packages/iana-time-zone.html,INFOUnsound,memory-exposure,"{'text': 'GHSA-3fg9-hcq5-vxrc', 'url': 'https://github.com/advisories/GHSA-3fg9-hcq5-vxrc'}","{'text': 'https://github.com/strawlab/iana-time-zone/pull/54', 'url': 'https://github.com/strawlab/iana-time-zone/pull/54'}, {'text': 'https://github.com/strawlab/iana-time-zone/pull/50#discussion_r945353515', 'url': 'https://github.com/strawlab/iana-time-zone/pull/50#discussion_r945353515'}",>=0.1.45,<0.1.43,iosmacos,Version,">0.1.42, <0.1.45","In iana-time-zone v0.1.43 a use-after-free bug in the MacOS / iOS implementation was introduced. The copied system time zone was released before its name was copied.
If the system time zone was changed between the call ofCFReleaseandstr::to_owned(),
random memory would be copied. Advisory available underCC0-1.0license.",iana_time_zone;;get_timezone,">0.1.42, <0.1.45"
INFO,Incorrect use ofset_lenallows for un-initialized memory,"October 14, 2021","August 13, 2022(last modified: June 13, 2023)",mz-avro(crates.io),/packages/mz-avro.html,INFOUnsound,memory-exposure,"{'text': 'GHSA-jwh2-vrr9-vcp2', 'url': 'https://github.com/advisories/GHSA-jwh2-vrr9-vcp2'}","{'text': 'https://github.com/MaterializeInc/materialize/issues/8669', 'url': 'https://github.com/MaterializeInc/materialize/issues/8669'}",>=0.7.0,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure)
and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke
undefined behavior. Note: there is only UB in the case where a user provides a struct whoseReadimplementation inspects the buffer passed toread_exactbefore writing to it.
This is an unidiomatic (albeit possible)Readimplementation. See https://github.com/MaterializeInc/materialize/issues/8669 for details. Advisory available underCC0-1.0license."
INFO,sodiumoxide is deprecated,"October 22, 2021","August 10, 2022",sodiumoxide(crates.io),/packages/sodiumoxide.html,INFOUnmaintained,,"{'text': 'https://github.com/sodiumoxide/sodiumoxide/commit/5bb1dfd2578539b89ffb0cbea25f21f00cfb963e', 'url': 'https://github.com/sodiumoxide/sodiumoxide/commit/5bb1dfd2578539b89ffb0cbea25f21f00cfb963e'}",no patched versions,Alternatives may be found - not in any specific order: Recommendations can be also found from: No direct maintained fork exists. Advisory available underCC0-1.0license.
INFO,markdown(1.0.0 and higher) is maintained,"January 17, 2022","August  8, 2022(last modified: January 22, 2023)",markdown(crates.io),/packages/markdown.html,INFOUnmaintained,"{'text': 'https://github.com/johannhof/markdown.rs/issues/48', 'url': 'https://github.com/johannhof/markdown.rs/issues/48'}",>=1.0.0-alpha.1,A newmarkdowncrate has been brought over by a new maintainer replacing the old crate. As of time of writing only pre-releases seem to be available for the 1.0.0 version of the crate. The crate GitHub repository is nowwooorm/markdown-rs The oldmarkdowncrate was no longer actively maintained. The crate GitHub repository wasjohannhof/markdown.rs Advisory available underCC0-1.0license.
INFO,Unsoundness of AtomicCell<64> arithmetics on 32-bit targets that support Atomic64,"February  5, 2022","August  4, 2022",crossbeam-utils(crates.io),/packages/crossbeam-utils.html,INFOUnsound,memory-corruption,"{'text': 'GHSA-qc84-gqf4-9926', 'url': 'https://github.com/advisories/GHSA-qc84-gqf4-9926'}, {'text': 'CVE-2022-23639', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23639'}","{'text': 'https://github.com/crossbeam-rs/crossbeam/pull/781', 'url': 'https://github.com/crossbeam-rs/crossbeam/pull/781'}",>=0.8.7,"Affected versions of this crate incorrectly assumed that the alignment of {i,u}64 was always the same as Atomic{I,U}64. However, the alignment of {i,u}64 on a 32-bit target can be smaller than Atomic{I,U}64. This can cause the following problems: Crates using fetch_* methods with AtomicCell<{i,u}64> are affected by this issue. 32-bit targets without Atomic{I,U}64 and 64-bit targets are not affected by this issue. 32-bit targets with Atomic{I,U}64 and {i,u}64 have the same alignment are also not affected by this issue. The following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11) (script to get list) This has been fixed in crossbeam-utils 0.8.7. Affected 0.8.x releases have been yanked. Thanks to @taiki-e Advisory available underCC0-1.0license."
INFO,term_sizeis unmaintained; useterminal_sizeinstead,"November  3, 2020","August  3, 2022",term_size(crates.io),/packages/term_size.html,INFOUnmaintained,"{'text': 'https://github.com/clap-rs/term_size-rs/pull/31', 'url': 'https://github.com/clap-rs/term_size-rs/pull/31'}",no patched versions,Theterm_sizecrate is no longer maintained. Consider usingterminal_sizeinstead. Advisory available underCC0-1.0license.
INFO,project abandoned,"January 17, 2022","August  3, 2022",r2d2_odbc(crates.io),/packages/r2d2_odbc.html,INFOUnmaintained,"{'text': 'https://github.com/Koka/r2d2-odbc/issues/128#issuecomment-958629171', 'url': 'https://github.com/Koka/r2d2-odbc/issues/128#issuecomment-958629171'}",no patched versions,Ther2d2-odbc-apicrate might be an alternative. Advisory available underCC0-1.0license.
INFO,project abandoned,"January 17, 2022","August  3, 2022",odbc(crates.io),/packages/odbc.html,INFOUnmaintained,"{'text': 'https://github.com/Koka/odbc-rs/commit/f9e5f77fac0a6328f9759e6e0f9e10c16509aebb', 'url': 'https://github.com/Koka/odbc-rs/commit/f9e5f77fac0a6328f9759e6e0f9e10c16509aebb'}",no patched versions,Alternatives: Advisory available underCC0-1.0license.
INFO,sass-rshas been deprecated,"April  7, 2021","August  3, 2022(last modified: February  9, 2023)",sass-rs(crates.io),/packages/sass-rs.html,INFOUnmaintained,,"{'text': 'https://github.com/compass-rs/sass-rs/issues/83', 'url': 'https://github.com/compass-rs/sass-rs/issues/83'}",no patched versions,"Thesass-rscrate is not maintained anymore as libsass is deprecated.
Consider using https://github.com/connorskees/grass or https://github.com/kaj/rsass instead.
(Author's recommendation.) Advisory available underCC0-1.0license."
INFO,Safety issues inpkcs11,"July 22, 2022","July 25, 2022",pkcs11(crates.io),/packages/pkcs11.html,INFOUnsound,"code-execution, memory-corruption, crypto-failure",,"{'text': 'https://github.com/mheese/rust-pkcs11/issues/57', 'url': 'https://github.com/mheese/rust-pkcs11/issues/57'}",no patched versions,,"The interface ofpkcs11is subject to a number of safety issues, mainly related to handling of raw pointers. Despite presenting a safe interface, many of the functions and methods that rely on inputs which contain pointers (attributes and mechanisms in particular) can lead to segmentation faults and undefined behaviour when those pointers get dereferenced. For more details see the issues referenced below., Other problems that have been identified by the community include use-after-free (mheese/rust-pkcs11#53) and unsound uses oftransmute_copy(mheese/rust-pkcs11#55)., {'text': 'mheese/rust-pkcs11#53', 'url': 'https://github.com/mheese/rust-pkcs11/pull/53'}, {'text': 'mheese/rust-pkcs11#55', 'url': 'https://github.com/mheese/rust-pkcs11/issues/55'}","mheese/rust-pkcs11#38, {'text': 'mheese/rust-pkcs11#38', 'url': 'https://github.com/mheese/rust-pkcs11/issues/38'}, mheese/rust-pkcs11#53, {'text': 'mheese/rust-pkcs11#53', 'url': 'https://github.com/mheese/rust-pkcs11/pull/53'}, mheese/rust-pkcs11#55, {'text': 'mheese/rust-pkcs11#55', 'url': 'https://github.com/mheese/rust-pkcs11/issues/55'}, mheese/rust-pkcs11#54, {'text': 'mheese/rust-pkcs11#54', 'url': 'https://github.com/mheese/rust-pkcs11/issues/54'}, mheese/rust-pkcs11#50, {'text': 'mheese/rust-pkcs11#50', 'url': 'https://github.com/mheese/rust-pkcs11/issues/50'}, Advisory available underCC0-1.0license., {'text': 'CC0-1.0', 'url': 'https://spdx.org/licenses/CC0-1.0.html'}"
INFO,static_type_maphas been renamed toerased_set,"May 11, 2022","May 11, 2022",static_type_map(crates.io),/packages/static_type_map.html,INFOUnmaintained,"{'text': 'https://github.com/malobre/erased_set/issues/6', 'url': 'https://github.com/malobre/erased_set/issues/6'}",no patched versions,Please use theerased_setcrate going forward: https://github.com/malobre/erased_set There will be no further releases ofstatic_type_map. Advisory available underCC0-1.0license.
INFO,double-checked-cell is unmaintained,"May 11, 2022","May 11, 2022",double-checked-cell(crates.io),/packages/double-checked-cell.html,INFOUnmaintained,"{'text': 'https://github.com/niklasf/double-checked-cell/commit/9cf94d75316ef441033ce4c80def7c1a8c7643fe', 'url': 'https://github.com/niklasf/double-checked-cell/commit/9cf94d75316ef441033ce4c80def7c1a8c7643fe'}",no patched versions,"The author recommends switching toonce_cell, which offers a superset
of the functionality. Advisory available underCC0-1.0license."
INFO,SegQueuecreates zero value of any type,"May 10, 2022","May 10, 2022(last modified: June 13, 2023)",crossbeam(crates.io),/packages/crossbeam.html,INFOUnsound,"{'text': 'GHSA-8gj8-hv75-gp94', 'url': 'https://github.com/advisories/GHSA-8gj8-hv75-gp94'}","{'text': 'https://github.com/crossbeam-rs/crossbeam/pull/458', 'url': 'https://github.com/crossbeam-rs/crossbeam/pull/458'}",>=0.7.0,"Affected versions of this crate calledmem::zeroed()to create values of a user-supplied typeT.
This is unsound e.g. ifTis a reference type (which must be non-null). The flaw was corrected by avoiding the use ofmem::zeroed(), usingMaybeUninitinstead. Advisory available underCC0-1.0license."
INFO,Parser creates invalid uninitialized value,"May 10, 2022","May 10, 2022(last modified: June 13, 2023)",hyper(crates.io),/packages/hyper.html,INFOUnsound,"{'text': 'GHSA-f67m-9j94-qv9j', 'url': 'https://github.com/advisories/GHSA-f67m-9j94-qv9j'}","{'text': 'https://github.com/hyperium/hyper/pull/2545', 'url': 'https://github.com/hyperium/hyper/pull/2545'}",>=0.14.12,"Affected versions of this crate calledmem::uninitialized()in the HTTP1 parser to create values of typehttparse::Header(from thehttparsecrate).
This is unsound, sinceHeadercontains references and thus must be non-null. The flaw was corrected by avoiding the use ofmem::uninitialized(), usingMaybeUninitinstead. Advisory available underCC0-1.0license."
INFO,Channel creates zero value of any type,"May 10, 2022","May 10, 2022(last modified: June 13, 2023)",crossbeam-channel(crates.io),/packages/crossbeam-channel.html,INFOUnsound,"{'text': 'GHSA-9g55-pg62-m8hh', 'url': 'https://github.com/advisories/GHSA-9g55-pg62-m8hh'}","{'text': 'https://github.com/crossbeam-rs/crossbeam/pull/458', 'url': 'https://github.com/crossbeam-rs/crossbeam/pull/458'}",>=0.4.3,"Affected versions of this crate calledmem::zeroed()to create values of a user-supplied typeT.
This is unsound e.g. ifTis a reference type (which must be non-null). The flaw was corrected by avoiding the use ofmem::zeroed(), usingMaybeUninitinstead. Advisory available underCC0-1.0license."
INFO,SegQueuecreates zero value of any type,"May 10, 2022","May 10, 2022(last modified: June 13, 2023)",crossbeam-queue(crates.io),/packages/crossbeam-queue.html,INFOUnsound,"{'text': 'GHSA-6888-wf7j-34jq', 'url': 'https://github.com/advisories/GHSA-6888-wf7j-34jq'}","{'text': 'https://github.com/crossbeam-rs/crossbeam/pull/458', 'url': 'https://github.com/crossbeam-rs/crossbeam/pull/458'}",>=0.2.3,"Affected versions of this crate calledmem::zeroed()to create values of a user-supplied typeT.
This is unsound e.g. ifTis a reference type (which must be non-null). The flaw was corrected by avoiding the use ofmem::zeroed(), usingMaybeUninitinstead. Advisory available underCC0-1.0license."
INFO,array!macro is unsound when its length is impure constant,"April 27, 2022","April 27, 2022(last modified: June 13, 2023)",array-macro(crates.io),/packages/array-macro.html,INFOUnsound,"code-execution, memory-corruption, memory-exposure","{'text': 'GHSA-7v4j-8wvr-v55r', 'url': 'https://github.com/advisories/GHSA-7v4j-8wvr-v55r'}","{'text': 'https://gitlab.com/KonradBorowski/array-macro/-/issues/5', 'url': 'https://gitlab.com/KonradBorowski/array-macro/-/issues/5'}",>=2.1.2,<2.1.0,"Affected versions of this crate did substitute the array length provided by an user at compile-time multiple times. When an impure constant expression is passed as an array length (such as a result of an impure procedural macro), this can result in the initialization of an array with uninitialized types, which in turn can allow an attacker to execute arbitrary code. The flaw was corrected in commitd5b63f72by making sure that array length is substituted just once. Advisory available underCC0-1.0license."
INFO,pty is unmaintained,"March 22, 2022","March 22, 2022",pty(crates.io),/packages/pty.html,INFOUnmaintained,"{'text': 'https://github.com/hibariya/pty-rs/issues/19', 'url': 'https://github.com/hibariya/pty-rs/issues/19'}",no patched versions,"The repository hasn't received any updates since Jun 25, 2017 and the author is unresponsive. Maintained alternatives include: Advisory available underCC0-1.0license."
INFO,enum_map macro can cause UB whenEnumtrait is incorrectly implemented,"February 17, 2022","February 18, 2022(last modified: June 13, 2023)",enum-map(crates.io),/packages/enum-map.html,INFOUnsound,"code-execution, memory-corruption, memory-exposure","{'text': 'GHSA-rxhx-9fj6-6h2m', 'url': 'https://github.com/advisories/GHSA-rxhx-9fj6-6h2m'}","{'text': 'https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202', 'url': 'https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202'}",>=2.0.2,<2.0.0-2,"Affected versions of this crate did not properly check the length of an enum when usingenum_map!macro, trusting user-provided length. When theLENGTHin theEnumtrait does not match the array length in theEnumArraytrait, this can result in the initialization of the enum map with uninitialized types, which in turn can allow an attacker to execute arbitrary code. This problem can only occur with a manual implementation of the Enum trait, it will never occur for enums that use#[derive(Enum)]. Example code that triggers this vulnerability looks like this: The flaw was corrected in commitb824e23by puttingLENGTHproperty on sealed trait for macro to read. Advisory available underCC0-1.0license."
INFO,tokio-protois deprecated/unmaintained,"February  6, 2020","February  7, 2022",tokio-proto(crates.io),/packages/tokio-proto.html,INFOUnmaintained,"{'text': 'https://github.com/tokio-rs/tokio-proto/commit/56c720ea3c74efa8f39e36c24e609628222b16a1', 'url': 'https://github.com/tokio-rs/tokio-proto/commit/56c720ea3c74efa8f39e36c24e609628222b16a1'}",no patched versions,"Thetokio-protocrate has been deprecated, andits GitHub repositoryhas been archived.
Users may be interested intokio-towerinstead, per https://github.com/tokio-rs/tokio/issues/118#issuecomment-452969665 Advisory available underCC0-1.0license."
INFO,Delegate functions are missingSendbound,"January  2, 2022","February  4, 2022(last modified: June 13, 2023)",windows(crates.io),/packages/windows.html,INFOUnsound,"memory-corruption, thread-safety","{'text': 'GHSA-x4mq-m75f-mx8m', 'url': 'https://github.com/advisories/GHSA-x4mq-m75f-mx8m'}","{'text': 'https://github.com/microsoft/windows-rs/issues/1409', 'url': 'https://github.com/microsoft/windows-rs/issues/1409'}",>=0.32.0,<0.1.2,windows,"Affected versions of this crate did not require event handlers to haveSendbound despite there being no guarantee of them being called on any particular thread, which can potentially lead to data races and undefined behavior. The flaw was corrected in commitafe3252by addingSendbounds. Advisory available underCC0-1.0license."
INFO,A malicious coder can get unsound access to TCell or TLCell memory,"January 24, 2022","January 24, 2022(last modified: June 13, 2023)",qcell(crates.io),/packages/qcell.html,INFOUnsound,,"{'text': 'GHSA-9c9f-7x9p-4wqp', 'url': 'https://github.com/advisories/GHSA-9c9f-7x9p-4wqp'}","{'text': 'https://github.com/uazu/qcell/issues/20', 'url': 'https://github.com/uazu/qcell/issues/20'}",>=0.4.3,"This is impossible to do by accident, but by carefully constructing
marker types to be covariant, a malicious coder can cheat the
singleton check inTCellOwnerandTLCellOwner, giving unsound
access to cell memory.  This could take the form of getting two
mutable references to the same memory, or a mutable reference and an
immutable reference. The fix is for the crate to internally force the marker type to be
invariant.  This blocks the conversion between covariant types which
Rust normally allows. Advisory available underCC0-1.0license."
INFO,crate has been renamed toftdi-embedded-hal,"January 22, 2022","January 22, 2022",ftd2xx-embedded-hal(crates.io),/packages/ftd2xx-embedded-hal.html,INFOUnmaintained,"{'text': 'https://github.com/newAM/ftd2xx-embedded-hal/pull/40', 'url': 'https://github.com/newAM/ftd2xx-embedded-hal/pull/40'}",no patched versions,This crate has been renamed fromftd2xx-embedded-haltoftdi-embedded-hal. The new repository location is: https://github.com/ftdi-rs/ftdi-embedded-hal Advisory available underCC0-1.0license.
INFO,array!macro is unsound in presence of traits that implement methods it calls internally,"May  7, 2020","January 21, 2022(last modified: June 13, 2023)",array-macro(crates.io),/packages/array-macro.html,INFOUnsound,memory-corruption,"{'text': 'GHSA-83gg-pwxf-jr89', 'url': 'https://github.com/advisories/GHSA-83gg-pwxf-jr89'}","{'text': 'https://gitlab.com/KonradBorowski/array-macro/-/commit/01940637dd8f3bfeeee3faf9639fa9ae52f19f4d', 'url': 'https://gitlab.com/KonradBorowski/array-macro/-/commit/01940637dd8f3bfeeee3faf9639fa9ae52f19f4d'}",>=1.0.5,<0.1.2,"Affected versions of this crate called some methods using auto-ref. The affected code looked like this. In this case, the problem is thatas_mut_ptris a method of&mut MaybeUninit, notMaybeUninit. This made it possible for traits to hijack the method calls in order to cause unsoundness. The flaw was corrected by explicitly referencing variables in macro body in order to avoid auto-ref. Advisory available underCC0-1.0license."
INFO,"lmdb is unmaintained, use lmdb-rkv instead","January  5, 2022","January  5, 2022",lmdb(crates.io),/packages/lmdb.html,INFOUnmaintained,"{'text': 'https://github.com/danburkert/lmdb-rs', 'url': 'https://github.com/danburkert/lmdb-rs'}",no patched versions,The lmdb crate hasn't had any updates since August 2018. Mozilla'slmdb-rkvfork of the crate has received additional maintenance work beyond that and is the best available replacement. Advisory available underCC0-1.0license.
INFO,"rental is unmaintained, author has moved on","December 27, 2021","December 27, 2021(last modified: March  6, 2022)",rental(crates.io),/packages/rental.html,INFOUnmaintained,"{'text': 'https://github.com/jpernst/rental/commit/213671ab3aab3452efd7e2290c6bb714ee327014', 'url': 'https://github.com/jpernst/rental/commit/213671ab3aab3452efd7e2290c6bb714ee327014'}",no patched versions,"The author encourages users to explore other solutions, or maintain a fork. Maintained alternatives include: Advisory available underCC0-1.0license."
INFO,cargo-download is unmaintained,"December 25, 2021","December 25, 2021",cargo-download(crates.io),/packages/cargo-download.html,INFOUnmaintained,"{'text': 'https://github.com/Xion/cargo-download', 'url': 'https://github.com/Xion/cargo-download'}",no patched versions,The cargo download subcommand (via cargo-download crate) is broken and maintainer has disappeared from GitHub and hasn't had any commits for a year. Using this downloader will result to corrupted crates. Maintainer has not responded to maintenance takeover. Just use wget / curl directly. Advisory available underCC0-1.0license.
INFO,serde_cbor is unmaintained,"August 15, 2021","November 30, 2021(last modified: December  1, 2021)",serde_cbor(crates.io),/packages/serde_cbor.html,INFOUnmaintained,"{'text': 'https://github.com/pyfisch/cbor', 'url': 'https://github.com/pyfisch/cbor'}",no patched versions,Theserde_cborcrate is unmaintained. The author has archived the github repository. Alternatives proposed by the author: Advisory available underCC0-1.0license.
INFO,Non-aligned u32 read in Chacha20 encryption and decryption,"October  8, 2021","October 18, 2021(last modified: June 13, 2023)",crypto2(crates.io),/packages/crypto2.html,INFOUnsound,,"{'text': 'CVE-2021-45709', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45709'}, {'text': 'GHSA-9hfg-pxr6-q4vp', 'url': 'https://github.com/advisories/GHSA-9hfg-pxr6-q4vp'}, {'text': 'GHSA-pmcv-mgcf-rvxg', 'url': 'https://github.com/advisories/GHSA-pmcv-mgcf-rvxg'}","{'text': 'https://github.com/shadowsocks/crypto2/issues/27', 'url': 'https://github.com/shadowsocks/crypto2/issues/27'}",no patched versions,Version,*,*,*,"The implementation does not enforce alignment requirements on input slices while incorrectly assuming 4-byte alignment through an unsafe call tostd::slice::from_raw_parts_mut, which breaks the contract and introduces undefined behavior. This affects Chacha20 encryption and decryption in crypto2. Advisory available underCC0-1.0license.",crypto2;;streamcipher;;chacha20;;decrypt_slice,*
INFO,abomonation transmutes &T to and from &[u8] without sufficient constraints,"October 17, 2021","October 17, 2021(last modified: June 13, 2023)",abomonation(crates.io),/packages/abomonation.html,INFOUnsound,"{'text': 'CVE-2021-45708', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45708'}, {'text': 'GHSA-5vwc-r48g-wj6c', 'url': 'https://github.com/advisories/GHSA-5vwc-r48g-wj6c'}, {'text': 'GHSA-hfxp-p695-629x', 'url': 'https://github.com/advisories/GHSA-hfxp-p695-629x'}","{'text': 'https://github.com/TimelyDataflow/abomonation/issues/23', 'url': 'https://github.com/TimelyDataflow/abomonation/issues/23'}",no patched versions,"This transmute is at the core of the abomonation crates. It's so easy to use it to violate alignment requirements that no test in the crate's test suite passes under miri.
The use of this transmute in serialization/deserialization also incorrectly assumes that the layout of a repr(Rust) type is stable.
This transmute can also disclose both the contents of padding bytes which may be an information leak and the contents of pointers, which may be used to defeat ASLR. Advisory available underCC0-1.0license."
INFO,slice-deque is unmaintained,"February 10, 2020","October  7, 2021(last modified: November 18, 2021)",slice-deque(crates.io),/packages/slice-deque.html,INFOUnmaintained,"{'text': 'https://github.com/gnzlbg/slice_deque/issues/94', 'url': 'https://github.com/gnzlbg/slice_deque/issues/94'}",no patched versions,The author of theslice-dequecrate is unresponsive and is not receiving security patches. Maintained alternatives: Advisory available underCC0-1.0license.
INFO,Readon uninitialized buffer may cause UB ('tectonic_xdv' crate),"February 17, 2021","September 18, 2021(last modified: June 13, 2023)",tectonic_xdv(crates.io),/packages/tectonic_xdv.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2021-45703', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45703'}, {'text': 'GHSA-6692-8qqf-79jc', 'url': 'https://github.com/advisories/GHSA-6692-8qqf-79jc'}, {'text': 'GHSA-qwvx-c8j7-5g75', 'url': 'https://github.com/advisories/GHSA-qwvx-c8j7-5g75'}","{'text': 'https://github.com/tectonic-typesetting/tectonic/issues/752', 'url': 'https://github.com/tectonic-typesetting/tectonic/issues/752'}",>=0.1.12,Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer. Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. The problem was fixed in commitcdff034by zero-initializing the buffer before passing it to a user-providedReadimplementation. Advisory available underCC0-1.0license.
INFO,Crate has been renamed tocosmrs,"August 25, 2021","August 25, 2021",cosmos_sdk(crates.io),/packages/cosmos_sdk.html,INFOUnmaintained,"{'text': 'https://github.com/cosmos/cosmos-rust/issues/113', 'url': 'https://github.com/cosmos/cosmos-rust/issues/113'}",no patched versions,"Thecosmos_sdkcrate, which provides a basic Rust SDK for the Cosmos ecosystem,
has rebranded to “CosmRS” in the spirit of other projects like CosmJS and CosmWasm. You can find the new home here: https://github.com/cosmos/cosmos-rust/tree/main/cosmrs The new crate name iscosmrs: https://crates.io/crates/cosmrs Advisory available underCC0-1.0license."
INFO,"spirv_headers is unmaintained, use spirv instead","August 16, 2021","August 23, 2021",spirv_headers(crates.io),/packages/spirv_headers.html,INFOUnmaintained,"{'text': 'https://github.com/gfx-rs/rspirv/issues/197', 'url': 'https://github.com/gfx-rs/rspirv/issues/197'}",no patched versions,Because of versioning issues; thespirv_headerscrate is unmaintained. Usespirvfor parsing spirv files. Advisory available underCC0-1.0license.
INFO,vec-const attempts to construct a Vec from a pointer to a const slice,"August 14, 2021","August 21, 2021(last modified: June 13, 2023)",vec-const(crates.io),/packages/vec-const.html,INFOUnsound,memory-corruption,,"{'text': 'CVE-2021-45680', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45680'}, {'text': 'GHSA-jmwx-r3gq-qq3p', 'url': 'https://github.com/advisories/GHSA-jmwx-r3gq-qq3p'}, {'text': 'GHSA-x76r-966h-5qv9', 'url': 'https://github.com/advisories/GHSA-x76r-966h-5qv9'}","{'text': 'https://github.com/Eolu/vec-const/issues/1#issuecomment-898908241', 'url': 'https://github.com/Eolu/vec-const/issues/1#issuecomment-898908241'}",>=2.0.0,"Affected versions of this crate claimed to construct a constVecwith nonzero length and capacity, but that cannot be done because such aVecrequires a pointer from an allocator. The implementation was later changed to just construct astd::borrow::Cow. Advisory available underCC0-1.0license."
INFO,InputStream::read_exact :Readon uninitialized buffer causes UB,"December 31, 2020","August 21, 2021(last modified: June 13, 2023)",buffoon(crates.io),/packages/buffoon.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2020-36512', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36512'}, {'text': 'GHSA-hmx9-jm3v-33hv', 'url': 'https://github.com/advisories/GHSA-hmx9-jm3v-33hv'}, {'text': 'GHSA-v938-qcc9-rwv8', 'url': 'https://github.com/advisories/GHSA-v938-qcc9-rwv8'}","{'text': 'https://github.com/carllerche/buffoon/issues/2', 'url': 'https://github.com/carllerche/buffoon/issues/2'}",no patched versions,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. Advisory available underCC0-1.0license."
INFO,'Read' on uninitialized memory may cause UB,"January  3, 2021","August 21, 2021(last modified: June 13, 2023)",binjs_io(crates.io),/packages/binjs_io.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2021-45683', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45683'}, {'text': 'GHSA-c6px-4grw-hrjr', 'url': 'https://github.com/advisories/GHSA-c6px-4grw-hrjr'}, {'text': 'GHSA-cw4j-cf6c-mmfv', 'url': 'https://github.com/advisories/GHSA-cw4j-cf6c-mmfv'}","{'text': 'https://github.com/binast/binjs-ref/issues/460', 'url': 'https://github.com/binast/binjs-ref/issues/460'}",no patched versions,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. The crate currently contains 4 occurrences of such cases. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. Advisory available underCC0-1.0license."
INFO,columnar:Readon uninitialized buffer may cause UB (ColumnarReadExt::read_typed_vec()),"January  7, 2021","August 21, 2021(last modified: June 13, 2023)",columnar(crates.io),/packages/columnar.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2021-45685', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45685'}, {'text': 'GHSA-9mp7-45qh-r8j8', 'url': 'https://github.com/advisories/GHSA-9mp7-45qh-r8j8'}, {'text': 'GHSA-cxcc-q839-2cw9', 'url': 'https://github.com/advisories/GHSA-cxcc-q839-2cw9'}","{'text': 'https://github.com/frankmcsherry/columnar/issues/6', 'url': 'https://github.com/frankmcsherry/columnar/issues/6'}",no patched versions,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation (ColumnarReadExt::read_typed_vec()). ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. Advisory available underCC0-1.0license."
INFO,mopais technically unsound,"June  1, 2021","August 21, 2021(last modified: June 13, 2023)",mopa(crates.io),/packages/mopa.html,INFOUnsound,"memory-corruption, memory-exposure, code-execution",,"{'text': 'CVE-2021-45695', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45695'}, {'text': 'GHSA-2gxj-qrp2-53jv', 'url': 'https://github.com/advisories/GHSA-2gxj-qrp2-53jv'}, {'text': 'GHSA-8mv5-7x95-7wcf', 'url': 'https://github.com/advisories/GHSA-8mv5-7x95-7wcf'}","{'text': 'https://github.com/chris-morgan/mopa/issues/13', 'url': 'https://github.com/chris-morgan/mopa/issues/13'}",no patched versions,"Themopacrate redefines the deprecatedTraitObjectstruct fromcore::rawlike so: This is done to then transmute a reference to a trait object (&dyn Traitfor any traitTrait) into this struct and retrieve thedatafield for the purpose of downcasting. This is used to implementdowncast_ref_unchecked(), in terms of whichdowncast_ref()is also implemented. Same goes for mutable reference downcasting andBoxdowncasting. The Rust compiler explicitly reserves the right to change the memory layout of&dyn Traitfor any traitTrait. The worst case scenario is that it swapsdataandvtable, making an executable location breach and compromisation of ASLR possible, since reads fromdatawould readvtableinstead. Likewise, arbitrary code execution is also theoretically possible if reads ofvtablegenerated by the compiler readdatainstead. While, as of Rust 1.52, this unsound assumption still holds true, updating the compiler may silently create UB in a crate which previously compiled and run without issues, compromising the security of builds which are believed to be reproducible. A potential strategy to resolve this has already been suggested in an issue on the GitHub repository of the crate. Advisory available underCC0-1.0license."
INFO,Reading on uninitialized memory may cause UB (util::read_spv()),"January  7, 2021","August 21, 2021(last modified: June 13, 2023)",ash(crates.io),/packages/ash.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2021-45688', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45688'}, {'text': 'GHSA-64wv-8vwp-xgw2', 'url': 'https://github.com/advisories/GHSA-64wv-8vwp-xgw2'}, {'text': 'GHSA-qj69-c89v-jwq2', 'url': 'https://github.com/advisories/GHSA-qj69-c89v-jwq2'}","{'text': 'https://github.com/MaikKlein/ash/issues/354', 'url': 'https://github.com/MaikKlein/ash/issues/354'}",>=0.33.1,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. Advisory available underCC0-1.0license."
INFO,readon uninitialized buffer may cause UB (bite::read::BiteReadExpandedExt::read_framed_max),"December 31, 2020","August 21, 2021(last modified: June 13, 2023)",bite(crates.io),/packages/bite.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2020-36511', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36511'}, {'text': 'GHSA-72r2-rg28-47v9', 'url': 'https://github.com/advisories/GHSA-72r2-rg28-47v9'}, {'text': 'GHSA-v2ch-fc8f-qm33', 'url': 'https://github.com/advisories/GHSA-v2ch-fc8f-qm33'}","{'text': 'https://github.com/hinaria/bite/issues/1', 'url': 'https://github.com/hinaria/bite/issues/1'}",no patched versions,Affected versions of this crate calls a user providedReadimplementation on an uninitialized buffer. Readon uninitialized buffer is defined as undefined behavior in Rust. Advisory available underCC0-1.0license.
INFO,Reading on uninitialized buffer may cause UB (gfx_auxil::read_spirv()),"January  7, 2021","August 21, 2021(last modified: June 13, 2023)",gfx-auxil(crates.io),/packages/gfx-auxil.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2021-45689', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45689'}, {'text': 'GHSA-28p5-7rg4-8v99', 'url': 'https://github.com/advisories/GHSA-28p5-7rg4-8v99'}, {'text': 'GHSA-ff2r-xpwq-6whj', 'url': 'https://github.com/advisories/GHSA-ff2r-xpwq-6whj'}","{'text': 'https://github.com/gfx-rs/gfx/issues/3567', 'url': 'https://github.com/gfx-rs/gfx/issues/3567'}",no patched versions,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. Advisory available underCC0-1.0license."
INFO,Readon uninitialized buffer infill_buf()andread_up_to(),"December 27, 2020","August 21, 2021(last modified: June 13, 2023)",acc_reader(crates.io),/packages/acc_reader.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2020-36513', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36513'}, {'text': 'CVE-2020-36514', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36514'}, {'text': 'GHSA-799f-r78p-gq9c', 'url': 'https://github.com/advisories/GHSA-799f-r78p-gq9c'}, {'text': 'GHSA-hv9v-7w3v-rj6f', 'url': 'https://github.com/advisories/GHSA-hv9v-7w3v-rj6f'}, {'text': 'GHSA-p4cr-64x4-f92f', 'url': 'https://github.com/advisories/GHSA-p4cr-64x4-f92f'}","{'text': 'https://github.com/netvl/acc_reader/issues/1', 'url': 'https://github.com/netvl/acc_reader/issues/1'}",no patched versions,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. Advisory available underCC0-1.0license."
INFO,Readon uninitialized buffer may cause UB (read_entry()),"January  7, 2021","August 21, 2021(last modified: June 13, 2023)",flumedb(crates.io),/packages/flumedb.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2021-45684', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45684'}, {'text': 'GHSA-p46c-w9m3-7qr2', 'url': 'https://github.com/advisories/GHSA-p46c-w9m3-7qr2'}, {'text': 'GHSA-p56p-gq3f-whg8', 'url': 'https://github.com/advisories/GHSA-p56p-gq3f-whg8'}","{'text': 'https://github.com/sunrise-choir/flumedb-rs/issues/10', 'url': 'https://github.com/sunrise-choir/flumedb-rs/issues/10'}, {'text': 'https://github.com/sunrise-choir/flumedb-rs/pull/12', 'url': 'https://github.com/sunrise-choir/flumedb-rs/pull/12'}",>=0.1.6,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation.
There are two of such cases (go_offset_log::read_entry()&offset_log::read_entry()). ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. Advisory available underCC0-1.0license."
INFO,Window can read out of bounds if Read instance returns more bytes than buffer size,"February  3, 2021","August 21, 2021(last modified: June 13, 2023)",rdiff(crates.io),/packages/rdiff.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2021-45694', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45694'}, {'text': 'GHSA-2rxc-8f9w-fjq8', 'url': 'https://github.com/advisories/GHSA-2rxc-8f9w-fjq8'}, {'text': 'GHSA-q579-9wp9-gfp2', 'url': 'https://github.com/advisories/GHSA-q579-9wp9-gfp2'}","{'text': 'https://github.com/dyule/rdiff/issues/3', 'url': 'https://github.com/dyule/rdiff/issues/3'}",no patched versions,"rdiffperforms a diff of two provided strings or files. As part of its reading
code it uses the return value of aReadinstance to set the length of
its internal character vector. If theReadimplementation claims that it has read more bytes than the length
of the provided buffer, the length of the vector will be set to longer than its
capacity. This causesrdiffAPIs to return uninitialized memory in its API
methods. Advisory available underCC0-1.0license."
INFO,Readon uninitialized memory may cause UB (fn preamble_skipcount()),"January  5, 2021","August 21, 2021(last modified: June 13, 2023)",csv-sniffer(crates.io),/packages/csv-sniffer.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2021-45686', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45686'}, {'text': 'GHSA-9783-42pm-x5jq', 'url': 'https://github.com/advisories/GHSA-9783-42pm-x5jq'}, {'text': 'GHSA-r67p-m7g9-gxw6', 'url': 'https://github.com/advisories/GHSA-r67p-m7g9-gxw6'}","{'text': 'https://github.com/jblondin/csv-sniffer/issues/1', 'url': 'https://github.com/jblondin/csv-sniffer/issues/1'}, {'text': 'https://github.com/jblondin/csv-sniffer/pull/2', 'url': 'https://github.com/jblondin/csv-sniffer/pull/2'}",>=0.2.0,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation (withinfn preamble_skipcount()). ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. Advisory available underCC0-1.0license."
INFO,Readon uninitialized buffer can cause UB (impl ofReadKVExt),"January  3, 2021","August 21, 2021(last modified: June 13, 2023)",bronzedb-protocol(crates.io),/packages/bronzedb-protocol.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2021-45682', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45682'}, {'text': 'GHSA-5phc-849h-vcxg', 'url': 'https://github.com/advisories/GHSA-5phc-849h-vcxg'}, {'text': 'GHSA-jv2r-jx6q-89jg', 'url': 'https://github.com/advisories/GHSA-jv2r-jx6q-89jg'}","{'text': 'https://github.com/Hexilee/BronzeDB/issues/1', 'url': 'https://github.com/Hexilee/BronzeDB/issues/1'}",no patched versions,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. Advisory available underCC0-1.0license."
INFO,anymap is unmaintained.,"May  7, 2021","May  7, 2021(last modified: June 13, 2023)",anymap(crates.io),/packages/anymap.html,INFOUnmaintained,"{'text': 'CVE-2021-38187', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38187'}, {'text': 'GHSA-hc92-9h3m-c39j', 'url': 'https://github.com/advisories/GHSA-hc92-9h3m-c39j'}","{'text': 'https://github.com/chris-morgan/anymap/issues/37', 'url': 'https://github.com/chris-morgan/anymap/issues/37'}",no patched versions,"Theanymapcrate does not appear to be maintained, and the most recent
published version 0.12.1 includes a soundness bug. This has beenfixeda few years ago, but
was never released. Advisory available underCC0-1.0license."
INFO,cpuid-boolhas been renamed tocpufeatures,"May  6, 2021","May  6, 2021",cpuid-bool(crates.io),/packages/cpuid-bool.html,INFOUnmaintained,"{'text': 'https://github.com/RustCrypto/utils/pull/381', 'url': 'https://github.com/RustCrypto/utils/pull/381'}",no patched versions,Please use the `cpufeatures`` crate going forward: https://github.com/RustCrypto/utils/tree/master/cpufeatures There will be no further releases ofcpuid-bool. Advisory available underCC0-1.0license.
INFO,aes-ctrhas been merged into theaescrate,"April 29, 2021","May  3, 2021",aes-ctr(crates.io),/packages/aes-ctr.html,INFOUnmaintained,"{'text': 'https://github.com/RustCrypto/block-ciphers/pull/200', 'url': 'https://github.com/RustCrypto/block-ciphers/pull/200'}",no patched versions,"Please use theaescrate going forward. The new repository location is at: https://github.com/RustCrypto/block-ciphers/tree/master/aes Theaescrate now has an optionalctrfeature which autodetects SIMD
features oni686/x86-64targets and uses them if available, or otherwise
falls back to the implementation in thectrcrate. If you would prefer not to have this autodetection performed, use theaescrate directly with thectrcrate. Advisory available underCC0-1.0license."
INFO,project abandoned; migrate to theaes-sivcrate,"February 28, 2021","May  3, 2021",miscreant(crates.io),/packages/miscreant.html,INFOUnmaintained,"{'text': 'https://github.com/miscreant/miscreant.rs/commit/5d921f579e0c2b9960d472cf377b8487d97fbcec', 'url': 'https://github.com/miscreant/miscreant.rs/commit/5d921f579e0c2b9960d472cf377b8487d97fbcec'}",no patched versions,"The Miscreant project has been abandoned and archived. The Rust implementation has been adapted into the newaes-sivcrate which
implements both the AES-CMAC-SIV and AES-PMAC-SIV constructions: https://github.com/RustCrypto/AEADs/tree/master/aes-siv Please migrate to theaes-sivcrate. Alternatively see theaes-gcm-sivcrate for a newer, faster construction
which provides similar properties: https://github.com/RustCrypto/AEADs/tree/master/aes-gcm-siv Advisory available underCC0-1.0license."
INFO,aesnihas been merged into theaescrate,"April 29, 2021","May  3, 2021",aesni(crates.io),/packages/aesni.html,INFOUnmaintained,"{'text': 'https://github.com/RustCrypto/block-ciphers/pull/200', 'url': 'https://github.com/RustCrypto/block-ciphers/pull/200'}",no patched versions,"Please use theaescrate going forward. The new repository location is at: https://github.com/RustCrypto/block-ciphers/tree/master/aes AES-NI is now autodetected at runtime oni686/x86-64platforms.
If AES-NI is not present, theaescrate will fallback to a constant-time
portable software implementation. To prevent this fallback (and have absence of AES-NI result in an illegal
instruction crash instead), continue to pass the same RUSTFLAGS which were
previously required for theaesnicrate to compile: Advisory available underCC0-1.0license."
INFO,aes-softhas been merged into theaescrate,"April 29, 2021","May  3, 2021",aes-soft(crates.io),/packages/aes-soft.html,INFOUnmaintained,"{'text': 'https://github.com/RustCrypto/block-ciphers/pull/200', 'url': 'https://github.com/RustCrypto/block-ciphers/pull/200'}",no patched versions,"Please use theaescrate going forward. The new repository location is at: https://github.com/RustCrypto/block-ciphers/tree/master/aes AES-NI is now autodetected at runtime oni686/x86-64platforms.
If AES-NI is not present, theaescrate will fallback to a constant-time
portable software implementation. To force the use of a constant-time portable implementation on these platforms,
even if AES-NI is available, use the newforce-softfeature of theaescrate to disable autodetection. Advisory available underCC0-1.0license."
INFO,"rulinalg is unmaintained, use nalgebra instead","February 11, 2020","March  4, 2021",rulinalg(crates.io),/packages/rulinalg.html,INFOUnmaintained,"{'text': 'https://github.com/AtheMathmo/rulinalg/issues/201#issuecomment-584749313', 'url': 'https://github.com/AtheMathmo/rulinalg/issues/201#issuecomment-584749313'}",no patched versions,"Therulinalgcrate is no longer maintained, usenalgebrainstead. Advisory available underCC0-1.0license."
INFO,"office is unmaintained, use calamine instead","February  4, 2021","March  3, 2021",office(crates.io),/packages/office.html,INFOUnmaintained,"{'text': 'https://github.com/RustSec/advisory-db/issues/742#issuecomment-773313783', 'url': 'https://github.com/RustSec/advisory-db/issues/742#issuecomment-773313783'}",no patched versions,Theofficecrate is unmaintained. Usecalaminefor reading excel files. Contact theofficeauthor for ownership of the package name. Advisory available underCC0-1.0license.
INFO,crate has been renamed tosn_api,"February 15, 2021","February 15, 2021",safe-api(crates.io),/packages/safe-api.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_api/pull/619', 'url': 'https://github.com/maidsafe/sn_api/pull/619'}",no patched versions,This crate has been renamed fromsafe-apitosn_api. The new repository location is: https://github.com/maidsafe/sn_api Advisory available underCC0-1.0license.
INFO,crate has been renamed toqjsonrpc,"February 15, 2021","February 15, 2021",jsonrpc-quic(crates.io),/packages/jsonrpc-quic.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_api/pull/623', 'url': 'https://github.com/maidsafe/sn_api/pull/623'}",no patched versions,This crate has been renamed fromjsonrpc-quictoqjsonrpc. The new repository location is: https://github.com/maidsafe/sn_api Advisory available underCC0-1.0license.
INFO,lzw is unmaintained,"February 10, 2020","February 10, 2021",lzw(crates.io),/packages/lzw.html,INFOUnmaintained,"{'text': 'https://github.com/nwin/lzw/issues/2', 'url': 'https://github.com/nwin/lzw/issues/2'}",no patched versions,>0.10.0,The author of thelzwcrate is unresponsive. Maintained alternatives: Advisory available underCC0-1.0license.
INFO,stderr is unmaintained; use eprintln instead,"December 22, 2020","January 20, 2021",stderr(crates.io),/packages/stderr.html,INFOUnmaintained,"{'text': 'https://github.com/biluohc/stderr/issues/5', 'url': 'https://github.com/biluohc/stderr/issues/5'}",no patched versions,"Thestderrcrate is no longer maintained by its current owner. The author recommends using theeprintlnmacro from the standard library as a
replacement. Advisory available underCC0-1.0license."
INFO,difference is unmaintained,"December 20, 2020","January  6, 2021(last modified: January 24, 2021)",difference(crates.io),/packages/difference.html,INFOUnmaintained,"{'text': 'https://github.com/johannhof/difference.rs/issues/45', 'url': 'https://github.com/johannhof/difference.rs/issues/45'}",no patched versions,>2.0.0,The author of thedifferencecrate is unresponsive. Maintained alternatives: Advisory available underCC0-1.0license.
INFO,"interfaces2 is unmaintained, use interfaces instead","January  4, 2021","January  6, 2021",interfaces2(crates.io),/packages/interfaces2.html,INFOUnmaintained,"{'text': 'https://github.com/aep/interfaces-rs', 'url': 'https://github.com/aep/interfaces-rs'}",no patched versions,"Theinterfaces2crate is not maintained any more;
useinterfacesinstead. Advisory available underCC0-1.0license."
INFO,crate has been superseded bysn_client,"December  7, 2020","December  7, 2020",safe_authenticator(crates.io),/packages/safe_authenticator.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_client/pull/1267', 'url': 'https://github.com/maidsafe/sn_client/pull/1267'}",no patched versions,This crate has been superseded bysn_client. The new repository location is: https://github.com/maidsafe/sn_client Advisory available underCC0-1.0license.
INFO,crate has been renamed tosn_client,"December  7, 2020","December  7, 2020",safe_core(crates.io),/packages/safe_core.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_client/pull/1267', 'url': 'https://github.com/maidsafe/sn_client/pull/1267'}",no patched versions,This crate has been renamed fromsafe_coretosn_client. The new repository location is: https://github.com/maidsafe/sn_client Advisory available underCC0-1.0license.
INFO,crate has been renamed tosn_node,"December  7, 2020","December  7, 2020",safe_vault(crates.io),/packages/safe_vault.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_node/pull/1116', 'url': 'https://github.com/maidsafe/sn_node/pull/1116'}",no patched versions,This crate has been renamed fromsafe_vaulttosn_node. The new repository location is: https://github.com/maidsafe/sn_node Advisory available underCC0-1.0license.
INFO,crate has been superseded bysn_client,"December  7, 2020","December  7, 2020",safe_app(crates.io),/packages/safe_app.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_client/pull/1267', 'url': 'https://github.com/maidsafe/sn_client/pull/1267'}",no patched versions,This crate has been superseded bysn_client. The new repository location is: https://github.com/maidsafe/sn_client Advisory available underCC0-1.0license.
INFO,crate has been renamed tosn_routing,"November  2, 2020","December  2, 2020",routing(crates.io),/packages/routing.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_routing/pull/2190', 'url': 'https://github.com/maidsafe/sn_routing/pull/2190'}",no patched versions,This crate has been renamed fromroutingtosn_routing. The new repository location is: https://github.com/maidsafe/sn_routing Advisory available underCC0-1.0license.
INFO,memmap is unmaintained,"December  2, 2020","December  2, 2020(last modified: August 25, 2022)",memmap(crates.io),/packages/memmap.html,INFOUnmaintained,"{'text': 'https://github.com/danburkert/memmap-rs/issues/90', 'url': 'https://github.com/danburkert/memmap-rs/issues/90'}",no patched versions,>0.7.0,The author of thememmapcrate is unresponsive. Maintained alternatives: Advisory available underCC0-1.0license.
INFO,Some lock_api lock guard objects can cause data races,"November  8, 2020","November 18, 2020(last modified: June 13, 2023)",lock_api(crates.io),/packages/lock_api.html,INFOUnsound,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-35910', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35910'}, {'text': 'CVE-2020-35911', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35911'}, {'text': 'CVE-2020-35912', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35912'}, {'text': 'CVE-2020-35913', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35913'}, {'text': 'CVE-2020-35914', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35914'}, {'text': 'GHSA-5wg8-7c9q-794v', 'url': 'https://github.com/advisories/GHSA-5wg8-7c9q-794v'}, {'text': 'GHSA-gmv4-vmx3-x9f3', 'url': 'https://github.com/advisories/GHSA-gmv4-vmx3-x9f3'}, {'text': 'GHSA-hj9h-wrgg-hgmx', 'url': 'https://github.com/advisories/GHSA-hj9h-wrgg-hgmx'}, {'text': 'GHSA-ppj3-7jw3-8vc4', 'url': 'https://github.com/advisories/GHSA-ppj3-7jw3-8vc4'}, {'text': 'GHSA-vh4p-6j7g-f4j9', 'url': 'https://github.com/advisories/GHSA-vh4p-6j7g-f4j9'}","{'text': 'https://github.com/Amanieu/parking_lot/pull/262', 'url': 'https://github.com/Amanieu/parking_lot/pull/262'}",>=0.4.2,Version,>=0.1.0,>=0.1.0,>=0.1.0,>=0.1.0,>=0.1.0,"Affected versions of lock_api had unsound implementations of theSendorSynctraits for some guard objects, namely: These guards could allow data races through types that are not safe toSendacross thread boundaries in safe Rust code. This issue was fixed by changing the trait bounds on theMappedguard types
and removing theSynctrait for theRwLockguards. Advisory available underCC0-1.0license.",lock_api;;mappedmutexguard,>=0.1.0
INFO,crate has been renamed tosn_ffi_utils,"November  2, 2020","November  2, 2020",ffi_utils(crates.io),/packages/ffi_utils.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_ffi_utils/pull/45', 'url': 'https://github.com/maidsafe/sn_ffi_utils/pull/45'}",no patched versions,This crate has been renamed fromffi_utilstosn_ffi_utils. The new repository location is: https://github.com/maidsafe/sn_ffi_utils Advisory available underCC0-1.0license.
INFO,crate has been renamed tosn_fake_clock,"November  2, 2020","November  2, 2020",fake_clock(crates.io),/packages/fake_clock.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_fake_clock/pull/38', 'url': 'https://github.com/maidsafe/sn_fake_clock/pull/38'}",no patched versions,This crate has been renamed fromfake_clocktosn_fake_clock. The new repository location is: https://github.com/maidsafe/sn_fake_clock Advisory available underCC0-1.0license.
INFO,crate has been renamed tosn_bindgen,"November  2, 2020","November  2, 2020",safe_bindgen(crates.io),/packages/safe_bindgen.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_bindgen/pull/67', 'url': 'https://github.com/maidsafe/sn_bindgen/pull/67'}",no patched versions,This crate has been renamed fromsafe_bindgentosn_bindgen. The new repository location is: https://github.com/maidsafe/sn_bindgen Advisory available underCC0-1.0license.
INFO,crate has been renamed toqp2p,"November  2, 2020","November  2, 2020",quic-p2p(crates.io),/packages/quic-p2p.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/qp2p/pull/141', 'url': 'https://github.com/maidsafe/qp2p/pull/141'}",no patched versions,This crate has been renamed fromquic-p2ptoqp2p. The new repository location is: https://github.com/maidsafe/qp2p Advisory available underCC0-1.0license.
INFO,crate has been renamed tosafe-nd,"November  2, 2020","November  2, 2020",safe-nd(crates.io),/packages/safe-nd.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/sn_data_types/pull/218', 'url': 'https://github.com/maidsafe/sn_data_types/pull/218'}",no patched versions,This crate has been renamed fromsafe-ndtosn_data_types. The new repository location is: https://github.com/maidsafe/sn_data_types Advisory available underCC0-1.0license.
INFO,crate has been renamed tocipher,"October 15, 2020","October 25, 2020",block-cipher(crates.io),/packages/block-cipher.html,INFOUnmaintained,"{'text': 'https://github.com/RustCrypto/traits/pull/337', 'url': 'https://github.com/RustCrypto/traits/pull/337'}",no patched versions,This crate has been renamed fromblock-ciphertocipher. The new repository location is at: https://github.com/RustCrypto/traits/tree/master/cipher Advisory available underCC0-1.0license.
INFO,Fix for UB in failure to catch panics crossing FFI boundaries,"March 10, 2019","October 25, 2020(last modified: June 13, 2023)",libpulse-binding(crates.io),/packages/libpulse-binding.html,INFOUnsound,memory-corruption,"{'text': 'CVE-2019-25055', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25055'}, {'text': 'GHSA-wcxc-jf6c-8rx9', 'url': 'https://github.com/advisories/GHSA-wcxc-jf6c-8rx9'}, {'text': 'GHSA-xvcg-2q82-r87j', 'url': 'https://github.com/advisories/GHSA-xvcg-2q82-r87j'}","{'text': 'https://github.com/jnqnfe/pulse-binding-rust/commit/7fd282aef7787577c385aed88cb25d004b85f494', 'url': 'https://github.com/jnqnfe/pulse-binding-rust/commit/7fd282aef7787577c385aed88cb25d004b85f494'}",>=2.6.0,"Affected versions of this crate failed to catch panics crossing FFI boundaries via callbacks, which
is a form of UB. This flaw was corrected bythis commitwhich was included in version 2.6.0. Advisory available underCC0-1.0license."
INFO,crate has been renamed tocipher,"October 15, 2020","October 25, 2020",stream-cipher(crates.io),/packages/stream-cipher.html,INFOUnmaintained,"{'text': 'https://github.com/RustCrypto/traits/pull/337', 'url': 'https://github.com/RustCrypto/traits/pull/337'}",no patched versions,This crate has been renamed fromstream-ciphertocipher. The new repository location is at: https://github.com/RustCrypto/traits/tree/master/cipher Advisory available underCC0-1.0license.
INFO,stdweb is unmaintained,"May  4, 2020","October 25, 2020",stdweb(crates.io),/packages/stdweb.html,INFOUnmaintained,"{'text': 'https://github.com/koute/stdweb/issues/403', 'url': 'https://github.com/koute/stdweb/issues/403'}",no patched versions,>0.4.20,The author of thestdwebcrate is unresponsive. Maintained alternatives: Advisory available underCC0-1.0license.
INFO,net2crate has been deprecated; usesocket2instead,"May  1, 2020","October  1, 2020",net2(crates.io),/packages/net2.html,INFOUnmaintained,"{'text': 'https://github.com/deprecrated/net2-rs/commit/3350e3819adf151709047e93f25583a5df681091', 'url': 'https://github.com/deprecrated/net2-rs/commit/3350e3819adf151709047e93f25583a5df681091'}",no patched versions,"Thenet2crate has been deprecated
and users are encouraged to consideredsocket2instead. Advisory available underCC0-1.0license."
INFO,Library exclusively intended to obfuscate code.,"April 23, 2020","October  1, 2020(last modified: June 13, 2023)",plutonium(crates.io),/packages/plutonium.html,INFONotice,"{'text': 'GHSA-gfg9-x6px-r7gr', 'url': 'https://github.com/advisories/GHSA-gfg9-x6px-r7gr'}","{'text': 'https://docs.rs/plutonium', 'url': 'https://docs.rs/plutonium'}",no patched versions,"This crate allows you to write safe functions with unsafe bodies without theunsafekeyword. The value this adds is questionable, and hidesunsafeusages from naive analysis. Advisory available underCC0-1.0license."
INFO,crate has been renamed toblock-cipher,"May 26, 2020","October  1, 2020",block-cipher-trait(crates.io),/packages/block-cipher-trait.html,INFOUnmaintained,"{'text': 'https://github.com/RustCrypto/traits/pull/139', 'url': 'https://github.com/RustCrypto/traits/pull/139'}",no patched versions,This crate has been renamed fromblock-cipher-traittoblock-cipher. The new repository location is at: https://github.com/RustCrypto/traits/tree/master/block-cipher Advisory available underCC0-1.0license.
INFO,tiberius is unmaintained,"February 28, 2020","October  1, 2020",tiberius(crates.io),/packages/tiberius.html,INFOUnmaintained,"{'text': 'https://github.com/RustSec/advisory-db/issues/261', 'url': 'https://github.com/RustSec/advisory-db/issues/261'}",no patched versions,>0.3.2,"The author oftiberiushas archived the GitHub repository and left the
following note: Suggested alternatives are: Advisory available underCC0-1.0license."
INFO,tempdircrate has been deprecated; usetempfileinstead,"February 13, 2018","October  1, 2020",tempdir(crates.io),/packages/tempdir.html,INFOUnmaintained,"{'text': 'https://github.com/rust-lang-deprecated/tempdir/pull/46', 'url': 'https://github.com/rust-lang-deprecated/tempdir/pull/46'}",no patched versions,"Thetempdircrate has been deprecated
and the functionality is merged intotempfile. Advisory available underCC0-1.0license."
INFO,rust-crypto is unmaintained; switch to a modern alternative,"September  6, 2016","October  1, 2020(last modified: January  9, 2022)",rust-crypto(crates.io),/packages/rust-crypto.html,INFOUnmaintained,"{'text': 'https://github.com/DaGenix/rust-crypto/issues/440', 'url': 'https://github.com/DaGenix/rust-crypto/issues/440'}",no patched versions,>0.2.36,"Therust-cryptocrate has not seen a release or GitHub commit since 2016,
and its author is unresponsive. NOTE: The (old)rust-cryptocrate (with hyphen) should not be confused with
similarly named (new)RustCrypto GitHub Org(without hyphen). The GitHub Org
is actively maintained. We recommend you switch to one of the following crates instead, depending on
which algorithms you need: Advisory available underCC0-1.0license."
INFO,stb_truetypecrate has been deprecated; usettf-parserinstead,"April 18, 2020","October  1, 2020",stb_truetype(crates.io),/packages/stb_truetype.html,INFOUnmaintained,"{'text': 'https://gitlab.redox-os.org/redox-os/stb_truetype-rs/-/commit/f1f5be4794e87bfc80a4255bc3f23ed75dd77645', 'url': 'https://gitlab.redox-os.org/redox-os/stb_truetype-rs/-/commit/f1f5be4794e87bfc80a4255bc3f23ed75dd77645'}",no patched versions,This crate was maintained for use in rusttype which has switched to usettf-parser Advisory available underCC0-1.0license.
INFO,cassandracrate is unmaintained; usecassandra-cppinstead,"December 15, 2016","October  1, 2020",cassandra(crates.io),/packages/cassandra.html,INFOUnmaintained,"{'text': 'https://github.com/tupshin/cassandra-rs/issues/52', 'url': 'https://github.com/tupshin/cassandra-rs/issues/52'}",no patched versions,>0.8.1,"Thecassandracrate has not seen a release since December 2016, and its author
is unresponsive. Thecassandra-cppcrate is a maintained fork: https://github.com/Metaswitch/cassandra-rs Advisory available underCC0-1.0license."
INFO,quickersort is deprecated and unmaintained,"June 30, 2018","October  1, 2020",quickersort(crates.io),/packages/quickersort.html,INFOUnmaintained,"{'text': 'https://github.com/notriddle/quickersort/commit/0bc164366315801f0c6b31f4081b7df9fc894076', 'url': 'https://github.com/notriddle/quickersort/commit/0bc164366315801f0c6b31f4081b7df9fc894076'}",no patched versions,>3.0.1,The author of thequickersortcrate has deprecated it and does not recommend using it anymore. Everything in it has been incorporated intostd::sort_unstablein the standard library as of Rust 1.20. Advisory available underCC0-1.0license.
INFO,lz4-compress is unmaintained,"April 17, 2017","October  1, 2020",lz4-compress(crates.io),/packages/lz4-compress.html,INFOUnmaintained,"{'text': 'https://gitlab.redox-os.org/redox-os/tfs/issues/89', 'url': 'https://gitlab.redox-os.org/redox-os/tfs/issues/89'}",no patched versions,"According to the developersthis crate is no longer maintained. The suggested alternative islz4-compression, a maintained fork oflz4-compress. See alsolz-fearwhich is compatible with the reference LZ4 implementation in C, but not with lz4-compress. Advisory available underCC0-1.0license."
INFO,chan is end-of-life; use crossbeam-channel instead,"July 31, 2018","October  1, 2020",chan(crates.io),/packages/chan.html,INFOUnmaintained,"{'text': 'https://github.com/BurntSushi/chan/commit/0a5c0d4ad4adc90a54ee04a427389acf2e157275', 'url': 'https://github.com/BurntSushi/chan/commit/0a5c0d4ad4adc90a54ee04a427389acf2e157275'}",no patched versions,>0.1.23,"chanhas reached its end-of-life and is now deprecated. The intended successor of this crate iscrossbeam-channel.
Its API is strikingly similar, but comes with a much betterselect!macro,
better performance, a better test suite and an all-around better
implementation. Advisory available underCC0-1.0license."
INFO,smallvec creates uninitialized value of any type,"September 25, 2018","October  1, 2020(last modified: June 13, 2023)",smallvec(crates.io),/packages/smallvec.html,INFOUnsound,"{'text': 'CVE-2018-25023', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25023'}, {'text': 'GHSA-55m5-whcv-c49c', 'url': 'https://github.com/advisories/GHSA-55m5-whcv-c49c'}, {'text': 'GHSA-66p5-j55p-32r9', 'url': 'https://github.com/advisories/GHSA-66p5-j55p-32r9'}","{'text': 'https://github.com/servo/rust-smallvec/issues/126', 'url': 'https://github.com/servo/rust-smallvec/issues/126'}",>=0.6.13,"Affected versions of this crate calledmem::uninitialized()to create values of a user-supplied typeT.
This is unsound e.g. ifTis a reference type (which must be non-null and thus may not remain uninitialized). The flaw was corrected by avoiding the use ofmem::uninitialized(), usingMaybeUninitinstead. Advisory available underCC0-1.0license."
INFO,crust repo has been archived; use libp2p instead,"November 21, 2019","October  1, 2020",crust(crates.io),/packages/crust.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/crust', 'url': 'https://github.com/maidsafe/crust'}",no patched versions,>0.32.1,"** Thecrustcrate repo was archived with no warning or explanation.** Given that it was archived with no warning or successor, there's not an
official replacement butrust-libp2plooks like it's got a similar feature set and is actively maintained. Advisory available underCC0-1.0license."
INFO,term is looking for a new maintainer,"November 19, 2018","October  1, 2020",term(crates.io),/packages/term.html,INFOUnmaintained,"{'text': 'https://github.com/Stebalien/term/issues/93', 'url': 'https://github.com/Stebalien/term/issues/93'}",no patched versions,>0.6.1,"The author of thetermcrate does not have time to maintain it and is looking
for a new maintainer. Some maintained alternatives you can potentially switch to instead, depending
on your needs: Advisory available underCC0-1.0license."
INFO,rust_sodium is unmaintained; switch to a modern alternative,"January 20, 2020","October  1, 2020",rust_sodium(crates.io),/packages/rust_sodium.html,INFOUnmaintained,"{'text': 'https://github.com/maidsafe/rust_sodium/pull/117', 'url': 'https://github.com/maidsafe/rust_sodium/pull/117'}",no patched versions,>0.10.2,"Therust_sodiumcrate is no longer maintained by its current owner, who
advise in the repository readme that they are looking for
someone else to take ownership of it. We recommend you switch to an alternative crate such as: Advisory available underCC0-1.0license."
INFO,libusb is unmaintained; use rusb instead,"September 10, 2016","October  1, 2020",libusb(crates.io),/packages/libusb.html,INFOUnmaintained,"{'text': 'https://github.com/dcuddeback/libusb-rs/issues/33', 'url': 'https://github.com/dcuddeback/libusb-rs/issues/33'}",no patched versions,>0.3.0,"Thelibusbcrate has not seen a release since September 2016, and its author
is unresponsive. Therusbcrate is a maintained fork: https://github.com/a1ien/rusb Advisory available underCC0-1.0license."
MEDIUM,serdedeserialization forFamStructWrapperlacks bound checks that could potentially lead to out-of-bounds memory access,"January  2, 2024","January 13, 2024",vmm-sys-util(crates.io),/packages/vmm-sys-util.html,INFOUnsound,memory-corruption,"{'text': 'CVE-2023-50711', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-50711'}, {'text': 'GHSA-875g-mfp6-g7f9', 'url': 'https://github.com/advisories/GHSA-875g-mfp6-g7f9'}","{'text': 'https://github.com/advisories/GHSA-875g-mfp6-g7f9', 'url': 'https://github.com/advisories/GHSA-875g-mfp6-g7f9'}",5.7MEDIUM,Local,LowPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityNoneIntegrityLowAvailabilityLow,None,None,Changed,None,Low,Low,Local,LowPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityNoneIntegrityLowAvailabilityLow,None,None,Changed,None,Low,Low,CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:N/I:L/A:L,>=0.12.0,<0.5.0,Version,"<0.12.0, >=0.5.0","An issue was discovered in theFamStructWrapper::deserializeimplementation
provided by the crate forvmm_sys_util::fam::FamStructWrapper, which can lead
to out of bounds memory accesses. The deserialization does not check that the
length stored in the header matches the flexible array length. Mismatch in the
lengths might allow out of bounds memory access through Rust-safe methods. Impacted versions: >= 0.5.0 The issue was corrected in version 0.12.0 by inserting a check that verifies
the lengths of compared flexible arrays are equal for any deserialized header
and aborting deserialization otherwise. Moreover, the API was changed so that
header length can only be modified through Rust-unsafe code. This ensures that
users cannot trigger out-of-bounds memory access from Rust-safe code. Advisory available underCC0-1.0license.",vmm_sys_util;;fam;;famstructwrapper;;deserialize,"<0.12.0, >=0.5.0"
MEDIUM,Marvin Attack: potential key recovery through timing sidechannels,"November 22, 2023","November 28, 2023(last modified: December 15, 2023)",rsa(crates.io),/packages/rsa.html,Vulnerability,crypto-failure,,"{'text': 'CVE-2023-49092', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-49092'}, {'text': 'GHSA-c38w-74pg-36hr', 'url': 'https://github.com/advisories/GHSA-c38w-74pg-36hr'}, {'text': 'GHSA-4grx-2x9w-596c', 'url': 'https://github.com/advisories/GHSA-4grx-2x9w-596c'}","{'text': 'https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643', 'url': 'https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643'}, {'text': 'https://people.redhat.com/~hkario/marvin/', 'url': 'https://people.redhat.com/~hkario/marvin/'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N,no patched versions,,"Due to a non-constant-time implementation, information about the private key is leaked through timing information which is observable over the network. An attacker may be able to use that information to recover the key.","This vulnerability was discovered as part of the ""Marvin Attack"", which revealed several implementations of RSA including OpenSSL had not properly mitigated timing sidechannel attacks., {'text': 'Marvin Attack', 'url': 'https://people.redhat.com/~hkario/marvin/'}, Advisory available underCC0-1.0license., {'text': 'CC0-1.0', 'url': 'https://spdx.org/licenses/CC0-1.0.html'}"
MEDIUM,"Sequential calls of encryption API (encrypt,wrap, anddump) result in nonce reuse","October 15, 2023","October 23, 2023",cocoon(crates.io),/packages/cocoon.html,Vulnerability,crypto-failure,,"{'text': 'https://github.com/fadeevab/cocoon/issues/22', 'url': 'https://github.com/fadeevab/cocoon/issues/22'}",4.5MEDIUM,Local,HighPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityLowIntegrityLowAvailabilityNone,None,None,Changed,Low,Low,None,Local,HighPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityLowIntegrityLowAvailabilityNone,None,None,Changed,Low,Low,None,CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:N,>=0.4.0,Version,<=0.3.3,<=0.3.3,<=0.3.3,<=0.3.3,<=0.3.3,<=0.3.3,"Problem: Trying to create a new encrypted message with the same cocoon
object generates the same ciphertext. It mostly affectsMiniCocoonandCocoonobjects with custom seeds and RNGs (whereStdRngis used under
the hood). Note: The issue doesNOTaffect objects created withCocoon::newwhich utilizesThreadRng. Cause:StdRngproduces the same nonce becauseStdRng::cloneresets its
state. Measure: Make encryption API mutable (encrypt,wrap, anddump). Workaround: Create a new cocoon object with a newseedper each
encryption. Forcocoon <= 0.3.3, create a new cocoon with a differentseedper eachencrypt/wrap/dumpcall. Advisory available underCC0-1.0license.",cocoon;;cocoon;;dump,<=0.3.3
MEDIUM,Vulnerable to privilege escalation using ioctls TIOCSTI and TIOCLINUX,"April 29, 2023","October  3, 2023(last modified: October 28, 2023)",pleaser(crates.io),/packages/pleaser.html,Vulnerability,privilege-escalation,"{'text': 'CVE-2023-46277', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-46277'}","{'text': 'https://gitlab.com/edneville/please/-/issues/13', 'url': 'https://gitlab.com/edneville/please/-/issues/13'}",4.6MEDIUM,Local,LowPrivileges requiredLowUser interactionRequiredScopeChangedConfidentialityLowIntegrityLowAvailabilityNone,Low,Required,Changed,Low,Low,None,Local,LowPrivileges requiredLowUser interactionRequiredScopeChangedConfidentialityLowIntegrityLowAvailabilityNone,Low,Required,Changed,Low,Low,None,CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N,no patched versions,"please is vulnerable to privilege escalation using ioctls TIOCSTI
and TIOCLINUX on systems where they are not disabled. Here is how to see it in action: Please note that: This affects both the case where root wants to drop privileges as well when non-root wants to gain other privileges. Advisory available underCC0-1.0license."
MEDIUM,"Versionize::deserializeimplementation forFamStructWrapper<T>is lacking bound checks, potentially leading to out of bounds memory accesses","March 24, 2023","March 25, 2023(last modified: June 13, 2023)",versionize(crates.io),/packages/versionize.html,Vulnerability,memory-exposure,"{'text': 'CVE-2023-28448', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-28448'}, {'text': 'GHSA-8vxc-r5wp-vgvc', 'url': 'https://github.com/advisories/GHSA-8vxc-r5wp-vgvc'}","{'text': 'https://github.com/firecracker-microvm/versionize/pull/53', 'url': 'https://github.com/firecracker-microvm/versionize/pull/53'}",5.7MEDIUM,Local,LowPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityNoneIntegrityLowAvailabilityLow,None,None,Changed,None,Low,Low,Local,LowPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityNoneIntegrityLowAvailabilityLow,None,None,Changed,None,Low,Low,CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:N/I:L/A:L,>=0.1.10,linux,"An issue was discovered in theVersionize::deserializeimplementation provided by theversionizecrate forvmm_sys_util::fam::FamStructWrapper, which can lead to out of bounds memory accesses. The impact started with version 0.1.1. The issue was corrected in version 0.1.10 by inserting a check that verifies, for any deserialized header, the lengths of compared flexible arrays are equal and aborting deserialization otherwise. Advisory available underCC0-1.0license."
MEDIUM,pnet_packetbuffer overrun inset_payloadsetters,"June 19, 2020","February  9, 2023(last modified: June 13, 2023)",pnet_packet(crates.io),/packages/pnet_packet.html,Vulnerability,memory-corruption,"{'text': 'GHSA-cf4g-fcf8-3cr9', 'url': 'https://github.com/advisories/GHSA-cf4g-fcf8-3cr9'}","{'text': 'https://github.com/libpnet/libpnet/issues/449', 'url': 'https://github.com/libpnet/libpnet/issues/449'}",6MEDIUM,Local,LowPrivileges requiredHighUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,High,None,Unchanged,None,High,High,Local,LowPrivileges requiredHighUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,High,None,Unchanged,None,High,High,CVSS:3.0/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:H,>=0.27.2,"As indicated by thisissue, a buffer overrun is possible in theset_payloadsetter of the various mutable ""Packet"" struct setters. The offendingset_payloadfunctions were defined within the structimplblocks in earlier versions of the package, and later by thepacketmacro. Fixed in thepacketmacro bythisPR. Advisory available underCC0-1.0license."
MEDIUM,aliyun-oss-clientsecret exposure,"November 19, 2022","February  7, 2023",aliyun-oss-client(crates.io),/packages/aliyun-oss-client.html,Vulnerability,crypto-failure,"{'text': 'CVE-2022-39397', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39397'}, {'text': 'GHSA-3w3h-7xgx-grwc', 'url': 'https://github.com/advisories/GHSA-3w3h-7xgx-grwc'}","{'text': 'https://github.com/advisories/GHSA-3w3h-7xgx-grwc', 'url': 'https://github.com/advisories/GHSA-3w3h-7xgx-grwc'}",5.6MEDIUM,Physical,LowPrivileges requiredHighUser interactionRequiredScopeChangedConfidentialityHighIntegrityLowAvailabilityNone,High,Required,Changed,High,Low,None,Physical,LowPrivileges requiredHighUser interactionRequiredScopeChangedConfidentialityHighIntegrityLowAvailabilityNone,High,Required,Changed,High,Low,None,CVSS:3.1/AV:P/AC:L/PR:H/UI:R/S:C/C:H/I:L/A:N,>=0.8.1,Thealiyun-oss-clientunintentionally divulges the authentication secret. This bug was fixed inthiscommit by limiting the concerned traits to bepubonly within the crate. Advisory available underCC0-1.0license.
MEDIUM,tauri'sreadDirendpoint allows possible enumeration outside of filesystem scope,"August  7, 2022","February  5, 2023",tauri(crates.io),/packages/tauri.html,Vulnerability,privilege-escalation,"{'text': 'CVE-2022-39215', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39215'}, {'text': 'GHSA-28m8-9j7v-x499', 'url': 'https://github.com/advisories/GHSA-28m8-9j7v-x499'}","{'text': 'https://github.com/tauri-apps/tauri/issues/4882', 'url': 'https://github.com/tauri-apps/tauri/issues/4882'}",5.8MEDIUM,Network,LowPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityLowIntegrityNoneAvailabilityNone,None,None,Changed,Low,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityLowIntegrityNoneAvailabilityNone,None,None,Changed,Low,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N,>=1.0.6,It is possible forreadDirto incorrectly enumerate files from a symlinked directory if called recursively when specifying an empty string for the dir parameter as outlined inthisissue. This is corrected inthisPR by checking if a directory is a symlink before reading from it. Advisory available underCC0-1.0license.
MEDIUM,kamadak-exif DoS with untrusted PNG data,"January  4, 2021","September  8, 2022",kamadak-exif(crates.io),/packages/kamadak-exif.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2021-21235', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-21235'}, {'text': 'GHSA-px9g-8hgv-jvg2', 'url': 'https://github.com/advisories/GHSA-px9g-8hgv-jvg2'}","{'text': 'https://github.com/kamadak/exif-rs/commit/1b05eab57e484cd7d576d4357b9cda7fdc57df8c', 'url': 'https://github.com/kamadak/exif-rs/commit/1b05eab57e484cd7d576d4357b9cda7fdc57df8c'}",6.5MEDIUM,Network,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,Required,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,Required,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H,>=0.5.3,<0.5.2,Version,">=0.5.2, <0.5.3",Attacker crafted data can cause a infinite loop leading to DoS if used with untrusted data. Advisory available underCC0-1.0license.,kamadak_exif;;reader;;read_from_container,">=0.5.2, <0.5.3"
MEDIUM,OCSP_basic_verifymay incorrectly verify the response signing certificate,"May  3, 2022","May 19, 2022(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,crypto-failure,"{'text': 'CVE-2022-1343', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-1343'}, {'text': 'GHSA-mfm6-r9g2-q4r7', 'url': 'https://github.com/advisories/GHSA-mfm6-r9g2-q4r7'}","{'text': 'https://www.openssl.org/news/secadv/20220503.txt', 'url': 'https://www.openssl.org/news/secadv/20220503.txt'}",5.3MEDIUM,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,>=300.0.6,<300.0,"The functionOCSP_basic_verifyverifies the signer certificate on an OCSP
response. In the case where the (non-default) flag OCSP_NOCHECKS is used then
the response will be positive (meaning a successful verification) even in the
case where the response signing certificate fails to verify. It is anticipated that most users ofOCSP_basic_verifywill not use the
OCSP_NOCHECKS flag. In this case theOCSP_basic_verifyfunction will return
a negative value (indicating a fatal error) in the case of a certificate
verification failure. The normal expected return value in this case would be 0. Advisory available underCC0-1.0license."
MEDIUM,Incorrect MAC key used in the RC4-MD5 ciphersuite,"May  3, 2022","May 19, 2022(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,crypto-failure,"{'text': 'CVE-2022-1434', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-1434'}, {'text': 'GHSA-638m-m8mh-7gw2', 'url': 'https://github.com/advisories/GHSA-638m-m8mh-7gw2'}","{'text': 'https://www.openssl.org/news/secadv/20220503.txt', 'url': 'https://www.openssl.org/news/secadv/20220503.txt'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N,>=300.0.6,<300.0,"The OpenSSL 3.0 implementation of the RC4-MD5 ciphersuite incorrectly uses the
AAD data as the MAC key. This makes the MAC key trivially predictable. An attacker could exploit this issue by performing a man-in-the-middle attack to
modify data being sent from one endpoint to an OpenSSL 3.0 recipient such that
the modified data would still pass the MAC integrity check. Note that data sent from an OpenSSL 3.0 endpoint to a non-OpenSSL 3.0 endpoint
will always be rejected by the recipient and the connection will fail at that
point. Many application protocols require data to be sent from the client to the
server first. Therefore, in such a case, only an OpenSSL 3.0 server would be
impacted when talking to a non-OpenSSL 3.0 client. If both endpoints are OpenSSL 3.0 then the attacker could modify data being
sent in both directions. In this case both clients and servers could be
affected, regardless of the application protocol. Note that in the absence of an attacker this bug means that an OpenSSL 3.0
endpoint communicating with a non-OpenSSL 3.0 endpoint will fail to complete the
handshake when using this ciphersuite. The confidentiality of data is not impacted by this issue, i.e. an attacker
cannot decrypt data that has been encrypted using this ciphersuite - they can
only modify it. In order for this attack to work both endpoints must legitimately negotiate the
RC4-MD5 ciphersuite. This ciphersuite is not compiled by default in OpenSSL 3.0,
and is not available within the default provider or the default ciphersuite
list. This ciphersuite will never be used if TLSv1.3 has been negotiated. In
order for an OpenSSL 3.0 endpoint to use this ciphersuite the following must
have occurred: Advisory available underCC0-1.0license."
MEDIUM,Timing attack,"May  9, 2022","May  9, 2022(last modified: June 13, 2023)",totp-rs(crates.io),/packages/totp-rs.html,Vulnerability,crypto-failure,,"{'text': 'CVE-2022-29185', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29185'}, {'text': 'GHSA-8vxv-2g8p-2249', 'url': 'https://github.com/advisories/GHSA-8vxv-2g8p-2249'}","{'text': 'https://github.com/constantoine/totp-rs/security/advisories/GHSA-8vxv-2g8p-2249', 'url': 'https://github.com/constantoine/totp-rs/security/advisories/GHSA-8vxv-2g8p-2249'}",4.2MEDIUM,Network,HighPrivileges requiredHighUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,High,Required,Unchanged,High,None,None,Network,HighPrivileges requiredHighUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,High,Required,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:H/I:N/A:N,>=1.1.0,Version,<1.1.0,"Affecting versions did not compare tokens in constant time, which could make it possible for an attacker to guess the 2fa token of a user. This has been fixed by using using the crate constant_time_eq for comparison. Advisory available underCC0-1.0license.",totp_rs;;totp;;check,<1.1.0
MEDIUM,Multiple Vulnerabilities in Wasmtime,"September 17, 2021","September 17, 2021(last modified: June 13, 2023)",wasmtime(crates.io),/packages/wasmtime.html,Vulnerability,"memory-corruption, memory-exposure",,"{'text': 'CVE-2021-39216', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-39216'}, {'text': 'CVE-2021-39218', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-39218'}, {'text': 'CVE-2021-39219', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-39219'}, {'text': 'GHSA-4873-36h9-wv49', 'url': 'https://github.com/advisories/GHSA-4873-36h9-wv49'}, {'text': 'GHSA-q879-9g95-56mx', 'url': 'https://github.com/advisories/GHSA-q879-9g95-56mx'}, {'text': 'GHSA-v4cp-h94r-m7xf', 'url': 'https://github.com/advisories/GHSA-v4cp-h94r-m7xf'}","{'text': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf', 'url': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf'}, {'text': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49', 'url': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49'}, {'text': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q879-9g95-56mx', 'url': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q879-9g95-56mx'}",6.3MEDIUM,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,Low,None,Unchanged,None,High,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,Low,None,Unchanged,None,High,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:H/A:H,>=0.30.0,Version,<0.30.0,<0.30.0,<0.30.0,Advisory available underCC0-1.0license.,wasmtime;;linker;;func_new,<0.30.0
MEDIUM,Observable Discrepancy in libsecp256k1-rs,"January 22, 2020","September  9, 2021(last modified: September 10, 2021)",libsecp256k1-rs(crates.io),/packages/libsecp256k1-rs.html,Vulnerability,crypto-failure,"{'text': 'CVE-2019-20399', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-20399'}, {'text': 'GHSA-7cqg-8449-rmfv', 'url': 'https://github.com/advisories/GHSA-7cqg-8449-rmfv'}","{'text': 'https://nvd.nist.gov/vuln/detail/CVE-2019-20399', 'url': 'https://nvd.nist.gov/vuln/detail/CVE-2019-20399'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N,>=0.3.1,A timing vulnerability in the Scalar::check_overflow function in Parity libsecp256k1-rs before 0.3.1 potentially allows an attacker to leak information via a side-channel attack. Advisory available underCC0-1.0license.
MEDIUM,Lenienthyperheader parsing ofContent-Lengthcould allow request smuggling,"July  7, 2021","August  8, 2021(last modified: October 19, 2021)",hyper(crates.io),/packages/hyper.html,Vulnerability,,"{'text': 'CVE-2021-32715', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-32715'}, {'text': 'GHSA-f3pg-qwvg-p99c', 'url': 'https://github.com/advisories/GHSA-f3pg-qwvg-p99c'}","{'text': 'https://github.com/hyperium/hyper/security/advisories/GHSA-f3pg-qwvg-p99c', 'url': 'https://github.com/hyperium/hyper/security/advisories/GHSA-f3pg-qwvg-p99c'}",5.3MEDIUM,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,>=0.14.10,"hyper's HTTP header parser accepted, according to RFC 7230, illegal contents insideContent-Lengthheaders.
Due to this, upstream HTTP proxies that ignore the header may still forward them along if it chooses to ignore the error. To be vulnerable,hypermust be used as an HTTP/1 server and using an HTTP proxy upstream that ignores the header's contents
but still forwards it. Due to all the factors that must line up, an attack exploiting this vulnerability is unlikely. Advisory available underCC0-1.0license."
MEDIUM,Null pointer deref inX509_issuer_and_serial_hash(),"May  1, 2021","May  1, 2021(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2021-23841', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23841'}, {'text': 'GHSA-84rm-qf37-fgc2', 'url': 'https://github.com/advisories/GHSA-84rm-qf37-fgc2'}","{'text': 'https://www.openssl.org/news/secadv/20210216.txt', 'url': 'https://www.openssl.org/news/secadv/20210216.txt'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,>=111.14,"The OpenSSL public API functionX509_issuer_and_serial_hash()attempts to
create a unique hash value based on the issuer and serial number data contained
within an X509 certificate. However it fails to correctly handle any errors
that may occur while parsing the issuer field (which might occur if the issuer
field is maliciously constructed). This may subsequently result in a NULL
pointer deref and a crash leading to a potential denial of service attack. The functionX509_issuer_and_serial_hash()is never directly called by OpenSSL
itself so applications are only vulnerable if they use this function directly
and they use it on certificates that may have been obtained from untrusted
sources. Advisory available underCC0-1.0license."
MEDIUM,NULL pointer deref in signature_algorithms processing,"May  1, 2021","May  1, 2021(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2021-3449', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-3449'}, {'text': 'GHSA-83mx-573x-5rw9', 'url': 'https://github.com/advisories/GHSA-83mx-573x-5rw9'}","{'text': 'https://www.openssl.org/news/secadv/20210325.txt', 'url': 'https://www.openssl.org/news/secadv/20210325.txt'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,>=111.15,"An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation
ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits
the signature_algorithms extension (where it was present in the initial
ClientHello), but includes a signature_algorithms_cert extension then a NULL
pointer dereference will result, leading to a crash and a denial of service
attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which
is the default configuration). OpenSSL TLS clients are not impacted by this
issue. Advisory available underCC0-1.0license."
MEDIUM,Data race and memory safety issue inIndex,"November 15, 2020","March 30, 2021(last modified: June 13, 2023)",appendix(crates.io),/packages/appendix.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36469', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36469'}, {'text': 'GHSA-fvhr-7j8m-3cvc', 'url': 'https://github.com/advisories/GHSA-fvhr-7j8m-3cvc'}","{'text': 'https://github.com/krl/appendix/issues/6', 'url': 'https://github.com/krl/appendix/issues/6'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,"Theappendixcrate implements a key-value mapping data structure calledIndex<K, V>that is stored on disk. The crate allows for any type to inhabit
the genericKandVtype parameters and implements Send and Sync for them
unconditionally. Using a type that is not marked asSendorSyncwithIndexcan allow it
to be used across multiple threads leading to data races. Additionally using
reference types for the keys or values will lead to the segmentation faults
in the crate's code. Advisory available underCC0-1.0license."
MEDIUM,ImmediateIO and TransactionalIO can cause data races,"December 18, 2020","March 30, 2021(last modified: June 13, 2023)",max7301(crates.io),/packages/max7301.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2020-36472', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36472'}, {'text': 'GHSA-rmff-f8w9-c9rm', 'url': 'https://github.com/advisories/GHSA-rmff-f8w9-c9rm'}","{'text': 'https://github.com/edarc/max7301/issues/1', 'url': 'https://github.com/edarc/max7301/issues/1'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.2.0,"TheImmediateIOandTransactionalIOtypes implementSyncfor all containedExpander<EI>types regardless of if theExpanderitself is safe to use
across threads. As theIOtypes allow retrieving theExpander, this can lead to non-thread
safe types being sent across threads as part of theExpanderleading to data
races. Advisory available underCC0-1.0license."
MEDIUM,Generators can cause data races if non-Send types are used in their generator functions,"November 16, 2020","March 30, 2021(last modified: June 13, 2023)",generator(crates.io),/packages/generator.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2020-36471', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36471'}, {'text': 'GHSA-w3g5-2848-2v8r', 'url': 'https://github.com/advisories/GHSA-w3g5-2848-2v8r'}","{'text': 'https://github.com/Xudong-Huang/generator-rs/issues/27', 'url': 'https://github.com/Xudong-Huang/generator-rs/issues/27'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.7.0,"TheGeneratortype is an iterable which uses a generator function that yields
values. In affected versions of the crate, the provided function yielding values
had noSendbounds despite theGeneratoritself implementingSend. The generator function lacking aSendbound means that types that are
dangerous to send across threads such asRccould be sent as part of a
generator, potentially leading to data races. This flaw was fixed in commitf7d120a3bby enforcing that the generator function be bound bySend. Advisory available underCC0-1.0license."
MEDIUM,RingBuffer can create multiple mutable references and cause data races,"December 17, 2020","March 30, 2021(last modified: June 13, 2023)",disrustor(crates.io),/packages/disrustor.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36470', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36470'}, {'text': 'GHSA-w9r2-qrpm-4rmj', 'url': 'https://github.com/advisories/GHSA-w9r2-qrpm-4rmj'}","{'text': 'https://github.com/sklose/disrustor/issues/1', 'url': 'https://github.com/sklose/disrustor/issues/1'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.3,"TheRingBuffertype retrieves mutable references from theDataProviderin a
non-atomic manner, potentially allowing the creation of multiple mutable
references.RingBufferalso implements theSendandSynctraits for all
typesT. This allows undefined behavior from the aliased mutable references as well
as data races. Advisory available underCC0-1.0license."
MEDIUM,Multiple soundness issues inPtr,"December 10, 2020","March 26, 2021(last modified: June 13, 2023)",cgc(crates.io),/packages/cgc.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2020-36466', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36466'}, {'text': 'CVE-2020-36467', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36467'}, {'text': 'CVE-2020-36468', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36468'}, {'text': 'GHSA-f3mq-99jr-ww4r', 'url': 'https://github.com/advisories/GHSA-f3mq-99jr-ww4r'}, {'text': 'GHSA-f9xr-3m55-5q2v', 'url': 'https://github.com/advisories/GHSA-f9xr-3m55-5q2v'}, {'text': 'GHSA-pwhf-7427-9vv2', 'url': 'https://github.com/advisories/GHSA-pwhf-7427-9vv2'}","{'text': 'https://github.com/playXE/cgc/issues/5', 'url': 'https://github.com/playXE/cgc/issues/5'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,Affected versions of this crate have the following issues: Advisory available underCC0-1.0license.
MEDIUM,XSS incomrak,"February 21, 2021","February 21, 2021(last modified: June 13, 2023)",comrak(crates.io),/packages/comrak.html,Vulnerability,format-injection,,"{'text': 'CVE-2021-27671', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27671'}, {'text': 'GHSA-xmr7-v725-2jjr', 'url': 'https://github.com/advisories/GHSA-xmr7-v725-2jjr'}","{'text': 'https://github.com/kivikakk/comrak/releases/tag/0.9.1', 'url': 'https://github.com/kivikakk/comrak/releases/tag/0.9.1'}",6.1MEDIUM,Network,LowPrivileges requiredNoneUser interactionRequiredScopeChangedConfidentialityLowIntegrityLowAvailabilityNone,None,Required,Changed,Low,Low,None,Network,LowPrivileges requiredNoneUser interactionRequiredScopeChangedConfidentialityLowIntegrityLowAvailabilityNone,None,Required,Changed,Low,Low,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,>=0.9.1,"Thecomrakwe were matching unsafe URL prefixes, such asdata:orjavascript:, in a case-sensitive manner. This meant prefixes likeData:were untouched. Advisory available underCC0-1.0license."
MEDIUM,insert_slice_clone can double drop if Clone panics.,"February  3, 2021","February  4, 2021(last modified: June 13, 2023)",qwutils(crates.io),/packages/qwutils.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-26954', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26954'}, {'text': 'GHSA-68p4-pjpf-xwcq', 'url': 'https://github.com/advisories/GHSA-68p4-pjpf-xwcq'}","{'text': 'https://github.com/qwertz19281/rust_utils/issues/3', 'url': 'https://github.com/qwertz19281/rust_utils/issues/3'}",5.3MEDIUM,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityLow,None,None,Unchanged,None,None,Low,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityLow,None,None,Unchanged,None,None,Low,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,>=0.3.1,Version,<0.3.1,"Affected versions of this crate usedptr::copywhen inserting into the middle
of aVec. When ownership was temporarily duplicated during this copy, it calls
the clone method of a user provided element. This issue can result in an element being double-freed if the clone call panics. Commit20cb73dfixed this issue by adding aset_len(0)call before
operating on the vector to avoid dropping the elements during a panic. Advisory available underCC0-1.0license.",qwutils;;imp;;vec;;vecext;;insert_slice_clone,<0.3.1
MEDIUM,Demuxercan carry non-Send types across thread boundaries,"December 22, 2020","January 21, 2021(last modified: June 13, 2023)",va-ts(crates.io),/packages/va-ts.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36220', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36220'}, {'text': 'GHSA-3hj2-hh36-hv9v', 'url': 'https://github.com/advisories/GHSA-3hj2-hh36-hv9v'}","{'text': 'https://github.com/video-audio/va-ts/issues/4', 'url': 'https://github.com/video-audio/va-ts/issues/4'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.0.4,"In the affected versions of this crate,Demuxer<T>unconditionally implementedSendwith no trait bounds onT. This allows sending a non-Send typeTacross thread boundaries, which can cause undefined behavior like unlocking a mutex from a thread that didn't lock the mutex, or memory corruption from data race. The flaw was corrected in commit 0562cbf by adding aT: Sendbound to theSendimpl forDemuxer<T>. Advisory available underCC0-1.0license."
MEDIUM,ButtplugFutureStateShared allows data race to (!Send|!Sync) objects,"December 18, 2020","January 20, 2021(last modified: June 13, 2023)",buttplug(crates.io),/packages/buttplug.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36218', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36218'}, {'text': 'GHSA-r7rv-2rph-hvhj', 'url': 'https://github.com/advisories/GHSA-r7rv-2rph-hvhj'}","{'text': 'https://github.com/buttplugio/buttplug-rs/issues/225', 'url': 'https://github.com/buttplugio/buttplug-rs/issues/225'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,>=1.0.4,"ButtplugFutureStateShared<T>implementsSend&Syncregardless ofT. IfT: !SendforButtplugFutureStateShared<T>, it is possible to move non-Send types across thread boundaries (e.g.T=Rc<T>) and lead to undefined behavior.
IfT: !SyncforButtplugFutureStateShared<T>, it is possible to cause data race toT(e.g.T=Arc<Cell<_>>) and lead to undefined behavior. The flaw was corrected in version 1.0.4 by removing manual implementations ofSend/SyncforButtplugFutureStateShared<T>to let rustc generate auto trait implementations with correct trait bounds onT. Advisory available underCC0-1.0license."
MEDIUM,"Queues allow non-Send types to be sent to other threads, allowing data races","December 19, 2020","January 20, 2021(last modified: June 13, 2023)",multiqueue2(crates.io),/packages/multiqueue2.html,INFOUnsound,"memory-corruption, thread-safety","{'text': 'CVE-2020-36214', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36214'}, {'text': 'GHSA-jphw-p3m6-pj3c', 'url': 'https://github.com/advisories/GHSA-jphw-p3m6-pj3c'}","{'text': 'https://github.com/abbychau/multiqueue2/issues/10', 'url': 'https://github.com/abbychau/multiqueue2/issues/10'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.1.7,"Affected versions of this crate unconditionally implementedSendfor types used in queue implementations (InnerSend<RW, T>,InnerRecv<RW, T>,FutInnerSend<RW, T>,FutInnerRecv<RW, T>). This allows users to send non-Send types to other threads, which can lead to data race bugs or other undefined behavior. The flaw was corrected in v0.1.7 by addingT: Sendbound to to theSendimpl of four data types explained above. Advisory available underCC0-1.0license."
MEDIUM,may_queue's Queue lacks Send/Sync bound for its Send/Sync trait.,"November 10, 2020","January 20, 2021(last modified: June 13, 2023)",may_queue(crates.io),/packages/may_queue.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36217', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36217'}, {'text': 'GHSA-pphf-f93w-gc84', 'url': 'https://github.com/advisories/GHSA-pphf-f93w-gc84'}","{'text': 'https://github.com/Xudong-Huang/may/issues/88', 'url': 'https://github.com/Xudong-Huang/may/issues/88'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,Affected versions ofmay_queueimplementsSend/Syncfor itsQueuetype without restricting it toSendable types andSyncable types. This allows non-Synctypes such asCellto be shared across threads leading to undefined behavior and memory corruption in concurrent programs. Advisory available underCC0-1.0license.
MEDIUM,Soundness issue: Inputcan be misused to create data race to an object,"December 20, 2020","January 20, 2021(last modified: June 13, 2023)",eventio(crates.io),/packages/eventio.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36216', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36216'}, {'text': 'GHSA-69vj-xx27-g45w', 'url': 'https://github.com/advisories/GHSA-69vj-xx27-g45w'}","{'text': 'https://github.com/petabi/eventio/issues/33', 'url': 'https://github.com/petabi/eventio/issues/33'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.5.1,"Input<R>implementsSendwithout requiringR: Send. Affected versions of this crate allows users to send non-Send types to other threads,
which can lead to undefined behavior such as data race and memory corruption. The flaw was corrected in version 0.5.1 by addingR: Sendbound to theSendimpl ofInput<R>. Advisory available underCC0-1.0license."
MEDIUM,AtomicOption should have Send + Sync bound on its type argument.,"October 31, 2020","January 20, 2021(last modified: June 13, 2023)",atomic-option(crates.io),/packages/atomic-option.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36219', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36219'}, {'text': 'GHSA-8gf5-q9p9-wvmc', 'url': 'https://github.com/advisories/GHSA-8gf5-q9p9-wvmc'}","{'text': 'https://github.com/reem/rust-atomic-option/issues/4', 'url': 'https://github.com/reem/rust-atomic-option/issues/4'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,"In the affected versions of this crate,AtomicOption<T>unconditionally implementsSync. This allows programmers to move non-Sync types across thread boundaries (e.g.Rc<T>,Arc<Cell<T>>), which can lead to data races and undefined behavior.
It is also possible to send non-Send types likestd::sync::MutexGuardto other threads, which can lead to undefined behavior. Advisory available underCC0-1.0license."
MEDIUM,Soundness issue with base::Error,"December 10, 2020","January 18, 2021(last modified: June 13, 2023)",xcb(crates.io),/packages/xcb.html,INFOUnsound,"memory-corruption, thread-safety","{'text': 'CVE-2020-36205', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36205'}, {'text': 'GHSA-c8hq-x4mm-p6q6', 'url': 'https://github.com/advisories/GHSA-c8hq-x4mm-p6q6'}","{'text': 'https://github.com/rust-x-bindings/rust-xcb/issues/93', 'url': 'https://github.com/rust-x-bindings/rust-xcb/issues/93'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=1.0,"base::Errortype contains public field namedptr.
With this definition, it is possible to create abase::Errorwith an invalid pointer and trigger memory safety errors
such as use-after-free or double-free with safe Rust. The users ofxcbcrate are advised not to manipulate the field. Advisory available underCC0-1.0license."
MEDIUM,TreeFocus lacks bounds on its Send and Sync traits,"November  9, 2020","January 18, 2021(last modified: June 13, 2023)",im(crates.io),/packages/im.html,INFOUnsound,thread-safety,"{'text': 'CVE-2020-36204', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36204'}, {'text': 'GHSA-q9h2-4xhf-23xx', 'url': 'https://github.com/advisories/GHSA-q9h2-4xhf-23xx'}","{'text': 'https://github.com/bodil/im-rs/issues/157', 'url': 'https://github.com/bodil/im-rs/issues/157'}",4.7MEDIUM,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H,>=15.1.0,<12.0.0,"Affected versions ofimcontainsTreeFocusthat unconditionally implementsSendandSync. This allows a data race in safe Rust code ifTreeFocusis extracted fromFocustype.
Typical users that only useFocustype are not affected. Advisory available underCC0-1.0license."
MEDIUM,Missing Send bound for Lazy,"January 17, 2021","January 18, 2021(last modified: June 13, 2023)",lazy-init(crates.io),/packages/lazy-init.html,Vulnerability,memory-corruption,"{'text': 'CVE-2021-25901', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25901'}, {'text': 'GHSA-w47j-hqpf-qw9w', 'url': 'https://github.com/advisories/GHSA-w47j-hqpf-qw9w'}","{'text': 'https://github.com/khuey/lazy-init/issues/9', 'url': 'https://github.com/khuey/lazy-init/issues/9'}",5.3MEDIUM,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityLow,None,None,Unchanged,None,None,Low,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityLow,None,None,Unchanged,None,None,Low,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L,>0.4.0,All current versions of this crate allow causing data races in safe code. The flaw will be fixed in the next release. Advisory available underCC0-1.0license.
MEDIUM,"Unsound: can makeARefsscontain a !Send, !Sync object.","December  1, 2020","January  6, 2021(last modified: June 13, 2023)",reffers(crates.io),/packages/reffers.html,INFOUnsound,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36203', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36203'}, {'text': 'GHSA-39xg-8p43-h76x', 'url': 'https://github.com/advisories/GHSA-39xg-8p43-h76x'}","{'text': 'https://github.com/diwic/reffers-rs/issues/7', 'url': 'https://github.com/diwic/reffers-rs/issues/7'}",4.7MEDIUM,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.6.1,"ARefss<'a, V>is a type that is assumed to contain objects that areSend + Sync. In the affected versions of this crate,Send/Synctraits are unconditionally implemented forARefss<'a, V>. By using theARefss::map()API, we can insert a!Sendor!Syncobject intoARefss<'a, V>. After that, it is possible to create a data race to the inner object ofARefss<'a, V>, which can lead to undefined behavior & memory corruption. The flaw was corrected in commit 6dd7ca0 (https://github.com/diwic/reffers-rs/commit/6dd7ca0d50f2464df708975cdafcfaeeb6d41c66) by adding trait boundV: Send + SynctoARefss::map()API. Advisory available underCC0-1.0license."
MEDIUM,XSS in mdBook's search page,"January  4, 2021","January  4, 2021(last modified: October 19, 2021)",mdbook(crates.io),/packages/mdbook.html,Vulnerability,code-execution,,"{'text': 'CVE-2020-26297', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26297'}","{'text': 'https://groups.google.com/g/rustlang-security-announcements/c/3-sO6of29O0', 'url': 'https://groups.google.com/g/rustlang-security-announcements/c/3-sO6of29O0'}",6.1MEDIUM,Network,LowPrivileges requiredNoneUser interactionRequiredScopeChangedConfidentialityLowIntegrityLowAvailabilityNone,None,Required,Changed,Low,Low,None,Network,LowPrivileges requiredNoneUser interactionRequiredScopeChangedConfidentialityLowIntegrityLowAvailabilityNone,None,Required,Changed,Low,Low,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N,>=0.4.5,<=0.1.3,"The Rust Security Response Working Group was recently notified of a security
issue affecting the search feature of mdBook, which could allow an attacker to
execute arbitrary JavaScript code on the page. The CVE for this vulnerability isCVE-2020-26297. The search feature of mdBook (introduced in version 0.1.4) was affected by a
cross site scripting vulnerability that allowed an attacker to execute
arbitrary JavaScript code on an user's browser by tricking the user into typing
a malicious search query, or tricking the user into clicking a link to the
search page with the malicious search query prefilled. mdBook 0.4.5 fixes the vulnerability by properly escaping the search query. Owners of websites built with mdBook have to upgrade to mdBook 0.4.5 or greater
and rebuild their website contents with it. It's possible to install mdBook
0.4.5 on the local system with: Thanks to Kamil Vavra for responsibly disclosing the vulnerability to us
according toour security policy. All times are listed in UTC. Advisory available underCC0-1.0license."
MEDIUM,"Send/Sync bound needed on V inimpl Send/Sync for ARCache<K, V>","November 13, 2020","December 17, 2020(last modified: June 13, 2023)",concread(crates.io),/packages/concread.html,INFOUnsound,thread-safety,"{'text': 'CVE-2020-35928', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35928'}, {'text': 'GHSA-4xj5-vv9x-63jp', 'url': 'https://github.com/advisories/GHSA-4xj5-vv9x-63jp'}","{'text': 'https://github.com/kanidm/concread/issues/48', 'url': 'https://github.com/kanidm/concread/issues/48'}",4.7MEDIUM,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.2.6,"Affected versions of this crate unconditionally implementedSend/Synctraits forARCache<K, V>type. This allows users to send/access types that do not implementSend/Sync, which can cause a data race. The flaw was corrected in the 0.2.6 release by adding boundsK: Send + Sync&V: Send + Syncto affectedSend/Synctrait implementations. Advisory available underCC0-1.0license."
MEDIUM,Thexallows data races of non-Send types across threads,"December  8, 2020","December  9, 2020(last modified: June 13, 2023)",thex(crates.io),/packages/thex.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-35927', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35927'}, {'text': 'GHSA-j42v-6wpm-r847', 'url': 'https://github.com/advisories/GHSA-j42v-6wpm-r847'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,no patched versions,"thex::Thex<T>implementsSyncfor all typesT. However, it is missing a
bound forT: Send. This allows non-Send types such asRcto be sent across thread boundaries
which can trigger undefined behavior and memory corruption. Advisory available underCC0-1.0license."
MEDIUM,nanorand 0.5.0 - RNGs failed to generate properly for non-64-bit numbers,"December  9, 2020","December  9, 2020(last modified: June 13, 2023)",nanorand(crates.io),/packages/nanorand.html,Vulnerability,crypto-failure,,"{'text': 'CVE-2020-35926', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35926'}, {'text': 'GHSA-m9m5-cg5h-r582', 'url': 'https://github.com/advisories/GHSA-m9m5-cg5h-r582'}","{'text': 'https://twitter.com/aspenluxxxy/status/1336684692284772352', 'url': 'https://twitter.com/aspenluxxxy/status/1336684692284772352'}",5.1MEDIUM,Local,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityNone,None,None,Unchanged,Low,Low,None,Local,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityNone,None,None,Unchanged,Low,Low,None,CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N,>=0.5.1,"In versions ofnanorandprior to 0.5.1,RandomGenimplementations for standard unsigned integers could
fail to properly generate numbers, due to using bit-shifting to truncate a 64-bit number, rather than just
anasconversion. This often manifested as RNGs returning nothing but 0, including the cryptographically secureChaCharandom
number generator.. Advisory available underCC0-1.0license."
MEDIUM,MPMCConsumer/Producer allows sending non-Send type across threads,"November 29, 2020","December  7, 2020(last modified: June 13, 2023)",magnetic(crates.io),/packages/magnetic.html,Vulnerability,thread-safety,"{'text': 'CVE-2020-35925', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35925'}, {'text': 'GHSA-wv4p-jp67-jr97', 'url': 'https://github.com/advisories/GHSA-wv4p-jp67-jr97'}","{'text': 'https://github.com/johnshaw/magnetic/issues/9', 'url': 'https://github.com/johnshaw/magnetic/issues/9'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=2.0.1,"Affected versions of this crate unconditionally implementedSyncandSendtraits forMPMCConsumerandMPMCProducertypes. This allows users to send types that do not implementSendtrait across thread boundaries, which can cause a data race. The flaw was corrected in the 2.0.1 release by addingT: Sendbound to affected Sync/Send trait implementations. Advisory available underCC0-1.0license."
MEDIUM,TryMutexallows sending non-Send type across threads,"November 17, 2020","December  7, 2020(last modified: June 13, 2023)",try-mutex(crates.io),/packages/try-mutex.html,Vulnerability,thread-safety,"{'text': 'CVE-2020-35924', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35924'}, {'text': 'GHSA-64j8-7gp2-xjx5', 'url': 'https://github.com/advisories/GHSA-64j8-7gp2-xjx5'}","{'text': 'https://github.com/mpdn/try-mutex/issues/2', 'url': 'https://github.com/mpdn/try-mutex/issues/2'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.3.0,"Affected versions of this crate unconditionally implemented Sync trait forTryMutex<T>type. This allows users to put non-SendTtype inTryMutexand send it to another thread, which can cause a data race. The flaw was corrected in the 0.3.0 release by addingT: Sendbound for the Sync trait implementation. Advisory available underCC0-1.0license."
MEDIUM,ordered_float:NotNan may contain NaN after panic in assignment operators,"December  6, 2020","December  6, 2020(last modified: June 13, 2023)",ordered-float(crates.io),/packages/ordered-float.html,Vulnerability,,"{'text': 'CVE-2020-35923', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35923'}, {'text': 'GHSA-566x-hhrf-qf8m', 'url': 'https://github.com/advisories/GHSA-566x-hhrf-qf8m'}","{'text': 'https://github.com/reem/rust-ordered-float/pull/71', 'url': 'https://github.com/reem/rust-ordered-float/pull/71'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,^1.1.1>=2.0.1,<0.2.2,"After using an assignment operators such asNotNan::add_assign,NotNan::mul_assign, etc., it was possible for the resultingNotNanvalue to contain aNaN.  This could cause undefined behavior in safe code, because the safeNotNan::cmpmethod contains internal unsafe code that assumes the value is neverNaN.  (It could also cause undefined behavior in third-party unsafe code that makes the same assumption, as well as logic errors in safe code.) This was mitigated starting in version 0.4.0, by panicking if the assigned value is NaN.  However, in affected versions from 0.4.0 onward, code that uses theNotNanvalue during unwinding, or that continues after catching the panic, could still observe the invalid value and trigger undefined behavior. The flaw is fully corrected in versions 1.1.1 and 2.0.1, by ensuring that the assignment operators panic without modifying the operand, if the result would beNaN. Advisory available underCC0-1.0license."
MEDIUM,net2invalidly assumes the memory layout of std::net::SocketAddr,"November  7, 2020","December  2, 2020(last modified: July  8, 2023)",net2(crates.io),/packages/net2.html,INFOUnsound,,"{'text': 'CVE-2020-35919', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35919'}, {'text': 'CVE-2020-35920', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35920'}, {'text': 'GHSA-458v-4hrf-g3m4', 'url': 'https://github.com/advisories/GHSA-458v-4hrf-g3m4'}, {'text': 'GHSA-c79c-gwph-gqfm', 'url': 'https://github.com/advisories/GHSA-c79c-gwph-gqfm'}","{'text': 'https://github.com/deprecrated/net2-rs/issues/105', 'url': 'https://github.com/deprecrated/net2-rs/issues/105'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.2.36,"Thenet2crate has assumedstd::net::SocketAddrV4andstd::net::SocketAddrV6have the same memory layout as the system C representationsockaddr. It has simply casted the pointers to convert the socket addresses to the
system representation. The standard library does not say anything about the memory
layout, and this will cause invalid memory access if the standard library
changes the implementation. No warnings or errors will be emitted once the
change happens. Advisory available underCC0-1.0license."
MEDIUM,mioinvalidly assumes the memory layout of std::net::SocketAddr,"November  2, 2020","December  2, 2020(last modified: June 13, 2023)",mio(crates.io),/packages/mio.html,INFOUnsound,,"{'text': 'CVE-2020-35922', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35922'}, {'text': 'GHSA-pf3p-x6qj-6j7q', 'url': 'https://github.com/advisories/GHSA-pf3p-x6qj-6j7q'}","{'text': 'https://github.com/tokio-rs/mio/issues/1386', 'url': 'https://github.com/tokio-rs/mio/issues/1386'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.7.6,<0.7.0,"Themiocrate has assumedstd::net::SocketAddrV4andstd::net::SocketAddrV6have the same memory layout as the system C representationsockaddr. It has simply casted the pointers to convert the socket addresses to the
system representation. The standard library does not say anything about the memory
layout, and this will cause invalid memory access if the standard library
changes the implementation. No warnings or errors will be emitted once the
change happens. Advisory available underCC0-1.0license."
MEDIUM,socket2invalidly assumes the memory layout of std::net::SocketAddr,"November  6, 2020","December  2, 2020(last modified: June 13, 2023)",socket2(crates.io),/packages/socket2.html,INFOUnsound,,"{'text': 'CVE-2020-35920', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35920'}, {'text': 'GHSA-458v-4hrf-g3m4', 'url': 'https://github.com/advisories/GHSA-458v-4hrf-g3m4'}","{'text': 'https://github.com/rust-lang/socket2-rs/issues/119', 'url': 'https://github.com/rust-lang/socket2-rs/issues/119'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.3.16,"Thesocket2crate has assumedstd::net::SocketAddrV4andstd::net::SocketAddrV6have the same memory layout as the system C representationsockaddr. It has simply casted the pointers to convert the socket addresses to the
system representation. The standard library does not say anything about the memory
layout, and this will cause invalid memory access if the standard library
changes the implementation. No warnings or errors will be emitted once the
change happens. Advisory available underCC0-1.0license."
MEDIUM,miowinvalidly assumes the memory layout of std::net::SocketAddr,"November 13, 2020","December  2, 2020(last modified: June 13, 2023)",miow(crates.io),/packages/miow.html,INFOUnsound,,"{'text': 'CVE-2020-35921', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35921'}, {'text': 'GHSA-jrcf-4jp8-m28v', 'url': 'https://github.com/advisories/GHSA-jrcf-4jp8-m28v'}","{'text': 'https://github.com/yoshuawuyts/miow/issues/38', 'url': 'https://github.com/yoshuawuyts/miow/issues/38'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,^0.2.2>=0.3.6,"Themiowcrate has assumedstd::net::SocketAddrV4andstd::net::SocketAddrV6have the same memory layout as the system C representationsockaddr. It has simply casted the pointers to convert the socket addresses to the
system representation. The standard library does not say anything about the memory
layout, and this will cause invalid memory access if the standard library
changes the implementation. No warnings or errors will be emitted once the
change happens. Advisory available underCC0-1.0license."
MEDIUM,Unexpected panic when decoding tokens,"November 29, 2020","November 29, 2020(last modified: June 13, 2023)",branca(crates.io),/packages/branca.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2020-35918', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35918'}, {'text': 'GHSA-c9rv-3jmq-527w', 'url': 'https://github.com/advisories/GHSA-c9rv-3jmq-527w'}","{'text': 'https://github.com/return/branca/issues/24', 'url': 'https://github.com/return/branca/issues/24'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.10.0,Version,<0.10.0,<0.10.0,"Prior to0.10.0it was possible to have both decoding functions panic unexpectedly,
by supplying tokens with an incorrect base62 encoding. The documentation stated that an error should have been reported instead. Advisory available underCC0-1.0license.",branca;;branca;;decode,<0.10.0
MEDIUM,Reference counting error inFrom<Py<T>>,"November 28, 2020","November 28, 2020(last modified: June 13, 2023)",pyo3(crates.io),/packages/pyo3.html,Vulnerability,,"{'text': 'CVE-2020-35917', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35917'}, {'text': 'GHSA-2vx6-fcw6-hpr6', 'url': 'https://github.com/advisories/GHSA-2vx6-fcw6-hpr6'}","{'text': 'https://github.com/PyO3/pyo3/pull/1297', 'url': 'https://github.com/PyO3/pyo3/pull/1297'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.12.4,<0.12.0,"A bug inFrom<Py<T>>would lead to an extra reference count decrement, often
leading to use-after-free issues. Advisory available underCC0-1.0license."
MEDIUM,Mutable reference with immutable provenance,"November 12, 2020","November 20, 2020(last modified: June 13, 2023)",image(crates.io),/packages/image.html,INFOUnsound,,"{'text': 'CVE-2020-35916', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35916'}, {'text': 'GHSA-9wgh-vjj7-7433', 'url': 'https://github.com/advisories/GHSA-9wgh-vjj7-7433'}","{'text': 'https://github.com/image-rs/image/issues/1357', 'url': 'https://github.com/image-rs/image/issues/1357'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.23.12,Version,<0.23.12,<0.23.12,<0.23.12,<0.23.12,<0.23.12,<0.23.12,"A mutable reference to a struct was constructed by dereferencing a pointer
obtained fromslice::as_ptr. Instead,slice::as_mut_ptrshould have been
called on the mutable slice argument. The former performs an implicit reborrow
as an immutable shared reference which does not allow writing through the
derived pointer. There is no evidence for miscompilation, exploitable or otherwise, caused by
this bug.Further investigation on Zulipsuggests that the unoptimized
generated LLVM IR does not contain any UB itself, effectively mitigating
further effects. Advisory available underCC0-1.0license.",image;;bgr;;from_slice_mut,<0.23.12
MEDIUM,GenericMutexGuard allows data races of non-Sync types across threads,"October 31, 2020","November 18, 2020(last modified: June 13, 2023)",futures-intrusive(crates.io),/packages/futures-intrusive.html,INFOUnsound,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-35915', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35915'}, {'text': 'GHSA-4hjg-cx88-g9f9', 'url': 'https://github.com/advisories/GHSA-4hjg-cx88-g9f9'}","{'text': 'https://github.com/Matthias247/futures-intrusive/issues/53', 'url': 'https://github.com/Matthias247/futures-intrusive/issues/53'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.4.0,"GenericMutexGuard<T>was given theSyncauto trait as long asTisSenddue to its contained members. However, since the guard is supposed to represent
anacquired lockand allows concurrent access to the underlying data from
different threads, it should only beSyncwhen the underlying data is. This is a soundness issue and allows data races, potentially leading to crashes
and segfaults from safe Rust code. The flaw was corrected by adding aT: Send + Syncbound forGenericMutexGuard'sSynctrait. This bug issimilar to oneinstd::sync::Mutex. Advisory available underCC0-1.0license."
MEDIUM,Potential segfault in the time crate,"November 18, 2020","November 18, 2020(last modified: June 13, 2023)",time(crates.io),/packages/time.html,Vulnerability,"code-execution, memory-corruption",,"{'text': 'CVE-2020-26235', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26235'}, {'text': 'GHSA-wcg3-cvx6-7396', 'url': 'https://github.com/advisories/GHSA-wcg3-cvx6-7396'}","{'text': 'https://github.com/time-rs/time/issues/293', 'url': 'https://github.com/time-rs/time/issues/293'}",6.2MEDIUM,Local,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Local,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.2.23,"Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library., The affected functions from time 0.2.7 through 0.2.22 are:, time::UtcOffset::local_offset_at, time::UtcOffset::try_local_offset_at, time::UtcOffset::current_local_offset, time::UtcOffset::try_current_local_offset, time::OffsetDateTime::now_local, time::OffsetDateTime::try_now_local, The affected functions in time 0.1 (all versions) are:, at, at_utc, now, Non-Unix targets (including Windows and wasm) are unaffected.",linuxredoxsolarisandroidiosmacosnetbsdopenbsdfreebsd,Version,<0.2.23,<0.2.23,<0.2.23,<0.2.23,<0.2.23,<0.2.23,^0.1,^0.1,^0.1,,"A possible workaround for crates affected through the transitive dependency inchrono, is to avoid using the defaultoldtimefeature dependency of thechronocrate by disabling itsdefault-featuresand manually specifying the required features instead., Cargo.toml:, Commandline:, Sources:, chronotope/chrono#602 (comment), {'text': 'chronotope/chrono#602 (comment)', 'url': 'https://github.com/chronotope/chrono/issues/602#issuecomment-1242149249'}, vityafx/serde-aux#21, {'text': 'vityafx/serde-aux#21', 'url': 'https://github.com/vityafx/serde-aux/issues/21'}, Advisory available underCC0-1.0license., {'text': 'CC0-1.0', 'url': 'https://spdx.org/licenses/CC0-1.0.html'}",time;;offsetdatetime;;now_local,<0.2.23
MEDIUM,Argument injection in sendmail transport,"November 11, 2020","November 11, 2020(last modified: June 13, 2023)",lettre(crates.io),/packages/lettre.html,Vulnerability,"code-execution, file-disclosure",,"{'text': 'CVE-2020-28247', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28247'}, {'text': 'GHSA-vc2p-r46x-m3vx', 'url': 'https://github.com/advisories/GHSA-vc2p-r46x-m3vx'}","{'text': 'https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b', 'url': 'https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b'}",5.3MEDIUM,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,">=0.10.0-alpha.4<0.10.0-alpha.1, >=0.9.5<0.9.0, >=0.8.4<0.8.0, >=0.7.1",<0.7.0,Version,<0.10.0-alpha.1,">=0.10.0-alpha.1, <=0.10.0-alpha.3",">=0.10.0-alpha.1, <=0.10.0-alpha.3","Affected versions of lettre allowed argument injection
to the sendmail command. It was possible, using forgedtoaddresses,
to pass arbitrary arguments to the sendmail executable. Depending on the implementation (original sendmail, postfix, exim, etc.)
it could be possible in some cases to write email data into arbitrary files (using sendmail's
logging features). The flaw is corrected by modifying the executed command to stop parsing arguments
before passing the destination addresses. NOTE: This vulnerability only affects thesendmailtransport. Others, includingsmtp, are not
affected. This vulnerability was reported by vin01. Advisory available underCC0-1.0license.",lettre;;sendmail;;sendmailtransport;;send,<0.10.0-alpha.1
MEDIUM,ImproperSyncimplementation onFuturesUnorderedin futures-utils can cause data corruption,"January 24, 2020","October 31, 2020(last modified: June 13, 2023)",futures-util(crates.io),/packages/futures-util.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-35908', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35908'}, {'text': 'GHSA-5r9g-j7jj-hw6c', 'url': 'https://github.com/advisories/GHSA-5r9g-j7jj-hw6c'}","{'text': 'https://github.com/rust-lang/futures-rs/issues/2050', 'url': 'https://github.com/rust-lang/futures-rs/issues/2050'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.3.2,<0.3.0,Version,>=0.3.0,"Affected versions of the crate had an unsoundSyncimplementation on theFuturesUnorderedstructure, which used aCellfor
interior mutability without any code to handle synchronized access to the underlying task list's length and head safely. This could of lead to data corruption since two threads modifying the list at once could see incorrect values due to the lack
of access synchronization. The issue was fixed by adding access synchronization code around insertion of tasks into the list. Advisory available underCC0-1.0license.",futures_util;;stream;;futuresunordered,>=0.3.0
MEDIUM,futures_task::noop_waker_ref can segfault due to dereferencing a NULL pointer,"May  3, 2020","October 31, 2020(last modified: June 13, 2023)",futures-task(crates.io),/packages/futures-task.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2020-35907', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35907'}, {'text': 'GHSA-p9m5-3hj7-cp5r', 'url': 'https://github.com/advisories/GHSA-p9m5-3hj7-cp5r'}","{'text': 'https://github.com/rust-lang/futures-rs/issues/2091', 'url': 'https://github.com/rust-lang/futures-rs/issues/2091'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.3.5,Version,>=0.3.0,"Affected versions of the crate used aUnsafeCellin thread-local storage to return a noop waker reference,
assuming that the reference would never be returned from another thread. This resulted in a segmentation fault crash ifWaker::wake_by_ref()was called on a waker returned from another thread due to
it attempting to dereference a pointer that wasn't accessible from the main thread. Reproduction Example (from issue): The flaw was corrected by using aOnceCell::Lazy<>wrapper around the noop waker instead of thread-local storage. Advisory available underCC0-1.0license.",futures_task;;noop_waker_ref,>=0.3.0
MEDIUM,MutexGuard::map can cause a data race in safe code,"October 22, 2020","October 30, 2020(last modified: June 13, 2023)",futures-util(crates.io),/packages/futures-util.html,Vulnerability,thread-safety,,"{'text': 'CVE-2020-35905', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35905'}, {'text': 'GHSA-rh4w-94hh-9943', 'url': 'https://github.com/advisories/GHSA-rh4w-94hh-9943'}","{'text': 'https://github.com/rust-lang/futures-rs/issues/2239', 'url': 'https://github.com/rust-lang/futures-rs/issues/2239'}",4.7MEDIUM,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.3.7,<0.3.2,Version,>=0.3.2,"Affected versions of the crate had a Send/Sync implementation for MappedMutexGuard that only considered variance on T, while MappedMutexGuard dereferenced to U. This could of led to data races in safe Rust code when a closure used in MutexGuard::map() returns U that is unrelated to T. The issue was fixed by fixingSendandSyncimplementations, and by adding aPhantomData<&'a mut U>marker to theMappedMutexGuardtype to tell the compiler that the guard is over
U too. Advisory available underCC0-1.0license.",futures_util;;lock;;mutexguard;;map,>=0.3.2
MEDIUM,Possible use-after-free withproplist::Iterator,"December 22, 2018","October 22, 2020(last modified: October 19, 2021)",libpulse-binding(crates.io),/packages/libpulse-binding.html,Vulnerability,memory-corruption,"{'text': 'GHSA-6gvc-4jvj-pwq4', 'url': 'https://github.com/advisories/GHSA-6gvc-4jvj-pwq4'}, {'text': 'CVE-2018-25001', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25001'}","{'text': 'https://github.com/advisories/GHSA-6gvc-4jvj-pwq4', 'url': 'https://github.com/advisories/GHSA-6gvc-4jvj-pwq4'}",6.5MEDIUM,Network,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,Low,None,Unchanged,None,High,None,Network,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,Low,None,Unchanged,None,High,None,CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N,>=2.5.0,<1.0.5,"Affected versions contained a possible use-after-free issue with property list iteration
due to a lack of a lifetime constraint tying the lifetime of aproplist::Iteratorto theProplistobject for which it was created. This made it possible for users, without
experiencing a compiler error/warning, to destroy theProplistobject before the iterator,
thus destroying the underlying C object the iterator works upon, before the iterator may be
finished with it. This impacts all versions of the crate before2.5.0back to1.0.5. Before version1.0.5the function that produces the iterator was broken to the point of being useless. Advisory available underCC0-1.0license."
MEDIUM,scalarmult() vulnerable to degenerate public keys,"January 26, 2017","October  1, 2020(last modified: June 13, 2023)",sodiumoxide(crates.io),/packages/sodiumoxide.html,Vulnerability,,"{'text': 'CVE-2017-1000168', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-1000168'}, {'text': 'GHSA-2wc6-2rcj-8v76', 'url': 'https://github.com/advisories/GHSA-2wc6-2rcj-8v76'}","{'text': 'https://github.com/dnaq/sodiumoxide/issues/154', 'url': 'https://github.com/dnaq/sodiumoxide/issues/154'}",6.5MEDIUM,Network,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,Required,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,Required,Unchanged,High,None,None,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N,>=0.0.14,"Thescalarmult()function included in previous versions of this crate
accepted all-zero public keys, for which the resulting Diffie-Hellman shared
secret will always be zero regardless of the private key used. This issue was fixed by checking for this class of keys and rejecting them
if they are used. Advisory available underCC0-1.0license."
MEDIUM,HTTP Request smuggling through malformed Transfer Encoding headers,"June 16, 2020","October  1, 2020(last modified: June 13, 2023)",tiny_http(crates.io),/packages/tiny_http.html,Vulnerability,,"{'text': 'CVE-2020-35884', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35884'}, {'text': 'GHSA-7v2r-wxmg-mgvc', 'url': 'https://github.com/advisories/GHSA-7v2r-wxmg-mgvc'}","{'text': 'https://github.com/tiny-http/tiny-http/issues/173', 'url': 'https://github.com/tiny-http/tiny-http/issues/173'}",6.5MEDIUM,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityNone,None,None,Unchanged,Low,Low,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityNone,None,None,Unchanged,Low,Low,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N,>=0.8.0^0.6.3,"HTTP pipelining issues and request smuggling attacks are possible due to incorrect
Transfer encoding header parsing. It is possible conduct HTTP request smuggling attacks (CL:TE/TE:TE) by sending invalid Transfer Encoding headers. By manipulating the HTTP response the attacker could poison a web-cache, perform an XSS attack, or obtain sensitive information
from requests other than their own. Advisory available underCC0-1.0license."
MEDIUM,Unsafe Send implementation in Atom allows data races,"September 21, 2020","October  1, 2020(last modified: June 13, 2023)",atom(crates.io),/packages/atom.html,INFOUnsound,thread-safety,"{'text': 'CVE-2020-35897', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35897'}, {'text': 'GHSA-9cg2-2j2h-59v9', 'url': 'https://github.com/advisories/GHSA-9cg2-2j2h-59v9'}","{'text': 'https://github.com/slide-rs/atom/issues/13', 'url': 'https://github.com/slide-rs/atom/issues/13'}",4.7MEDIUM,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.3.6,"Theatomcrate contains a security issue revolving around its implementation
of the Send trait. It incorrectly allows any arbitrary type to be sent across
threads potentially leading to use-after-free issues through memory races. Advisory available underCC0-1.0license."
MEDIUM,VecCopy allows misaligned access to elements,"September 27, 2020","October  1, 2020(last modified: June 13, 2023)",dync(crates.io),/packages/dync.html,INFOUnsound,"{'text': 'CVE-2020-35903', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35903'}, {'text': 'GHSA-qxjq-v4wf-ppvh', 'url': 'https://github.com/advisories/GHSA-qxjq-v4wf-ppvh'}","{'text': 'https://github.com/elrnv/dync/issues/4', 'url': 'https://github.com/elrnv/dync/issues/4'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=0.5.0,"VecCopy::datais created as a Vec of u8 but can be used to store and retrieve
elements of different types leading to misaligned access. The issue was resolved in v0.5.0 by replacing data being stored byVec<u8>with a custom managed
pointer.  Elements are now stored and retrieved using types with proper alignment corresponding to
original types. Advisory available underCC0-1.0license."
MEDIUM,array_queue pop_back() may cause a use-after-free,"September 26, 2020","October  1, 2020(last modified: June 13, 2023)",array-queue(crates.io),/packages/array-queue.html,Vulnerability,,"{'text': 'CVE-2020-35900', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35900'}, {'text': 'GHSA-75cq-g75g-rxff', 'url': 'https://github.com/advisories/GHSA-75cq-g75g-rxff'}","{'text': 'https://github.com/raviqqe/array-queue/issues/2', 'url': 'https://github.com/raviqqe/array-queue/issues/2'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,Low,None,Unchanged,High,None,None,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,Low,None,Unchanged,High,None,None,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N,no patched versions,<0.3.0,"array_queue implements a circular queue that wraps around an array. However, it
fails to properly index into the array in thepop_backfunction allowing the
reading of previously dropped or uninitialized memory. Advisory available underCC0-1.0license."
MEDIUM,bespoke Cell implementation allows obtaining several mutable references to the same data,"January  8, 2020","October  1, 2020(last modified: June 13, 2023)",actix-service(crates.io),/packages/actix-service.html,INFOUnsound,memory-corruption,"{'text': 'CVE-2020-35899', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35899'}, {'text': 'GHSA-whc7-5p35-4ww2', 'url': 'https://github.com/advisories/GHSA-whc7-5p35-4ww2'}","{'text': 'https://github.com/actix/actix-net/pull/158', 'url': 'https://github.com/actix/actix-net/pull/158'}",5.5MEDIUM,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,Low,None,Unchanged,None,None,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H,>=1.0.6,"The custom implementation of a Cell primitive in the affected versions of this crate
does not keep track of mutable references to the underlying data. This allows obtaining several mutable references to the same object
which may result in arbitrary memory corruption, most likely use-after-free. The flaw was corrected by switching from a bespokeCell<T>implementation toRc<RefCell<T>>. Advisory available underCC0-1.0license."
MEDIUM,headers containing newline characters can split messages,"January 23, 2017","October  1, 2020(last modified: June 13, 2023)",hyper(crates.io),/packages/hyper.html,Vulnerability,"{'text': 'CVE-2017-18587', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18587'}, {'text': 'GHSA-q89x-f52w-6hj2', 'url': 'https://github.com/advisories/GHSA-q89x-f52w-6hj2'}","{'text': 'https://github.com/hyperium/hyper/wiki/Security-001', 'url': 'https://github.com/hyperium/hyper/wiki/Security-001'}",5.3MEDIUM,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,">=0.10.2<0.10.0, >=0.9.18","Serializing of headers to the socket did not filter the values for newline bytes (\ror\n),
which allowed for header values to split a request or response. People would not likely include
newlines in the headers in their own applications, so the way for most people to exploit this
is if an application constructs headers based on unsanitized user input. This issue was fixed by replacing all newline characters with a space during serialization of
a header value. Advisory available underCC0-1.0license."
MEDIUM,HTTPS MitM vulnerability due to lack of hostname verification,"May  9, 2016","October  1, 2020(last modified: June 13, 2023)",hyper(crates.io),/packages/hyper.html,Vulnerability,crypto-failure,,"{'text': 'CVE-2016-10932', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-10932'}, {'text': 'GHSA-9xjr-m6f3-v5wm', 'url': 'https://github.com/advisories/GHSA-9xjr-m6f3-v5wm'}","{'text': 'https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#v094-2016-05-09', 'url': 'https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#v094-2016-05-09'}",RUSTSEC-2016-0001,4.8MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityNone,None,None,Unchanged,Low,Low,None,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityNone,None,None,Unchanged,Low,Low,None,CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N,>=0.9.4,windows,"When used on Windows platforms, all versions of Hyper prior to 0.9.4 did not
perform hostname verification when making HTTPS requests. This allows an attacker to perform MitM attacks by preventing any valid
CA-issued certificate, even if there's a hostname mismatch. The problem was addressed by leveraging rust-openssl's built-in support for
hostname verification. Advisory available underCC0-1.0license."
MEDIUM,HTTP download and execution allows MitM RCE,"August  1, 2016","October  1, 2020(last modified: June 13, 2023)",portaudio(crates.io),/packages/portaudio.html,Vulnerability,,"{'text': 'CVE-2016-10933', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-10933'}, {'text': 'GHSA-pq6v-x7gp-7776', 'url': 'https://github.com/advisories/GHSA-pq6v-x7gp-7776'}","{'text': 'https://github.com/RustAudio/rust-portaudio/issues/144', 'url': 'https://github.com/RustAudio/rust-portaudio/issues/144'}",5.9MEDIUM,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N,no patched versions,"The build script in the portaudio crate will attempt to download via HTTP
the portaudio source and build it. A Mallory in the middle can intercept the download with their own archive
and get RCE. Advisory available underCC0-1.0license."
MEDIUM,Hostname verification skipped when custom root certs used,"March 15, 2017","October  1, 2020(last modified: June 13, 2023)",security-framework(crates.io),/packages/security-framework.html,Vulnerability,,"{'text': 'CVE-2017-18588', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18588'}, {'text': 'GHSA-jqqr-c2r2-9cvr', 'url': 'https://github.com/advisories/GHSA-jqqr-c2r2-9cvr'}","{'text': 'https://github.com/sfackler/rust-security-framework/pull/27', 'url': 'https://github.com/sfackler/rust-security-framework/pull/27'}",5.3MEDIUM,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityNone,None,None,Unchanged,None,Low,None,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N,>=0.1.12,"If custom root certificates were registered with aClientBuilder, the
hostname of the target server would not be validated against its presented leaf
certificate. This issue was fixed by properly configuring the trust evaluation logic to
perform that check. Advisory available underCC0-1.0license."
MEDIUM,Compiler optimisation for next_with_timeout in pnet::transport::IcmpTransportChannelIterator flaws to SEGFAULT,"June 11, 2019","October  1, 2020(last modified: June 13, 2023)",pnet(crates.io),/packages/pnet.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2019-25054', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25054'}, {'text': 'GHSA-24g6-5rx7-58wj', 'url': 'https://github.com/advisories/GHSA-24g6-5rx7-58wj'}, {'text': 'GHSA-r6ff-2q3c-v3pv', 'url': 'https://github.com/advisories/GHSA-r6ff-2q3c-v3pv'}","{'text': 'https://github.com/libpnet/libpnet/issues/449', 'url': 'https://github.com/libpnet/libpnet/issues/449'}",6MEDIUM,Local,LowPrivileges requiredHighUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,High,None,Unchanged,None,High,High,Local,LowPrivileges requiredHighUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,High,None,Unchanged,None,High,High,CVSS:3.0/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:H,>=0.27.2,Version,<0.27.2,"Affected versions of this crate were optimized out by compiler,
which caused dereference of uninitialized file descriptor which caused segfault. Advisory available underCC0-1.0license.",pnet;;transport;;icmptransportchanneliterator,<0.27.2
MEDIUM,Malicious input could cause uninitialized memory to be exposed,"August 25, 2018","October  1, 2020(last modified: June 13, 2023)",claxon(crates.io),/packages/claxon.html,Vulnerability,,"{'text': 'CVE-2018-20992', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20992'}, {'text': 'GHSA-8c6g-4xc5-w96c', 'url': 'https://github.com/advisories/GHSA-8c6g-4xc5-w96c'}","{'text': 'https://github.com/ruuda/claxon/commit/8f28ec275e412dd3af4f3cda460605512faf332c', 'url': 'https://github.com/ruuda/claxon/commit/8f28ec275e412dd3af4f3cda460605512faf332c'}",6.5MEDIUM,Network,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,Required,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,Required,Unchanged,High,None,None,CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N,^0.3.2>=0.4.1,"Affected versions of Claxon made an invalid assumption about the decode buffer
size being a multiple of a value read from the bitstream. This could cause parts
of the decode buffer to not be overwritten. If the decode buffer was newly
allocated and uninitialized, this uninitialized memory could be exposed. This allows an attacker to observe parts of the uninitialized memory in the
decoded audio stream. The flaw was corrected by checking that the value read from the bitstream divides
the decode buffer size, and returning a format error if it does not. If an error
is returned, the decode buffer is not exposed. Regression tests and an
additional fuzzer have been added to prevent similar flaws in the future. Advisory available underCC0-1.0license."
HIGH,Infinite decoding loop through specially crafted payload,"December  8, 2023","December  9, 2023",candid(crates.io),/packages/candid.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2023-6245', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-6245'}, {'text': 'GHSA-7787-p7x6-fq3j', 'url': 'https://github.com/advisories/GHSA-7787-p7x6-fq3j'}","{'text': 'https://github.com/dfinity/candid/pull/478', 'url': 'https://github.com/dfinity/candid/pull/478'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.9.10,"Rust canisters using candid< 0.9.0or>= 0.9.10, Rust canister interfaces of type other thanrecord { * }, Motoko based canisters, dfx (for asset canister)<= 0.14.3or>= 0.15.2",Version,">=0.9.0, <0.9.10","The Candid library causes a Denial of Service while parsing a specially crafted payload withemptydata type. For example, if the payload isrecord { * ; empty }and  the canister interface expectsrecord { * }then the rust candid decoder treatsemptyas an extra field required by the type.  The problem with typeemptyis that the candid rust library wrongly categorizesemptyas a recoverable error when skipping the field and thus causing an infinite decoding loop. Canisters using affected versions of candid are exposed to denial of service by causing the decoding to run indefinitely until the canister traps due to reaching maximum instruction limit per execution round. Repeated exposure to the payload will result in degraded performance of the canister. For asset canister users,dfxversions>= 0.14.4to<= 0.15.2-beta.0ships asset canister with an affected version of candid.","GitHub Security Advisory (GHSA-7787-p7x6-fq3j), {'text': 'GitHub Security Advisory (GHSA-7787-p7x6-fq3j)', 'url': 'https://github.com/dfinity/candid/security/advisories/GHSA-7787-p7x6-fq3j'}, dfinity/candid/pull/478, {'text': 'dfinity/candid/pull/478', 'url': 'https://github.com/dfinity/candid/pull/478'}, Candid Library Reference, {'text': 'Candid Library Reference', 'url': 'https://internetcomputer.org/docs/current/references/candid-ref'}, Candid Specification, {'text': 'Candid Specification', 'url': 'https://github.com/dfinity/candid/blob/master/spec/Candid.md'}, Internet Computer Specification, {'text': 'Internet Computer Specification', 'url': 'https://internetcomputer.org/docs/current/references/ic-interface-spec'}, Advisory available underCC0-1.0license., {'text': 'CC0-1.0', 'url': 'https://spdx.org/licenses/CC0-1.0.html'}",candid;;decode,">=0.9.0, <0.9.10"
HIGH,Tungstenite allows remote attackers to cause a denial of service,"September 25, 2023","September 29, 2023",tungstenite(crates.io),/packages/tungstenite.html,Vulnerability,denial-of-service,"{'text': 'CVE-2023-43669', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-43669'}, {'text': 'GHSA-9mcr-873m-xcxp', 'url': 'https://github.com/advisories/GHSA-9mcr-873m-xcxp'}","{'text': 'https://github.com/snapview/tungstenite-rs/issues/376', 'url': 'https://github.com/snapview/tungstenite-rs/issues/376'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.20.1,"The Tungstenite crate through 0.20.0 for Rust allows remote attackers to cause
a denial of service (minutes of CPU consumption) via an excessive length of an
HTTP header in a client handshake. The length affects both how many times a parse
is attempted (e.g., thousands of times) and the average amount of data for each
parse attempt (e.g., millions of bytes). Advisory available underCC0-1.0license."
HIGH,Denial of service in Quinn servers,"September 21, 2023","September 21, 2023",quinn-proto(crates.io),/packages/quinn-proto.html,Vulnerability,denial-of-service,,"{'text': 'GHSA-q8wc-j5m9-27w3', 'url': 'https://github.com/advisories/GHSA-q8wc-j5m9-27w3'}","{'text': 'https://github.com/quinn-rs/quinn/pull/1667', 'url': 'https://github.com/quinn-rs/quinn/pull/1667'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,^0.9.5>=0.10.5,"Receiving QUIC frames containing a frame with unknown frame type could lead to a panic.
Unfortunately this is issue was not found by our fuzzing infrastructure. Thanks to the QUIC Tester research group for reporting this issue. Advisory available underCC0-1.0license."
HIGH,BER/CER/DER decoder panics on invalid input,"September 13, 2023","September 13, 2023",bcder(crates.io),/packages/bcder.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2023-39914', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-39914'}","{'text': 'https://nlnetlabs.nl/downloads/bcder/CVE-2023-39914.txt', 'url': 'https://nlnetlabs.nl/downloads/bcder/CVE-2023-39914.txt'}, {'text': 'https://github.com/NLnetLabs/bcder/pull/74', 'url': 'https://github.com/NLnetLabs/bcder/pull/74'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.7.3,"Due to insufficient checking of input data, decoding certain data sequences
can lead tobcderpanicking rather than returning an error. This can affect
both the actual decoding stage as well as accessing content of types that
utilized delayed decoding. bcder 0.7.3 fixes these issues by more thoroughly checking inputs and
returning errors as expected. Advisory available underCC0-1.0license."
HIGH,rustls-webpki: CPU denial of service in certificate path building,"August 22, 2023","August 22, 2023(last modified: August 27, 2023)",rustls-webpki(crates.io),/packages/rustls-webpki.html,Vulnerability,denial-of-service,,"{'text': 'GHSA-fh2r-99q2-6mmg', 'url': 'https://github.com/advisories/GHSA-fh2r-99q2-6mmg'}",CVE-2018-16875,7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,">=0.100.2, <0.101.0>=0.101.4","When this crate is given a pathological certificate chain to validate, it will
spend CPU time exponential with the number of candidate certificates at each
step of path building. Both TLS clients and TLS servers that accept client certificate are affected. We now give each path building operation a budget of 100 signature verifications. The originalwebpkicrate is also affected. This was previously reported in the original cratehttps://github.com/briansmith/webpki/issues/69and re-reported to us
recently by Luke Malinowski. Advisory available underCC0-1.0license."
HIGH,webpki: CPU denial of service in certificate path building,"August 22, 2023","August 22, 2023(last modified: September 30, 2023)",webpki(crates.io),/packages/webpki.html,Vulnerability,denial-of-service,,"{'text': 'GHSA-8qv2-5vq6-g2g7', 'url': 'https://github.com/advisories/GHSA-8qv2-5vq6-g2g7'}",CVE-2018-16875,7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.22.2,"When this crate is given a pathological certificate chain to validate, it will
spend CPU time exponential with the number of candidate certificates at each
step of path building. Both TLS clients and TLS servers that accept client certificate are affected. This was previously reported inhttps://github.com/briansmith/webpki/issues/69and re-reported recently
by Luke Malinowski. webpki 0.22.1 included a partial fix and webpki 0.22.2 added further fixes. Advisory available underCC0-1.0license."
HIGH,libsqlite3-sysvia C SQLite CVE-2022-35737,"August  3, 2022","February 14, 2023(last modified: June 13, 2023)",libsqlite3-sys(crates.io),/packages/libsqlite3-sys.html,Vulnerability,"denial-of-service, code-execution","{'text': 'CVE-2022-35737', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35737'}, {'text': 'GHSA-jw36-hf63-69r9', 'url': 'https://github.com/advisories/GHSA-jw36-hf63-69r9'}","{'text': 'https://nvd.nist.gov/vuln/detail/CVE-2022-35737', 'url': 'https://nvd.nist.gov/vuln/detail/CVE-2022-35737'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.25.1,"It was sometimes possible for SQLite versions >= 1.0.12, < 3.39.2 to allow an array-bounds overflow when large string were input into SQLite'sprintffunction. Aslibsqlite3-sysbundles SQLite, it is susceptible to the vulnerability.libsqlite3-syswas updated to bundle the patched version of SQLitehere. Advisory available underCC0-1.0license."
HIGH,Slack OAuth Secrets leak in debug logs,"July 22, 2022","February  2, 2023",slack-morphism(crates.io),/packages/slack-morphism.html,Vulnerability,"{'text': 'CVE-2022-31162', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-31162'}, {'text': 'GHSA-99j7-mhfh-w84p', 'url': 'https://github.com/advisories/GHSA-99j7-mhfh-w84p'}","{'text': 'https://github.com/abdolence/slack-morphism-rust/pull/133', 'url': 'https://github.com/abdolence/slack-morphism-rust/pull/133'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=0.41.0,Debug log formatting made it possible to leak OAuth secrets into debug logs. The patched version has introduced more strict checks to avoid this. Advisory available underCC0-1.0license.
HIGH,evm incorrect state transition,"October 25, 2022","February  2, 2023",evm(crates.io),/packages/evm.html,Vulnerability,crypto-failure,"{'text': 'CVE-2022-39354', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39354'}, {'text': 'GHSA-hhc4-47rh-cr34', 'url': 'https://github.com/advisories/GHSA-hhc4-47rh-cr34'}","{'text': 'https://github.com/rust-blockchain/evm/pull/133', 'url': 'https://github.com/rust-blockchain/evm/pull/133'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,>=0.36.0,"SputnikVM, also called evm, is a Rust implementation of Ethereum Virtual Machine. A custom stateful precompile can use theis_staticparameter to determine if
the call is executed in a static context (viaSTATICCALL), and thus decide
if stateful operations should be done. Prior to version 0.36.0, the passedis_staticparameter was incorrect -- it
was only set totrueif the call came from a directSTATICCALLopcode. However, once a static call context is entered, it should stay static. The issue
only impacts custom precompiles that actually usesis_static. For those affected, the issue can lead to possible incorrect state transitions. Advisory available underCC0-1.0license."
HIGH,matrix-sdk Impersonation of room keys,"September 29, 2022","February  2, 2023",matrix-sdk-crypto(crates.io),/packages/matrix-sdk-crypto.html,Vulnerability,"{'text': 'CVE-2022-39252', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39252'}, {'text': 'GHSA-vp68-2wrm-69qm', 'url': 'https://github.com/advisories/GHSA-vp68-2wrm-69qm'}","{'text': 'https://github.com/matrix-org/matrix-rust-sdk/commit/093fb5d0aa21c0b5eaea6ec96b477f1075271cbb', 'url': 'https://github.com/matrix-org/matrix-rust-sdk/commit/093fb5d0aa21c0b5eaea6ec96b477f1075271cbb'}, {'text': 'https://github.com/matrix-org/matrix-rust-sdk/commit/41449d2cc360e347f5d4e1c154ec1e3185f11acd', 'url': 'https://github.com/matrix-org/matrix-rust-sdk/commit/41449d2cc360e347f5d4e1c154ec1e3185f11acd'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,>=0.6.0,"When the user receives a forwarded room key, the software accepts it without
checking who the room key came from. This allows homeservers to try to insert
room keys of questionable validity, potentially mounting an impersonation attack. Advisory available underCC0-1.0license."
HIGH,libp2p Lack of resource management DoS,"July 12, 2022","February  2, 2023",libp2p(crates.io),/packages/libp2p.html,Vulnerability,denial-of-service,"{'text': 'CVE-2022-23486', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23486'}, {'text': 'GHSA-jvgw-gccv-q5p8', 'url': 'https://github.com/advisories/GHSA-jvgw-gccv-q5p8'}","{'text': 'https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8', 'url': 'https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.45.1,"libp2p allows a potential attacker to cause victim p2p node to run out of memory The out of memory failure can cause crashes where libp2p is intended to be used
within large scale networks leading to potential Denial of Service (DoS) vector Users should upgrade or reference theDoS mitigation strategies. Advisory available underCC0-1.0license."
HIGH,Bug in Wasmtime implementation of pooling instance allocator,"November 10, 2022","January 12, 2023(last modified: March 16, 2023)",wasmtime(crates.io),/packages/wasmtime.html,Vulnerability,"memory-corruption, memory-exposure",,"{'text': 'CVE-2022-39392', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39392'}, {'text': 'GHSA-44mr-8vmm-wjhg', 'url': 'https://github.com/advisories/GHSA-44mr-8vmm-wjhg'}","{'text': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg', 'url': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg'}, {'text': 'https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72', 'url': 'https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72'}",7.4HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityNone,None,None,Unchanged,High,High,None,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityNone,None,None,Unchanged,High,High,None,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N,">=1.0.2, <2.0.0>=2.0.2",Version,<1.0.2,">=2.0.0, <2.0.2","Bug in Wasmtime's implementation of its pooling instance allocator when the allocator is configured to give WebAssembly instances a maximum of zero pages of memory. In this configuration, the virtual memory mapping for WebAssembly memories did not meet the compiler-required configuration requirements for safely executing WebAssembly modules. Wasmtime's default settings require virtual memory page faults to indicate that wasm reads/writes are out-of-bounds, but the pooling allocator's configuration would not create an appropriate virtual memory mapping for this meaning out of bounds reads/writes can successfully read/write memory unrelated to the wasm sandbox within range of the base address of the memory mapping created by the pooling allocator. This bug is not applicable with the default settings of thewasmtimecrate. This bug can only be triggered by settingInstanceLimits::memory_pagesto zero. This is expected to be a very rare configuration since this means that wasm modules cannot allocate any pages of linear memory. All wasm modules produced by all current toolchains are highly likely to use linear memory, so it's expected to be unlikely that this configuration is set to zero by any production embedding of Wasmtime. Advisory available underCC0-1.0license.",wasmtime;;config;;allocation_strategy,<1.0.2
HIGH,Denial of Service from unchecked request length,"October 30, 2022","November  3, 2022",conduit-hyper(crates.io),/packages/conduit-hyper.html,Vulnerability,denial-of-service,"{'text': 'GHSA-9398-5ghf-7pr6', 'url': 'https://github.com/advisories/GHSA-9398-5ghf-7pr6'}, {'text': 'CVE-2022-39294', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39294'}","{'text': 'https://github.com/conduit-rust/conduit-hyper/security/advisories/GHSA-9398-5ghf-7pr6', 'url': 'https://github.com/conduit-rust/conduit-hyper/security/advisories/GHSA-9398-5ghf-7pr6'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.4.2,<0.2.0-alpha.3,"Prior to version 0.4.2,conduit-hyperdid not check any limit on a request's
length before callinghyper::body::to_bytes. An attacker could send a
malicious request with an abnormally largeContent-Length, which could lead
to a panic if memory allocation failed for that request. In version 0.4.2,conduit-hypersets an internal limit of 128 MiB per
request, otherwise returning status 400 (""Bad Request""). Advisory available underCC0-1.0license."
HIGH,Multiple vulnerabilities resulting in out-of-bounds writes,"September  7, 2022","October 30, 2022(last modified: June 13, 2023)",linked_list_allocator(crates.io),/packages/linked_list_allocator.html,Vulnerability,memory-corruption,"{'text': 'CVE-2022-36086', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36086'}, {'text': 'GHSA-xg8p-34w2-j49j', 'url': 'https://github.com/advisories/GHSA-xg8p-34w2-j49j'}","{'text': 'https://github.com/advisories/GHSA-xg8p-34w2-j49j', 'url': 'https://github.com/advisories/GHSA-xg8p-34w2-j49j'}",8.4HIGH,Local,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Local,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.10.2,Advisory available underCC0-1.0license.
HIGH,Denial of service on deeply nested fragment requests,"July 28, 2022","August  3, 2022",juniper(crates.io),/packages/juniper.html,Vulnerability,denial-of-service,"{'text': 'GHSA-4rx6-g5vg-5f3j', 'url': 'https://github.com/advisories/GHSA-4rx6-g5vg-5f3j'}, {'text': 'CVE-2022-31173', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-31173'}","{'text': 'https://github.com/graphql-rust/juniper/security/advisories/GHSA-4rx6-g5vg-5f3j', 'url': 'https://github.com/graphql-rust/juniper/security/advisories/GHSA-4rx6-g5vg-5f3j'}",GHSA-xq3c-8gqm-v648,7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.15.10,Deeply nested fragments in a GraphQL request may cause a stack overflow in the server. Advisory available underCC0-1.0license.
HIGH,Denial of service on deeply nested fragment requests,"July 21, 2022","August  3, 2022(last modified: August  6, 2022)",async-graphql(crates.io),/packages/async-graphql.html,Vulnerability,denial-of-service,"{'text': 'GHSA-xq3c-8gqm-v648', 'url': 'https://github.com/advisories/GHSA-xq3c-8gqm-v648'}","{'text': 'https://github.com/async-graphql/async-graphql/commit/521769b80039fc8043d1c9883e3d6e5b57359072', 'url': 'https://github.com/async-graphql/async-graphql/commit/521769b80039fc8043d1c9883e3d6e5b57359072'}",GHSA-4rx6-g5vg-5f3j,7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=4.0.6,Deeply nested fragments in a GraphQL request may cause a stack overflow in the server. Advisory available underCC0-1.0license.
HIGH,Resource leakage when decoding certificates and keys,"May  3, 2022","May 19, 2022(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2022-1473', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-1473'}, {'text': 'GHSA-g323-fr93-4j3c', 'url': 'https://github.com/advisories/GHSA-g323-fr93-4j3c'}","{'text': 'https://www.openssl.org/news/secadv/20220503.txt', 'url': 'https://www.openssl.org/news/secadv/20220503.txt'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=300.0.6,<300.0,"TheOPENSSL_LH_flush()function, which empties a hash table, contains
a bug that breaks reuse of the memory occupied by the removed hash
table entries. This function is used when decoding certificates or keys. If a long lived
process periodically decodes certificates or keys its memory usage will
expand without bounds and the process might be terminated by the operating
system causing a denial of service. Also traversing the empty hash table
entries will take increasingly more time. Typically such long lived processes might be TLS clients or TLS servers
configured to accept client certificate authentication. Advisory available underCC0-1.0license."
HIGH,Regexes with large repetitions on empty sub-expressions take a very long time to parse,"March  8, 2022","March  8, 2022(last modified: June 13, 2023)",regex(crates.io),/packages/regex.html,Vulnerability,denial-of-service,"{'text': 'CVE-2022-24713', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24713'}, {'text': 'GHSA-m5pq-gvj9-9vr8', 'url': 'https://github.com/advisories/GHSA-m5pq-gvj9-9vr8'}","{'text': 'https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw', 'url': 'https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=1.5.5,"The Rust Security Response WG was notified that theregexcrate did not
properly limit the complexity of the regular expressions (regex) it parses. An
attacker could use this security issue to perform a denial of service, by
sending a specially crafted regex to a service accepting untrusted regexes. No
known vulnerability is present when parsing untrusted input with trusted
regexes. This issue has been assigned CVE-2022-24713. The severity of this vulnerability
is ""high"" when theregexcrate is used to parse untrusted regexes. Other uses
of theregexcrate are not affected by this vulnerability. Theregexcrate features built-in mitigations to prevent denial of service
attacks caused by untrusted regexes, or untrusted input matched by trusted
regexes. Those (tunable) mitigations already provide sane defaults to prevent
attacks. This guarantee is documented and it's considered part of the crate's
API. Unfortunately a bug was discovered in the mitigations designed to prevent
untrusted regexes to take an arbitrary amount of time during parsing, and it's
possible to craft regexes that bypass such mitigations. This makes it possible
to perform denial of service attacks by sending specially crafted regexes to
services accepting user-controlled, untrusted regexes. All versions of theregexcrate before or equal to 1.5.4 are affected by this
issue. The fix is include starting fromregex1.5.5. We recommend everyone accepting user-controlled regexes to upgrade immediately
to the latest version of theregexcrate. Unfortunately there is no fixed set of problematic regexes, as there are
practically infinite regexes that could be crafted to exploit this
vulnerability. Because of this, we do not recommend denying known problematic
regexes. We want to thank Addison Crump for responsibly disclosing this to us according
to theRust security policy, and for helping review the fix. We also want to thank Andrew Gallant for developing the fix, and Pietro Albini
for coordinating the disclosure and writing this advisory. Advisory available underCC0-1.0license."
HIGH,Time-of-check time-of-use race condition can allow attacker to delete files they do not have access to delete,"January 16, 2022","January 21, 2022",std,/packages/std.html,Vulnerability,file-disclosure,"{'text': 'https://blog.rust-lang.org/2022/01/20/cve-2022-21658.html', 'url': 'https://blog.rust-lang.org/2022/01/20/cve-2022-21658.html'}",7.3HIGH,Local,LowPrivileges requiredLowUser interactionNoneScopeChangedConfidentialityNoneIntegrityLowAvailabilityHigh,Low,None,Changed,None,Low,High,Local,LowPrivileges requiredLowUser interactionNoneScopeChangedConfidentialityNoneIntegrityLowAvailabilityHigh,Low,None,Changed,None,Low,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:N/I:L/A:H,>=1.58.1,Version,<1.58.1,"In the standard library in Rust before 1.58.1, an attacker with unprivileged access to a system could trick a privileged program usingstd::fs::remove_dir_allinto deleting files they don't have access to delete by creating a symlink in a directory that would be removed by astd::fs::remove_dir_allcall due to a Time-of-check time-of-use race condition around this function's check for symbolic links. The function should remove the symbolic links rather than recursively deleting the linked file or directory. Advisory available underCC0-1.0license.",std;;fs;;remove_dir_all,<1.58.1
HIGH,Improper Synchronization and Race Condition in vm-memory,"June  2, 2020","September 10, 2021",vm-memory(crates.io),/packages/vm-memory.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-13759', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-13759'}, {'text': 'GHSA-mm4m-qg48-f7wc', 'url': 'https://github.com/advisories/GHSA-mm4m-qg48-f7wc'}","{'text': 'https://nvd.nist.gov/vuln/detail/CVE-2020-13759', 'url': 'https://nvd.nist.gov/vuln/detail/CVE-2020-13759'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.2.1^0.1.1,rust-vmm vm-memory before 0.1.1 and 0.2.x before 0.2.1 allows attackers to cause a denial of service (loss of IP networking) because read_obj and write_obj do not properly access memory. This affects aarch64 (with musl or glibc) and x86_64 (with musl). Advisory available underCC0-1.0license.
HIGH,Relative Path Traversal in git-delta,"July 12, 2021","September  9, 2021(last modified: September 10, 2021)",git-delta(crates.io),/packages/git-delta.html,Vulnerability,file-disclosure,"{'text': 'CVE-2021-36376', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36376'}, {'text': 'GHSA-5xg3-j2j6-rcx4', 'url': 'https://github.com/advisories/GHSA-5xg3-j2j6-rcx4'}","{'text': 'https://nvd.nist.gov/vuln/detail/CVE-2021-36376', 'url': 'https://nvd.nist.gov/vuln/detail/CVE-2021-36376'}",7.8HIGH,Local,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,Required,Unchanged,High,High,High,Local,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,Required,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H,>=0.8.3,windows,git-delta before 0.8.3 on Windows resolves an executable's pathname as a relative path from the current directory. Advisory available underCC0-1.0license.
HIGH,Uncontrolled Search Path Element in sharkdp/bat,"July 15, 2021","September  9, 2021(last modified: September 10, 2021)",bat(crates.io),/packages/bat.html,Vulnerability,code-execution,"{'text': 'CVE-2021-36753', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36753'}, {'text': 'GHSA-p24j-h477-76q3', 'url': 'https://github.com/advisories/GHSA-p24j-h477-76q3'}","{'text': 'https://nvd.nist.gov/vuln/detail/CVE-2021-36753', 'url': 'https://nvd.nist.gov/vuln/detail/CVE-2021-36753'}",7.8HIGH,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H,>=0.18.2,windows,bat on windows before 0.18.2 executes programs named less.exe from the current working directory. This can lead to unintended code execution. Advisory available underCC0-1.0license.
HIGH,Permissions bypass in pleaser,"May 27, 2021","September  9, 2021(last modified: September 10, 2021)",pleaser(crates.io),/packages/pleaser.html,Vulnerability,privilege-escalation,"{'text': 'CVE-2021-31154', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-31154'}, {'text': 'GHSA-pp74-39w2-v4w9', 'url': 'https://github.com/advisories/GHSA-pp74-39w2-v4w9'}","{'text': 'https://nvd.nist.gov/vuln/detail/CVE-2021-31154', 'url': 'https://nvd.nist.gov/vuln/detail/CVE-2021-31154'}",7.8HIGH,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H,>=0.4,pleaseedit in pleaser before 0.4 uses predictable temporary filenames in /tmp and the target directory. This allows a local attacker to gain full root privileges by staging a symlink attack. Advisory available underCC0-1.0license.
HIGH,Permissions bypass in pleaser,"May 27, 2021","September  9, 2021(last modified: September 10, 2021)",pleaser(crates.io),/packages/pleaser.html,Vulnerability,privilege-escalation,"{'text': 'CVE-2021-31155', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-31155'}, {'text': 'GHSA-vc5p-j8vw-mc6x', 'url': 'https://github.com/advisories/GHSA-vc5p-j8vw-mc6x'}","{'text': 'https://nvd.nist.gov/vuln/detail/CVE-2021-31155', 'url': 'https://nvd.nist.gov/vuln/detail/CVE-2021-31155'}",7.8HIGH,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H,>=0.4,Failure to normalize the umask in pleaser before 0.4 allows a local attacker to gain full root privileges if they are allowed to execute at least one command. Advisory available underCC0-1.0license.
HIGH,Read buffer overruns processing ASN.1 strings,"August 24, 2021","August 24, 2021(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,"denial-of-service, crypto-failure","{'text': 'CVE-2021-3712', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-3712'}, {'text': 'GHSA-q9wj-f4qw-6vfj', 'url': 'https://github.com/advisories/GHSA-q9wj-f4qw-6vfj'}","{'text': 'https://www.openssl.org/news/secadv/20210824.txt', 'url': 'https://www.openssl.org/news/secadv/20210824.txt'}",7.4HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityHigh,None,None,Unchanged,High,None,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityHigh,None,None,Unchanged,High,None,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:H,>=111.16,"ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING
structure which contains a buffer holding the string data and a field holding
the buffer length. This contrasts with normal C strings which are represented as
a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's
own ""d2i"" functions (and other similar parsing functions) as well as any string
whose value has been set with the ASN1_STRING_set() function will additionally
NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING
structures which do not NUL terminate the byte array by directly setting the
""data"" and ""length"" fields in the ASN1_STRING array. This can also happen by
using theASN1_STRING_set0()function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that
the ASN1_STRING byte array will be NUL terminated, even though this is not
guaranteed for strings that have been directly constructed. Where an application
requests an ASN.1 structure to be printed, and where that ASN.1 structure
contains ASN1_STRINGs that have been directly constructed by the application
without NUL terminating the ""data"" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates
(for example if a certificate has been directly constructed by the application
instead of loading it via the OpenSSL parsing functions, and the certificate
contains non NUL terminated ASN1_STRING structures). It can also occur in theX509_get1_email(),X509_REQ_get1_email()andX509_get1_ocsp()functions. If a malicious actor can cause an application to directly construct an
ASN1_STRING and then process it through one of the affected OpenSSL functions
then this issue could be hit. This might result in a crash (causing a Denial of
Service attack). It could also result in the disclosure of private memory
contents (such as private keys, or sensitive plaintext). Advisory available underCC0-1.0license."
HIGH,Potential request smuggling capabilities due to lack of input validation,"June 16, 2021","August 10, 2021(last modified: June 13, 2023)",actix-http(crates.io),/packages/actix-http.html,Vulnerability,,"{'text': 'CVE-2021-38512', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38512'}, {'text': 'GHSA-8928-2fgm-6x9x', 'url': 'https://github.com/advisories/GHSA-8928-2fgm-6x9x'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,^2.2.1>=3.0.0-beta.9,"Affected versions of this crate did not properly detect invalid requests that could allow HTTP/1 request smuggling (HRS) attacks when running alongside a vulnerable front-end proxy server. This can result in leaked internal and/or user data, including credentials, when the front-end proxy is also vulnerable. Popular front-end proxies and load balancers already mitigate HRS attacks so it is recommended that they are also kept up to date; check your specific set up. You should upgrade even if the front-end proxy receives exclusively HTTP/2 traffic and connects to the back-end using HTTP/1; several downgrade attacks are known that can also expose HRS vulnerabilities. Advisory available underCC0-1.0license."
HIGH,Links in archive can create arbitrary directories,"July 19, 2021","August  8, 2021(last modified: June 13, 2023)",tar(crates.io),/packages/tar.html,Vulnerability,"{'text': 'CVE-2021-38511', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38511'}, {'text': 'GHSA-62jx-8vmh-4mcw', 'url': 'https://github.com/advisories/GHSA-62jx-8vmh-4mcw'}","{'text': 'https://github.com/alexcrichton/tar-rs/issues/238', 'url': 'https://github.com/alexcrichton/tar-rs/issues/238'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,>=0.4.36,Version,<0.4.36,"When unpacking a tarball that contains a symlink thetarcrate may create
directories outside of the directory it's supposed to unpack into. The function errors when it's trying to create a file, but the folders are
already created at this point. This has been fixed in https://github.com/alexcrichton/tar-rs/pull/259 and is
published astar0.4.36. Thanks to Martin Michaelis (@mgjm) for discovering
and reporting this, and Nikhil Benesch (@benesch) for the fix! Advisory available underCC0-1.0license.",tar;;archive;;unpack,<0.4.36
HIGH,Memory access due to code generation flaw in Cranelift module,"May 21, 2021","May 22, 2021(last modified: October 19, 2021)",cranelift-codegen(crates.io),/packages/cranelift-codegen.html,Vulnerability,"code-execution, memory-corruption, memory-exposure",,"{'text': 'CVE-2021-32629', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-32629'}, {'text': 'GHSA-hpqh-2wqx-7qp5', 'url': 'https://github.com/advisories/GHSA-hpqh-2wqx-7qp5'}","{'text': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-hpqh-2wqx-7qp5', 'url': 'https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-hpqh-2wqx-7qp5'}",8.8HIGH,Local,LowPrivileges requiredLowUser interactionNoneScopeChangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Changed,High,High,High,Local,LowPrivileges requiredLowUser interactionNoneScopeChangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Changed,High,High,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H,>=0.73.1,x86,"There is a bug in 0.73.0 of the Cranelift x64 backend that can create a
scenario that could result in a potential sandbox escape in a WebAssembly
module. Users of versions 0.73.0 of Cranelift should upgrade to either 0.73.1
or 0.74 to remediate this vulnerability. Users of Cranelift prior to 0.73.0
should update to 0.73.1 or 0.74 if they were not using the old default backend. More details can be found in the GitHub Security Advisory at: https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-hpqh-2wqx-7qp5 Advisory available underCC0-1.0license."
HIGH,Integer overflow in CipherUpdate,"May  1, 2021","May  1, 2021(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2021-23840', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23840'}, {'text': 'GHSA-qgm6-9472-pwq7', 'url': 'https://github.com/advisories/GHSA-qgm6-9472-pwq7'}","{'text': 'https://www.openssl.org/news/secadv/20210216.txt', 'url': 'https://www.openssl.org/news/secadv/20210216.txt'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=111.14,"Calls toEVP_CipherUpdate,EVP_EncryptUpdateandEVP_DecryptUpdatemay overflow
the output length argument in some cases where the input length is close to the
maximum permissable length for an integer on the platform. In such cases the
return value from the function call will be 1 (indicating success), but the
output length value will be negative. This could cause applications to behave
incorrectly or crash. Advisory available underCC0-1.0license."
HIGH,CA certificate check bypass with X509_V_FLAG_X509_STRICT,"May  1, 2021","May  1, 2021(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,crypto-failure,"{'text': 'CVE-2021-3450', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-3450'}, {'text': 'GHSA-8hfj-xrj2-pm22', 'url': 'https://github.com/advisories/GHSA-8hfj-xrj2-pm22'}","{'text': 'https://www.openssl.org/news/secadv/20210325.txt', 'url': 'https://www.openssl.org/news/secadv/20210325.txt'}",7.4HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityNone,None,None,Unchanged,High,High,None,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityNone,None,None,Unchanged,High,High,None,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N,>=111.15,<111.11,"The X509_V_FLAG_X509_STRICT flag enables additional security checks of the
certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in
the chain that have explicitly encoded elliptic curve parameters was added
as an additional strict check. An error in the implementation of this check meant that the result of a
previous check to confirm that certificates in the chain are valid CA
certificates was overwritten. This effectively bypasses the check
that non-CA certificates must not be able to issue other certificates. If a ""purpose"" has been configured then there is a subsequent opportunity
for checks that the certificate is a valid CA.  All of the named ""purpose""
values implemented in libcrypto perform this check.  Therefore, where
a purpose is set the certificate chain will still be rejected even when the
strict flag has been used. A purpose is set by default in libssl client and
server certificate verification routines, but it can be overridden or
removed by an application. In order to be affected, an application must explicitly set the
X509_V_FLAG_X509_STRICT verification flag and either not set a purpose
for the certificate verification or, in the case of TLS client or server
applications, override the default purpose. Advisory available underCC0-1.0license."
HIGH,Archives may contain uninitialized memory,"April 28, 2021","April 29, 2021(last modified: June 13, 2023)",rkyv(crates.io),/packages/rkyv.html,Vulnerability,memory-exposure,,"{'text': 'CVE-2021-31919', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-31919'}, {'text': 'GHSA-w5cr-frph-hw7f', 'url': 'https://github.com/advisories/GHSA-w5cr-frph-hw7f'}","{'text': 'https://github.com/djkoloski/rkyv/issues/113', 'url': 'https://github.com/djkoloski/rkyv/issues/113'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=0.6.0,Version,<0.6.0,"rkyvis a serialization framework that writes struct-compatible memory to be stored or
transmitted. During serialization, struct padding bytes and unused enum bytes may not be
initialized. These bytes may be written to disk or sent over unsecured channels. Advisory available underCC0-1.0license.",rkyv;;archive;;resolve,<0.6.0
HIGH,swap_index can write out of bounds and return uninitialized memory,"February 24, 2021","March 31, 2021(last modified: June 13, 2023)",reorder(crates.io),/packages/reorder.html,Vulnerability,,"{'text': 'CVE-2021-29941', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29941'}, {'text': 'CVE-2021-29942', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29942'}, {'text': 'GHSA-3h87-v52r-p9rg', 'url': 'https://github.com/advisories/GHSA-3h87-v52r-p9rg'}, {'text': 'GHSA-jpwg-6gf5-5vh9', 'url': 'https://github.com/advisories/GHSA-jpwg-6gf5-5vh9'}","{'text': 'https://github.com/tiby312/reorder/issues/1', 'url': 'https://github.com/tiby312/reorder/issues/1'}",7.3HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityLow,None,None,Unchanged,Low,Low,Low,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityLow,None,None,Unchanged,Low,Low,Low,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L,>=1.1.0,"swap_indextakes an iterator and swaps the items with their corresponding
indexes. It reserves capacity and sets the length of the vector based on the.len()method of the iterator. If thelen()returned by the iterator is larger than the actual number of
elements yielded, thenswap_indexcreates a vector containing uninitialized
members. If thelen()returned by the iterator is smaller than the actual
number of members yielded, thenswap_indexcan write out of bounds past
its allocated vector. As noted by the Rust documentation,len()andsize_hint()are primarily meant for optimization and incorrect values
from their implementations should not lead to memory safety violations. A new version crate was pushed that marks this function as unsafe. reorder = ""1.1.0"" Previous versions have also been yanked from crates.io. Advisory available underCC0-1.0license."
HIGH,StackVec::extend can write out of bounds when size_hint is incorrect,"February 19, 2021","March 30, 2021(last modified: June 13, 2023)",stackvector(crates.io),/packages/stackvector.html,Vulnerability,memory-corruption,"{'text': 'CVE-2021-29939', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29939'}, {'text': 'GHSA-9frf-r7c7-j2vg', 'url': 'https://github.com/advisories/GHSA-9frf-r7c7-j2vg'}","{'text': 'https://github.com/Alexhuszagh/rust-stackvector/issues/2', 'url': 'https://github.com/Alexhuszagh/rust-stackvector/issues/2'}",7.3HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityLow,None,None,Unchanged,Low,Low,Low,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityLow,None,None,Unchanged,Low,Low,Low,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L,>=1.0.9,"StackVec::extendused the lower and upper bounds from an Iterator'ssize_hintto determine how many items to push into the stack based vector. If thesize_hintimplementation returned a lower bound that was larger than
the upper bound,StackVecwould write out of bounds and overwrite memory
on the stack. As mentioned by thesize_hintdocumentation,size_hintis mainly for optimization and incorrect
implementations should not lead to memory safety issues. Advisory available underCC0-1.0license."
HIGH,SliceDeque::drain_filter can double drop an element if the predicate panics,"February 19, 2021","March 30, 2021(last modified: June 13, 2023)",slice-deque(crates.io),/packages/slice-deque.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-29938', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29938'}, {'text': 'GHSA-p9gf-gmfv-398m', 'url': 'https://github.com/advisories/GHSA-p9gf-gmfv-398m'}","{'text': 'https://github.com/gnzlbg/slice_deque/issues/90', 'url': 'https://github.com/gnzlbg/slice_deque/issues/90'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,"Affected versions of the crate incremented the current index of the drain filter
iteratorbeforecalling the predicate functionself.pred. If the predicate function panics, it is possible for the last element in the
iterator to be dropped twice. Advisory available underCC0-1.0license."
HIGH,insert_many can drop elements twice on panic,"January 26, 2021","March 26, 2021(last modified: June 13, 2023)",insert_many(crates.io),/packages/insert_many.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-29933', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29933'}, {'text': 'GHSA-29hg-r7c7-54fr', 'url': 'https://github.com/advisories/GHSA-29hg-r7c7-54fr'}","{'text': 'https://github.com/rphmeier/insert_many/issues/1', 'url': 'https://github.com/rphmeier/insert_many/issues/1'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,"Affected versions ofinsert_manyusedptr::copyto move over items in a
vector to make space before inserting, duplicating their ownership. It then
iterated over a providedIteratorto insert the new items. If the iterator's.next()method panics then the vector would drop the same
elements twice. Advisory available underCC0-1.0license."
HIGH,Use after free possible inuri::Formatteron panic,"February  9, 2021","March 26, 2021(last modified: June 13, 2023)",rocket(crates.io),/packages/rocket.html,INFOUnsound,memory-corruption,,"{'text': 'CVE-2021-29935', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29935'}, {'text': 'GHSA-vcw4-8ph6-7vw8', 'url': 'https://github.com/advisories/GHSA-vcw4-8ph6-7vw8'}","{'text': 'https://github.com/SergioBenitez/Rocket/issues/1534', 'url': 'https://github.com/SergioBenitez/Rocket/issues/1534'}",7.3HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityLow,None,None,Unchanged,Low,Low,Low,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityLow,None,None,Unchanged,Low,Low,Low,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L,>=0.4.7,"Affected versions of this crate transmuted a&strto a&'static strbefore
pushing it into aStackVec, this value was then popped later in the same
function. This was assumed to be safe because the reference would be valid while the
method's stack was active. In between the push and the pop, however, a functionfwas called that could invoke a user provided function. If the user provided panicked, then the assumption used by the function was no
longer true and the transmute to&'staticwould create an illegal static
reference to the string. This could result in a freed string being used during
(such as in aDropimplementation) or after (e.g throughcatch_unwind) the
panic unwinding. This flaw was corrected in commite325e2fby using a guard object to ensure that the&'static strwas dropped inside
the function. Advisory available underCC0-1.0license."
HIGH,PartialReader passes uninitialized memory to user-provided Read,"February 17, 2021","March 26, 2021(last modified: June 13, 2023)",uu_od(crates.io),/packages/uu_od.html,Vulnerability,memory-exposure,"{'text': 'CVE-2021-29934', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29934'}, {'text': 'GHSA-w9vv-q986-vj7x', 'url': 'https://github.com/advisories/GHSA-w9vv-q986-vj7x'}","{'text': 'https://github.com/uutils/coreutils/issues/1729', 'url': 'https://github.com/uutils/coreutils/issues/1729'}",7.3HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityLow,None,None,Unchanged,Low,Low,Low,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityLowIntegrityLowAvailabilityLow,None,None,Unchanged,Low,Low,Low,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L,>=0.0.4,"Affected versions of this crate passed an uniniitalized buffer to a
user-providedReadinstance inPartialReader::read. This can result in safeReadimplementations reading from the uninitialized
buffer leading to undefined behavior. The flaw was fixed in commit39d62c6by zero-initializing the passed buffer. Advisory available underCC0-1.0license."
HIGH,Denial of service through parsing payloads with too big exponent,"March 18, 2021","March 24, 2021(last modified: June 13, 2023)",parse_duration(crates.io),/packages/parse_duration.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2021-29932', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29932'}, {'text': 'GHSA-qpgv-g792-wh6x', 'url': 'https://github.com/advisories/GHSA-qpgv-g792-wh6x'}","{'text': 'https://github.com/zeta12ti/parse_duration/issues/21', 'url': 'https://github.com/zeta12ti/parse_duration/issues/21'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,Version,*,"Theparse_duration::parsefunction allows for parsing duration strings with exponents like5e5swhere under the hood, theBigInttype along with thepowfunction are used for such payloads. Passing an arbitrarily big exponent makes theparse_duration::parsefunction to process the payload for a very long time taking up CPU and memory. This allows an attacker to cause a DoS if theparse_duration::parsefunction is used to process untrusted input. Advisory available underCC0-1.0license.",parse_duration;;parse,*
HIGH,panic safety: double drop or uninitialized drop of T upon panic,"January 12, 2021","March  7, 2021(last modified: June 13, 2023)",arenavec(crates.io),/packages/arenavec.html,Vulnerability,memory-corruption,"{'text': 'CVE-2021-29930', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29930'}, {'text': 'CVE-2021-29931', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29931'}, {'text': 'GHSA-327x-39hh-65wf', 'url': 'https://github.com/advisories/GHSA-327x-39hh-65wf'}, {'text': 'GHSA-955p-rc5h-hg6h', 'url': 'https://github.com/advisories/GHSA-955p-rc5h-hg6h'}","{'text': 'https://github.com/ibabushkin/arenavec/issues/1', 'url': 'https://github.com/ibabushkin/arenavec/issues/1'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,"Affected versions of this crate did not guard against potential panics that may happen from user-provided functionsT::default()andT::drop(). Panic withinT::default()leads to dropping uninitializedT, when it is invoked fromcommon::Slice::<T, H>::new().
Panic withinT::drop()leads to double drop ofT, when it is invoked either fromcommon::SliceVec::<T, H>::resize_with()orcommon::SliceVec::<T, H>::resize() Either case causes memory corruption in the heap memory. Advisory available underCC0-1.0license."
HIGH,panic in user-providedEndianimpl triggers double drop of T,"January  4, 2021","March  7, 2021(last modified: June 13, 2023)",endian_trait(crates.io),/packages/endian_trait.html,Vulnerability,memory-corruption,"{'text': 'CVE-2021-29929', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29929'}, {'text': 'GHSA-vpw8-43wm-rxw5', 'url': 'https://github.com/advisories/GHSA-vpw8-43wm-rxw5'}","{'text': 'https://gitlab.com/myrrlyn/endian_trait/-/issues/1', 'url': 'https://gitlab.com/myrrlyn/endian_trait/-/issues/1'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,"Affected versions of the crate does not guard against panic from user-provided impl ofEndiantrait, which is a safe trait that users can implement.
If a user-provided implementation of theEndiantrait panics, double-drop is triggered due to the duplicated ownership ofTcreated byptr::read(). Double-drop (or double free) can cause memory corruption in the heap. Advisory available underCC0-1.0license."
HIGH,quinninvalidly assumes the memory layout of std::net::SocketAddr,"March  4, 2021","March  4, 2021(last modified: June 13, 2023)",quinn(crates.io),/packages/quinn.html,INFOUnsound,,"{'text': 'CVE-2021-28036', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28036'}, {'text': 'GHSA-fhv4-fx3v-77w6', 'url': 'https://github.com/advisories/GHSA-fhv4-fx3v-77w6'}","{'text': 'https://github.com/quinn-rs/quinn/issues/968', 'url': 'https://github.com/quinn-rs/quinn/issues/968'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,^0.5.4^0.6.2>=0.7.0,"Thequinncrate has assumedstd::net::SocketAddrV4andstd::net::SocketAddrV6have the same memory layout as the system C representationsockaddr. It has simply casted the pointers to convert the socket addresses to the
system representation. The standard library does not say anything about the memory
layout, and this will cause invalid memory access if the standard library
changes the implementation. No warnings or errors will be emitted once the
change happens. Advisory available underCC0-1.0license."
HIGH,Tape::take_bytes exposes uninitialized memory to a user-provided Read,"February 17, 2021","March  1, 2021(last modified: June 13, 2023)",truetype(crates.io),/packages/truetype.html,Vulnerability,memory-exposure,"{'text': 'CVE-2021-28030', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28030'}, {'text': 'GHSA-v7q4-97x4-4qw2', 'url': 'https://github.com/advisories/GHSA-v7q4-97x4-4qw2'}","{'text': 'https://github.com/bodoni/truetype/issues/11', 'url': 'https://github.com/bodoni/truetype/issues/11'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=0.30.1,"Affected versions of this crate passed an unininitialized buffer to a
user-providedReadinstance inTape::take_bytes. This can result in safeReadimplementations reading from the uninitialized
buffer leading to undefined behavior. The flaw was corrected in commit1f2dc7f37ddby removing the unsafe block
and zero-initializing the buffer. Advisory available underCC0-1.0license."
HIGH,arr! macro erases lifetimes,"April  9, 2020","March  1, 2021(last modified: June 13, 2023)",generic-array(crates.io),/packages/generic-array.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2020-36465', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36465'}, {'text': 'GHSA-3358-4f7f-p4j4', 'url': 'https://github.com/advisories/GHSA-3358-4f7f-p4j4'}","{'text': 'https://github.com/fizyk20/generic-array/issues/98', 'url': 'https://github.com/fizyk20/generic-array/issues/98'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,">=0.8.4, <0.9.0>=0.9.1, <0.10.0>=0.10.1, <0.11.0>=0.11.2, <0.12.0>=0.12.4, <0.13.0>=0.13.3",<0.8.0,"Affected versions of this crate allowed unsoundly extending
lifetimes usingarr!macro. This may result in a variety of
memory corruption scenarios, most likely use-after-free. Advisory available underCC0-1.0license."
HIGH,Use-after-free when cloning a partially consumedVeciterator,"November  2, 2020","February 27, 2021(last modified: June 13, 2023)",heapless(crates.io),/packages/heapless.html,INFOUnsound,"memory-corruption, memory-exposure",,"{'text': 'CVE-2020-36464', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36464'}, {'text': 'GHSA-qgwf-r2jj-2ccv', 'url': 'https://github.com/advisories/GHSA-qgwf-r2jj-2ccv'}","{'text': 'https://github.com/japaric/heapless/issues/181', 'url': 'https://github.com/japaric/heapless/issues/181'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.6.1,Version,<=0.6,"TheIntoIterCloneimplementation clones the whole underlyingVec.
If the iterator is partially consumed the consumed items will be copied, thus creating a use-after-free access. A proof of concept is available in the original bug report. Advisory available underCC0-1.0license.",heapless;;vec;;intoiter;;clone,<=0.6
HIGH,Multiple Transfer-Encoding headers misinterprets request payload,"February  5, 2021","February  5, 2021(last modified: October 19, 2021)",hyper(crates.io),/packages/hyper.html,Vulnerability,format-injection,,"{'text': 'CVE-2021-21299', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-21299'}, {'text': 'GHSA-6hfq-h8hq-87mf', 'url': 'https://github.com/advisories/GHSA-6hfq-h8hq-87mf'}","{'text': 'https://github.com/hyperium/hyper/security/advisories/GHSA-6hfq-h8hq-87mf', 'url': 'https://github.com/hyperium/hyper/security/advisories/GHSA-6hfq-h8hq-87mf'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.14.3^0.13.10^0.12.36,<0.12.0,"hyper's HTTP server code had a flaw that incorrectly understands some requests
with multiple transfer-encoding headers to have a chunked payload, when it
should have been rejected as illegal. This combined with an upstream HTTP proxy
that understands the request payload boundary differently can result in
""request smuggling"" or ""desync attacks"". Advisory available underCC0-1.0license."
HIGH,"Queues allow non-Send types to be sent to other threads, allowing data races","December 25, 2020","February  4, 2021(last modified: June 13, 2023)",multiqueue(crates.io),/packages/multiqueue.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36463', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36463'}, {'text': 'GHSA-jf43-3v8j-qwwr', 'url': 'https://github.com/advisories/GHSA-jf43-3v8j-qwwr'}, {'text': 'GHSA-r2x6-vrxx-jgv4', 'url': 'https://github.com/advisories/GHSA-r2x6-vrxx-jgv4'}","{'text': 'https://github.com/schets/multiqueue/issues/31', 'url': 'https://github.com/schets/multiqueue/issues/31'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate unconditionally implementedSendfor types used in queue implementations (InnerSend<RW, T>,InnerRecv<RW, T>,FutInnerSend<RW, T>,FutInnerRecv<RW, T>). This allows users to send non-Send types to other threads, which can lead to data race bugs or other undefined behavior. Advisory available underCC0-1.0license."
HIGH,Send bound needed on T (for Send impl ofBucket2),"November 29, 2020","February  2, 2021(last modified: June 13, 2023)",syncpool(crates.io),/packages/syncpool.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-36462', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36462'}, {'text': 'GHSA-r88h-6987-g79f', 'url': 'https://github.com/advisories/GHSA-r88h-6987-g79f'}, {'text': 'GHSA-vp6r-mrq9-8f4h', 'url': 'https://github.com/advisories/GHSA-vp6r-mrq9-8f4h'}","{'text': 'https://github.com/Chopinsky/byte_buffer/issues/2', 'url': 'https://github.com/Chopinsky/byte_buffer/issues/2'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.6,Affected versions of this crate unconditionally implementsSendforBucket2. This allows sending non-Send types to other threads. This can lead to data races when non Send types likeCell<T>orRc<T>are contained insideBucket2and sent across thread boundaries. The data races can potentially lead to memory corruption (as demonstrated in the PoC from the original report issue). The flaw was corrected in commit 15b2828 by adding aT: Sendbound to theSendimpl ofBucket2<T>. Advisory available underCC0-1.0license.
HIGH,MvccRwLock allows data races & aliasing violations,"December 10, 2020","February  1, 2021(last modified: June 13, 2023)",noise_search(crates.io),/packages/noise_search.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36461', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36461'}, {'text': 'GHSA-wxjf-9f4g-3v44', 'url': 'https://github.com/advisories/GHSA-wxjf-9f4g-3v44'}","{'text': 'https://github.com/pipedown/noise/issues/72', 'url': 'https://github.com/pipedown/noise/issues/72'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate unconditionally implement Send/Sync forMvccRwLock.
This can lead to data races when types that are either!Sendor!Sync(e.g.Rc<T>,Arc<Cell<_>>) are contained insideMvccRwLockand sent across thread boundaries. The data races can potentially lead to memory corruption (as demonstrated in the PoC from the original report issue). Also, safe APIs ofMvccRwLockallow aliasing violations by allowing&TandLockResult<MutexGuard<Box<T>>>to co-exist in conflicting lifetime regions. The APIs ofMvccRwLockshould either be marked asunsafeorMbccRwLockshould be changed to private or pub(crate). Advisory available underCC0-1.0license."
HIGH,IoReader::read(): user-providedReadon uninitialized buffer may cause UB,"January 26, 2021","January 31, 2021(last modified: June 13, 2023)",ms3d(crates.io),/packages/ms3d.html,Vulnerability,memory-exposure,"{'text': 'CVE-2021-26952', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26952'}, {'text': 'GHSA-9f5r-vqm5-m342', 'url': 'https://github.com/advisories/GHSA-9f5r-vqm5-m342'}","{'text': 'https://github.com/andrewhickman/ms3d/issues/1', 'url': 'https://github.com/andrewhickman/ms3d/issues/1'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=0.1.3,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. The flaw was fixed in commit 599313b by zero-initializing the buffer (viaself.buf.resize(len, 0)) before passing it toRead. Advisory available underCC0-1.0license."
HIGH,Readon uninitialized buffer may cause UB (impl Walue for Vec<u8>),"January 30, 2021","January 31, 2021(last modified: June 13, 2023)",postscript(crates.io),/packages/postscript.html,Vulnerability,memory-exposure,"{'text': 'CVE-2021-26953', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26953'}, {'text': 'GHSA-fhvc-gp6c-h2wx', 'url': 'https://github.com/advisories/GHSA-fhvc-gp6c-h2wx'}","{'text': 'https://github.com/bodoni/postscript/issues/1', 'url': 'https://github.com/bodoni/postscript/issues/1'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=0.14.0,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. This flaw was fixed in commit 8026286 by zero-initializing the buffer before handing to a user-providedRead. Advisory available underCC0-1.0license."
HIGH,convec::ConVecunconditionally implements Send/Sync,"November 24, 2020","January 30, 2021(last modified: June 13, 2023)",convec(crates.io),/packages/convec.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36445', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36445'}, {'text': 'GHSA-rpxm-vmr7-5f5f', 'url': 'https://github.com/advisories/GHSA-rpxm-vmr7-5f5f'}","{'text': 'https://github.com/krl/convec/issues/2', 'url': 'https://github.com/krl/convec/issues/2'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate unconditionally implement Send/Sync forConVec<T>.
This allows users to insertTthat is not Send or not Sync. This allows users to create data races by using non-Send types likeArc<Cell<_>>orRc<_>asTinConVec<T>. It is also possible to create data races by using types likeCell<_>orRefCell<_>asT(types that areSendbut notSync).
Such data races can lead to memory corruption. Advisory available underCC0-1.0license."
HIGH,dces' World type can cause data races,"December  9, 2020","January 30, 2021(last modified: June 13, 2023)",dces(crates.io),/packages/dces.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36459', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36459'}, {'text': 'GHSA-hxw9-jxqw-jc8j', 'url': 'https://github.com/advisories/GHSA-hxw9-jxqw-jc8j'}","{'text': 'https://gitlab.redox-os.org/redox-os/dces-rust/-/issues/8', 'url': 'https://gitlab.redox-os.org/redox-os/dces-rust/-/issues/8'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"TheWorldtype indcesis marked asSendwithout bounds on itsEntityStoreandComponentStore. This allows non-thread safeEntityStoreandComponentStores to be sent
across threads and cause data races. Advisory available underCC0-1.0license."
HIGH,SyncChannelcan move 'T: !Send' to other threads,"November 15, 2020","January 30, 2021(last modified: June 13, 2023)",signal-simple(crates.io),/packages/signal-simple.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36446', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36446'}, {'text': 'GHSA-36cg-4jff-5863', 'url': 'https://github.com/advisories/GHSA-36cg-4jff-5863'}, {'text': 'GHSA-8892-84wf-cg8f', 'url': 'https://github.com/advisories/GHSA-8892-84wf-cg8f'}","{'text': 'https://github.com/kitsuneninetails/signal-rust/issues/2', 'url': 'https://github.com/kitsuneninetails/signal-rust/issues/2'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate unconditionally implement Send/Sync forSyncChannel<T>.SyncChannel<T>doesn't provide access to&Tbut merely serves as a channel that consumes and returns ownedT. Users can create UB in safe Rust by sendingT: !Sendto other threads withSyncChannel::send/recvAPIs. UsingT = Arc<Cell<_>allows to create data races (which can lead to memory corruption), and usingT = MutexGuard<T>allows to unlock a mutex from a thread that didn't lock the mutex. Advisory available underCC0-1.0license."
HIGH,ShmWriter allows sending non-Send type across threads,"December 18, 2020","January 30, 2021(last modified: June 13, 2023)",kekbit(crates.io),/packages/kekbit.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36449', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36449'}, {'text': 'GHSA-g83m-67wh-whpw', 'url': 'https://github.com/advisories/GHSA-g83m-67wh-whpw'}","{'text': 'https://github.com/motoras/kekbit/issues/34', 'url': 'https://github.com/motoras/kekbit/issues/34'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.3.4,"Affected versions of this crate implementSendforShmWriter<H>without requiringH: Send. This allows users to sendH: !Sendto other threads, which can potentially lead to data races and undefined behavior. Advisory available underCC0-1.0license."
HIGH,ReaderResult should be bounded by Sync,"November 10, 2020","January 30, 2021(last modified: June 13, 2023)",lexer(crates.io),/packages/lexer.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36458', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36458'}, {'text': 'GHSA-f997-8gxg-r354', 'url': 'https://github.com/advisories/GHSA-f997-8gxg-r354'}","{'text': 'https://gitlab.com/nathanfaucett/rs-lexer/-/issues/2', 'url': 'https://gitlab.com/nathanfaucett/rs-lexer/-/issues/2'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate implementsSyncforReaderResult<T, E>with the trait boundT: Send, E: Send. Since matching on the public enumReaderResult<T, E>provides access to&T&&E,
allowing data race to a non-Sync typeTorE.
This can result in a memory corruption when multiple threads concurrently access&Tor&E. Suggested fix for the bug is change the trait bounds imposed onT&Eto beT: Sync, E: Sync. Advisory available underCC0-1.0license."
HIGH,Queueshould have a Send bound on its Send/Sync traits,"November 15, 2020","January 30, 2021(last modified: June 13, 2023)",scottqueue(crates.io),/packages/scottqueue.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36453', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36453'}, {'text': 'GHSA-gvvv-w559-2hg6', 'url': 'https://github.com/advisories/GHSA-gvvv-w559-2hg6'}","{'text': 'https://github.com/rossdylan/rust-scottqueue/issues/1', 'url': 'https://github.com/rossdylan/rust-scottqueue/issues/1'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate unconditionally implementsSend/SyncforQueue<T>. This allows (1) creating data races to aT: !Syncand (2) sendingT: !Sendto other threads, resulting in memory corruption or other undefined behavior. Advisory available underCC0-1.0license."
HIGH,Cache: Send/Sync impls needs trait bounds onK,"November 24, 2020","January 30, 2021(last modified: June 13, 2023)",cache(crates.io),/packages/cache.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36448', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36448'}, {'text': 'GHSA-g78p-g85h-q6ww', 'url': 'https://github.com/advisories/GHSA-g78p-g85h-q6ww'}","{'text': 'https://github.com/krl/cache/issues/1', 'url': 'https://github.com/krl/cache/issues/1'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate unconditionally implement Send/Sync forCache<K>.
This allows users to insertKthat is not Send or not Sync. This allows users to create data races by using non-Send types likeArc<Cell<T>>orRc<T>asKinCache<K>. It is also possible to create data races by using types likeCell<T>orRefCell<T>(types that areSendbut notSync).
Such data races can lead to memory corruption. Advisory available underCC0-1.0license."
HIGH,Send/Sync bound needed on T  for Send/Sync impl of RcuCell,"November 14, 2020","January 30, 2021(last modified: June 13, 2023)",rcu_cell(crates.io),/packages/rcu_cell.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36451', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36451'}, {'text': 'GHSA-686h-j8r8-wmfm', 'url': 'https://github.com/advisories/GHSA-686h-j8r8-wmfm'}","{'text': 'https://github.com/Xudong-Huang/rcu_cell/issues/3', 'url': 'https://github.com/Xudong-Huang/rcu_cell/issues/3'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate unconditionally implement Send/Sync forRcuCell<T>.
This allows users to sendT: !Sendto other threads (whileTenclosed withinRcuCell<T>), and allows users to concurrently accessT: !Syncby using the APIs ofRcuCell<T>that provide access to&T. This can result in memory corruption caused by data races. Advisory available underCC0-1.0license."
HIGH,Bunchunconditionally implements Send/Sync,"November 12, 2020","January 30, 2021(last modified: June 13, 2023)",bunch(crates.io),/packages/bunch.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36450', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36450'}, {'text': 'GHSA-jwph-qp5h-f9wj', 'url': 'https://github.com/advisories/GHSA-jwph-qp5h-f9wj'}","{'text': 'https://github.com/krl/bunch/issues/1', 'url': 'https://github.com/krl/bunch/issues/1'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate unconditionally implementsSend/SyncforBunch<T>.
This allows users to insertT: !SynctoBunch<T>. It is possible to create a data race to aT: !Syncby invoking theBunch::get()API (which returns&T) from multiple threads. It is also possible to sendT: !Sendto other threads by insertingTinsideBunch<T>and sendingBunch<T>to another thread, allowing to create a data race by inserting types likeT = Rc<_>. Such data races can lead to memory corruption. Advisory available underCC0-1.0license."
HIGH,AtomicBoxlacks bound on its Send and Sync traits allowing data races,"November 10, 2020","January 30, 2021(last modified: June 13, 2023)",lever(crates.io),/packages/lever.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36457', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36457'}, {'text': 'GHSA-9pp4-8p8v-g78w', 'url': 'https://github.com/advisories/GHSA-9pp4-8p8v-g78w'}","{'text': 'https://github.com/vertexclique/lever/issues/15', 'url': 'https://github.com/vertexclique/lever/issues/15'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.1,"AtomicBox<T>is aBoxtype designed to be used across threads, however, it
implements theSendandSynctraits for all typesT. This allows non-Send types such asRcand non-Sync types such asCellto
be used across thread boundaries which can trigger undefined behavior and
memory corruption. Advisory available underCC0-1.0license."
HIGH,Slockallows sending non-Send types across thread boundaries,"November 17, 2020","January 30, 2021(last modified: June 13, 2023)",slock(crates.io),/packages/slock.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36455', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36455'}, {'text': 'GHSA-83r8-p8v6-6gfm', 'url': 'https://github.com/advisories/GHSA-83r8-p8v6-6gfm'}, {'text': 'GHSA-mc36-5m36-hjh5', 'url': 'https://github.com/advisories/GHSA-mc36-5m36-hjh5'}","{'text': 'https://github.com/BrokenLamp/slock-rs/issues/2', 'url': 'https://github.com/BrokenLamp/slock-rs/issues/2'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.2.0,"Slock<T>unconditionally implementsSend/Sync. Affected versions of this crate allows sending non-Send types to other threads,
which can lead to data races and memory corruption due to the data race. Advisory available underCC0-1.0license."
HIGH,ArcGuard's Send and Sync should have bounds on RC,"December  8, 2020","January 30, 2021(last modified: June 13, 2023)",async-coap(crates.io),/packages/async-coap.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36444', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36444'}, {'text': 'GHSA-9j8q-m9x5-9g6j', 'url': 'https://github.com/advisories/GHSA-9j8q-m9x5-9g6j'}","{'text': 'https://github.com/google/rust-async-coap/issues/33', 'url': 'https://github.com/google/rust-async-coap/issues/33'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Affected versions of this crate implement Send/Sync forArcGuard<RC, T>with no trait bounds onRC. This allows users to sendRC: !Sendto other threads and also allows users to concurrently accessRc: !Syncfrom multiple threads. This can result in memory corruption from data race or other undefined behavior caused by sendingT: !Sendto other threads (e.g. droppingMutexGuard<T>in another thread that didn't lock its mutex). Advisory available underCC0-1.0license."
HIGH,Sharedcan cause a data race,"November 10, 2020","January 30, 2021(last modified: June 13, 2023)",model(crates.io),/packages/model.html,INFOUnsound,thread-safety,"{'text': 'CVE-2020-36460', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36460'}, {'text': 'GHSA-mxv6-q98x-h958', 'url': 'https://github.com/advisories/GHSA-mxv6-q98x-h958'}","{'text': 'https://github.com/spacejam/model/issues/3', 'url': 'https://github.com/spacejam/model/issues/3'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Shareddata structure inmodelcrate implementsSendandSynctraits regardless of the inner type.
This allows safe Rust code to trigger a data race, which is undefined behavior in Rust. Users are advised to treatSharedas an unsafe type.
It should not be used outside of the testing context,
and care must be taken so that the testing code does not have a data race
besides a race condition that is expected to be caught by the test. Checkthe Rustonomiconfor the difference between
a data race and a general race condition. Advisory available underCC0-1.0license."
HIGH,SyncRef's clone() and debug() allow data races,"December 18, 2020","January 30, 2021(last modified: June 13, 2023)",v9(crates.io),/packages/v9.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36447', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36447'}, {'text': 'GHSA-3837-87vh-xq3w', 'url': 'https://github.com/advisories/GHSA-3837-87vh-xq3w'}, {'text': 'GHSA-pfjq-935c-4895', 'url': 'https://github.com/advisories/GHSA-pfjq-935c-4895'}","{'text': 'https://github.com/purpleposeidon/v9/issues/1', 'url': 'https://github.com/purpleposeidon/v9/issues/1'}, {'text': 'https://github.com/purpleposeidon/v9/commit/18847c50e5d36561cc91c996c3539ddb1eacf6c7', 'url': 'https://github.com/purpleposeidon/v9/commit/18847c50e5d36561cc91c996c3539ddb1eacf6c7'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.43,"Affected versions of this crate unconditionally implementSyncforSyncRef<T>.
This definition allows data races if&Tis accessible through&SyncRef. SyncRef<T>derivesCloneandDebug, and the default implementations of those traits access&Tby invokingT::clone()&T::fmt(). It is possible to create data races & undefined behavior by concurrently invokingSyncRef<T>::clone()orSyncRef<T>::fmt()from multiple threads withT: !Sync. Advisory available underCC0-1.0license."
HIGH,LockWeak<T>allows to create data race toT.,"November 14, 2020","January 30, 2021(last modified: June 13, 2023)",parc(crates.io),/packages/parc.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36454', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36454'}, {'text': 'GHSA-29v7-3v4c-gf38', 'url': 'https://github.com/advisories/GHSA-29v7-3v4c-gf38'}, {'text': 'GHSA-xwxc-j97j-84gf', 'url': 'https://github.com/advisories/GHSA-xwxc-j97j-84gf'}","{'text': 'https://github.com/hyyking/rustracts/pull/6', 'url': 'https://github.com/hyyking/rustracts/pull/6'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"In the affected versions of this crate,LockWeak<T>unconditionally implementedSendwith no trait bounds onT.LockWeak<T>doesn't ownTand only provides&T. This allows concurrent access to a non-SyncT, which can cause undefined behavior like data races. Advisory available underCC0-1.0license."
HIGH,CopyCell lacks bounds on its Send trait allowing for data races,"November 15, 2020","January 30, 2021(last modified: June 13, 2023)",toolshed(crates.io),/packages/toolshed.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36456', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36456'}, {'text': 'GHSA-2r6q-6c8c-g762', 'url': 'https://github.com/advisories/GHSA-2r6q-6c8c-g762'}","{'text': 'https://github.com/ratel-rust/toolshed/issues/12', 'url': 'https://github.com/ratel-rust/toolshed/issues/12'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"CopyCell<T>is aCell-like type that is implemented for any typeTthat
isCopyable. It'sSendtrait has no bounds on the contained type. As not allCopyable types are thread safe, for example non-mutable references
implement theCopytrait, it is possible to send references to types with
interior mutability such asCellacross threads and cause data races. Advisory available underCC0-1.0license."
HIGH,Record::read : CustomReadon uninitialized buffer may cause UB,"January 26, 2021","January 27, 2021(last modified: June 13, 2023)",marc(crates.io),/packages/marc.html,Vulnerability,memory-exposure,"{'text': 'CVE-2021-26308', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26308'}, {'text': 'GHSA-3mf3-2gv9-h39j', 'url': 'https://github.com/advisories/GHSA-3mf3-2gv9-h39j'}","{'text': 'https://github.com/blackbeam/rust-marc/issues/7', 'url': 'https://github.com/blackbeam/rust-marc/issues/7'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=2.0.0,"Affected versions of this crate passes an uninitialized buffer to a user-providedReadimplementation. (Record::read()) ArbitraryReadimplementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. This flaw was fixed in commit 6299af0 by zero-initializing the newly allocated memory (viadata.resize(len, 0)) instead of exposing uninitialized memory (unsafe { data.set_len(len) }). Advisory available underCC0-1.0license."
HIGH,beef::Cow lacks a Sync bound on its Send trait allowing for data races,"October 28, 2020","January 26, 2021(last modified: June 13, 2023)",beef(crates.io),/packages/beef.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36442', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36442'}, {'text': 'GHSA-m7w4-8wp8-m2xq', 'url': 'https://github.com/advisories/GHSA-m7w4-8wp8-m2xq'}","{'text': 'https://github.com/maciejhirsz/beef/issues/37', 'url': 'https://github.com/maciejhirsz/beef/issues/37'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.5.0,"Affected versions of this crate did not have aT: Syncbound in theSendimpl forCow<'_, T, U>. This allows users to create data races by makingCowcontain types that are (Send && !Sync) likeCell<_>orRefCell<_>. Such data races can lead to memory corruption. The flaw was corrected in commit d1c7658 by adding trait boundsT: SyncandT::Owned: Sendto theSendimpl forCow<'_, T, U>. Advisory available underCC0-1.0license."
HIGH,Decoder<R>can carryR: !Sendto other threads,"November 10, 2020","January 25, 2021(last modified: June 13, 2023)",libsbc(crates.io),/packages/libsbc.html,INFOUnsound,"memory-corruption, thread-safety","{'text': 'CVE-2020-36440', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36440'}, {'text': 'GHSA-f6g6-54hm-fhxv', 'url': 'https://github.com/advisories/GHSA-f6g6-54hm-fhxv'}","{'text': 'https://github.com/mvertescher/libsbc-rs/issues/4', 'url': 'https://github.com/mvertescher/libsbc-rs/issues/4'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.5,"Affected versions of this crate implementsSendforDecoder<R>for anyR: Read. This allowsDecoder<R>to containR: !Sendand carry (move) it to another thread. This can result in undefined behavior such as memory corruption from data race onR, or droppingR = MutexGuard<_>from a thread that didn't lock the mutex. The flaw was corrected in commit a34d6e1 by adding trait boundR: Sendto theSendimpl forDecoder<R>. Advisory available underCC0-1.0license."
HIGH,ReadTicket and WriteTicket should only be sendable when T is Send,"November 17, 2020","January 25, 2021(last modified: June 13, 2023)",ticketed_lock(crates.io),/packages/ticketed_lock.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36439', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36439'}, {'text': 'GHSA-77m6-x95j-75r5', 'url': 'https://github.com/advisories/GHSA-77m6-x95j-75r5'}, {'text': 'GHSA-gq4h-f254-7cw9', 'url': 'https://github.com/advisories/GHSA-gq4h-f254-7cw9'}","{'text': 'https://github.com/kvark/ticketed_lock/issues/7', 'url': 'https://github.com/kvark/ticketed_lock/issues/7'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.3.0,"Affected versions of this crate unconditionally implementedSendforReadTicket<T>&WriteTicket<T>.
This allows to send non-SendTto other threads. This can allows creating data races by cloning types with internal mutability and sending them to other threads (asTofReadTicket<T>/WriteTicket<T>). Such data races can cause memory corruption or other undefined behavior. The flaw was corrected in commit a986a93 by addingT: Sendbounds toSendimpls ofReadTicket<T>/WriteTicket<T>. Advisory available underCC0-1.0license."
HIGH,AtomicBoximplements Send/Sync for anyT: Sized,"November 10, 2020","January 25, 2021(last modified: June 13, 2023)",abox(crates.io),/packages/abox.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36441', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36441'}, {'text': 'GHSA-r626-fc64-3q28', 'url': 'https://github.com/advisories/GHSA-r626-fc64-3q28'}","{'text': 'https://github.com/SonicFrog/abox/issues/1', 'url': 'https://github.com/SonicFrog/abox/issues/1'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.4.1,"Affected versions of this crate implementsSend/SyncforAtomicBox<T>without requiringT: Send/T: Sync. This allows to create data races toT: !Syncand sendT: !Sendto another thread. Such behavior breaks the compile-time thread safety guarantees of Rust, and allows users to incur undefined behavior using safe Rust (e.g. memory corruption from data race). The flaw was corrected in commit 34c2b9e by adding trait boundT: SendtoSendimpl forAtomicBox<T>and trait boundT: SynctoSyncimpl forAtomicBox<T>. Advisory available underCC0-1.0license."
HIGH,QueueSender/QueueReceiver: Send/Sync impls needT: Send,"November 24, 2020","January 24, 2021(last modified: June 13, 2023)",conqueue(crates.io),/packages/conqueue.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36437', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36437'}, {'text': 'GHSA-368f-29c3-4f2r', 'url': 'https://github.com/advisories/GHSA-368f-29c3-4f2r'}","{'text': 'https://github.com/longshorej/conqueue/issues/9', 'url': 'https://github.com/longshorej/conqueue/issues/9'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.4.0,"Affected versions of this crate unconditionally implementedSend/SyncforQueueSender<T>,
allowing to send non-SendTto other threads by invoking(&QueueSender<T>).send(). This fails to prevent users from creating data races by sending types likeRc<T>orArc<Cell<T>>to other threads, which can lead to memory corruption. The flaw was corrected in commit 1e462c3 by imposingT: Sendto bothSend/Syncimpls forQueueSender<T>/QueueReceiver<T>. Advisory available underCC0-1.0license."
HIGH,Futurelacks bounds on Send and Sync.,"December  8, 2020","January 24, 2021(last modified: June 13, 2023)",tiny_future(crates.io),/packages/tiny_future.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36438', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36438'}, {'text': 'GHSA-fg42-vwxx-xx5j', 'url': 'https://github.com/advisories/GHSA-fg42-vwxx-xx5j'}, {'text': 'GHSA-m296-j53x-xv95', 'url': 'https://github.com/advisories/GHSA-m296-j53x-xv95'}","{'text': 'https://github.com/KizzyCode/tiny_future/issues/1', 'url': 'https://github.com/KizzyCode/tiny_future/issues/1'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.4.0,tiny_futurecontains a light-weight implementation ofFutures. TheFuturetype it has lacked bound on itsSendandSynctraits. This allows for a bug where non-thread safe types such asCellcan be used inFutures and cause data races in concurrent programs. The flaw was corrected in commitc791919by adding trait bounds toFuture'sSendandSync. Advisory available underCC0-1.0license.
HIGH,"PinSlaband Unordered<T, S> need bounds on their Send/Sync traits","November 15, 2020","January 24, 2021(last modified: June 13, 2023)",unicycle(crates.io),/packages/unicycle.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36436', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36436'}, {'text': 'GHSA-686f-ch3r-xwmh', 'url': 'https://github.com/advisories/GHSA-686f-ch3r-xwmh'}","{'text': 'https://github.com/udoprog/unicycle/issues/8', 'url': 'https://github.com/udoprog/unicycle/issues/8'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.7.1,"Affected versions of this crate unconditionally implementedSend&Syncfor typesPinSlab<T>&Unordered<T, S>. This allows sending non-Send types to other threads and concurrently accessing non-Sync types from multiple threads. This can result in a data race & memory corruption when types that provide internal mutability without synchronization are contained withinPinSlab<T>orUnordered<T, S>and accessed concurrently from multiple threads. The flaw was corrected in commits 92f40b4 & 6a6c367 by adding trait boundT: SendtoSendimpls forPinSlab<T>&Unordered<T, S>and addingT: SynctoSyncimpls forPinSlab<T>&Unordered<T, S>. Advisory available underCC0-1.0license."
HIGH,Singleton lacks bounds on Send and Sync.,"November 16, 2020","January 22, 2021(last modified: June 13, 2023)",ruspiro-singleton(crates.io),/packages/ruspiro-singleton.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36435', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36435'}, {'text': 'GHSA-fqq2-xp7m-xvm8', 'url': 'https://github.com/advisories/GHSA-fqq2-xp7m-xvm8'}","{'text': 'https://github.com/RusPiRo/ruspiro-singleton/issues/10', 'url': 'https://github.com/RusPiRo/ruspiro-singleton/issues/10'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.4.1,"Singleton<T>is meant to be a static object that can be initialized lazily. In
order to satisfy the requirement thatstaticitems must implementSync,Singletonimplemented bothSyncandSendunconditionally. This allows for a bug where non-Synctypes such asCellcan be used in
singletons and cause data races in concurrent programs. The flaw was corrected in commitb0d2bd20eby adding trait bounds, requiring
the contaiend type to implementSync. Advisory available underCC0-1.0license."
HIGH,conquer-once's OnceCell lacks Send bound for its Sync trait.,"December 22, 2020","January 20, 2021(last modified: June 13, 2023)",conquer-once(crates.io),/packages/conquer-once.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36208', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36208'}, {'text': 'GHSA-3jc5-5hc5-33gj', 'url': 'https://github.com/advisories/GHSA-3jc5-5hc5-33gj'}","{'text': 'https://github.com/oliver-giersch/conquer-once/issues/3', 'url': 'https://github.com/oliver-giersch/conquer-once/issues/3'}",7.8HIGH,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H,>=0.3.2,"Affected versions ofconquer-onceimplementsSyncfor itsOnceCelltype
without restricting it toSendable types. This allows non-SendbutSynctypes such asMutexGuardto be sent across
threads leading to undefined behavior and memory corruption in concurrent
programs. The issue was fixed by adding aSendconstraint toOnceCell. Advisory available underCC0-1.0license."
HIGH,LateStatic has incorrect Sync bound,"November 10, 2020","January 20, 2021(last modified: June 13, 2023)",late-static(crates.io),/packages/late-static.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36209', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36209'}, {'text': 'GHSA-wr55-mf5c-hhwm', 'url': 'https://github.com/advisories/GHSA-wr55-mf5c-hhwm'}","{'text': 'https://github.com/Richard-W/late-static/issues/1', 'url': 'https://github.com/Richard-W/late-static/issues/1'}",7HIGH,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H,>=0.4.0,"Affected versions of this crate implementedSyncforLateStaticwithT: Send, so that it is possible to create a data race to a typeT: Send + !Sync(e.g.Cell<T>). This can result in a memory corruption or other kinds of undefined behavior. The flaw was corrected in commit 11f396c by replacing theT: Sendbound toT: Syncbound in theSyncimpl forLateStatic<T>. Advisory available underCC0-1.0license."
HIGH,"panic safety issue inimpl TransformContent<S, D> for [S; (2|3|4)]","January 10, 2021","January 20, 2021(last modified: June 13, 2023)",basic_dsp_matrix(crates.io),/packages/basic_dsp_matrix.html,Vulnerability,memory-corruption,"{'text': 'CVE-2021-25906', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25906'}, {'text': 'GHSA-fjr6-hm39-4cf9', 'url': 'https://github.com/advisories/GHSA-fjr6-hm39-4cf9'}","{'text': 'https://github.com/liebharc/basic_dsp/issues/47', 'url': 'https://github.com/liebharc/basic_dsp/issues/47'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.9.2,"Affected versions of this crate did not guard against double drop while temporarily duplicating objects' ownership usingptr::read(). Upon panic in a user-provided functionconversion, objects that are copied byptr::read()are dropped twice, leading to memory corruption. The flaw was corrected in v0.9.2 by usingManuallyDrop<T>to enclose objects that are to be temporarily duplicated. Advisory available underCC0-1.0license."
HIGH,ImageChunkMut needs bounds on its Send and Sync traits,"December  8, 2020","January 20, 2021(last modified: June 13, 2023)",gfwx(crates.io),/packages/gfwx.html,Vulnerability,"memory-corruption, thread-safety","{'text': 'CVE-2020-36211', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36211'}, {'text': 'GHSA-xp6v-qx65-4pp7', 'url': 'https://github.com/advisories/GHSA-xp6v-qx65-4pp7'}","{'text': 'https://github.com/Devolutions/gfwx-rs/issues/7', 'url': 'https://github.com/Devolutions/gfwx-rs/issues/7'}",7HIGH,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H,>=0.3.0,"In the affected versions of this crate,ImageChunkMut<'_, T>unconditionally implementsSendandSync, allowing to create data races. This can result in a memory corruption or undefined behavior when non thread-safe types are moved and referenced across thread boundaries. The flaw was corrected in commit e7fb2f5 by addingT: Sendbound to theSendimpl and addingT: Syncbound to theSyncimpl. Advisory available underCC0-1.0license."
HIGH,Update unsound DrainFilter and RString::retain,"December 21, 2020","January 20, 2021(last modified: June 13, 2023)",abi_stable(crates.io),/packages/abi_stable.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-36212', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36212'}, {'text': 'CVE-2020-36213', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36213'}, {'text': 'GHSA-vq23-5h4f-vwpv', 'url': 'https://github.com/advisories/GHSA-vq23-5h4f-vwpv'}, {'text': 'GHSA-wqxc-qrq4-w5v4', 'url': 'https://github.com/advisories/GHSA-wqxc-qrq4-w5v4'}","{'text': 'https://github.com/rodrimati1992/abi_stable_crates/issues/44', 'url': 'https://github.com/rodrimati1992/abi_stable_crates/issues/44'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.9.1,Affected versions of this crate contained code from the Rust standard library that contained soundness bugs rust-lang/rust#60977 (double drop) & rust-lang/rust#78498 (create invalid utf-8 string). The flaw was corrected in v0.9.1 by making a similar fix to the one made in the Rust standard library. Advisory available underCC0-1.0license.
HIGH,impl Randomon arrays can lead to dropping uninitialized memory,"December 31, 2020","January 20, 2021(last modified: June 13, 2023)",autorand(crates.io),/packages/autorand.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-36210', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36210'}, {'text': 'GHSA-cgmg-2v6m-fjg7', 'url': 'https://github.com/advisories/GHSA-cgmg-2v6m-fjg7'}","{'text': 'https://github.com/mersinvald/autorand-rs/issues/5', 'url': 'https://github.com/mersinvald/autorand-rs/issues/5'}",7.8HIGH,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H,>=0.2.3,Affected versions of this crate had a panic safety issue to drop partially uninitialized array ofTupon panic in a user provided functionT::random(). Dropping uninitializedTcan potentially cause memory corruption or undefined behavior. The flaw was corrected in commit 565d508 by usingMaybeUninit<T>to avoid possible dropping of uninitialized memory upon panic. Advisory available underCC0-1.0license.
HIGH,EventList's Fromconversions can double drop on panic.,"January  4, 2021","January 20, 2021(last modified: June 13, 2023)",fil-ocl(crates.io),/packages/fil-ocl.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-25908', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25908'}, {'text': 'GHSA-x3v2-fgr6-3wmm', 'url': 'https://github.com/advisories/GHSA-x3v2-fgr6-3wmm'}","{'text': 'https://github.com/cogciprocate/ocl/issues/194', 'url': 'https://github.com/cogciprocate/ocl/issues/194'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,<0.12.0,"Affected versions of this crate read from a container usingptr::readinFrom<EventList>, and then call a user specifiedInto<Event>function. This issue can result in a double-free if the user provided function panics. Advisory available underCC0-1.0license."
HIGH,hashconsing's HConsed lacks Send/Sync bound for its Send/Sync trait.,"November 10, 2020","January 20, 2021(last modified: June 13, 2023)",hashconsing(crates.io),/packages/hashconsing.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36215', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36215'}, {'text': 'GHSA-rw2c-c256-3r53', 'url': 'https://github.com/advisories/GHSA-rw2c-c256-3r53'}","{'text': 'https://github.com/AdrienChampion/hashconsing/issues/1', 'url': 'https://github.com/AdrienChampion/hashconsing/issues/1'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=1.1.0,Affected versions ofhashconsingimplementsSend/Syncfor itsHConsedtype without restricting it toSendable types andSyncable types. This allows non-Synctypes such asCellto be shared across threads leading to undefined behavior and memory corruption in concurrent programs. Advisory available underCC0-1.0license.
HIGH,Aoveclacks bound on its Send and Sync traits allowing data races,"December 10, 2020","January 19, 2021(last modified: June 13, 2023)",aovec(crates.io),/packages/aovec.html,Vulnerability,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36207', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36207'}, {'text': 'GHSA-g489-xrw3-3v8w', 'url': 'https://github.com/advisories/GHSA-g489-xrw3-3v8w'}",7HIGH,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H,no patched versions,"aovec::Aovec<T>is a vector type that implementsSendandSyncfor all
typesT. This allows non-Send types such asRcand non-Sync types such asCellto
be used across thread boundaries which can trigger undefined behavior and
memory corruption. Advisory available underCC0-1.0license."
HIGH,Exposes internally used raw pointer,"January  1, 2021","January 19, 2021(last modified: June 13, 2023)",cache(crates.io),/packages/cache.html,INFOUnsound,memory-corruption,,"{'text': 'CVE-2021-25903', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25903'}, {'text': 'GHSA-gh87-6jr3-8q47', 'url': 'https://github.com/advisories/GHSA-gh87-6jr3-8q47'}","{'text': 'https://github.com/krl/cache/issues/2', 'url': 'https://github.com/krl/cache/issues/2'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,"Affected versions of this crate dereference a raw pointer that can be modified
without usingunsafecode. Advisory available underCC0-1.0license."
HIGH,Frame::copy_from_raw_partscan lead to segfault withoutunsafe,"January  7, 2021","January 19, 2021(last modified: June 13, 2023)",av-data(crates.io),/packages/av-data.html,Vulnerability,"memory-exposure, privilege-escalation","{'text': 'CVE-2021-25904', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25904'}, {'text': 'GHSA-352p-rhvq-7g78', 'url': 'https://github.com/advisories/GHSA-352p-rhvq-7g78'}","{'text': 'https://github.com/rust-av/rust-av/issues/136', 'url': 'https://github.com/rust-av/rust-av/issues/136'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.3.0,"fn Frame::copy_from_raw_parts()is a safe API that can take a
raw pointer and dereference it. It is possible to read arbitrary memory address
with an arbitrarily fed pointer. This allows the safe API to access & read
arbitrary address in memory. Feeding an invalid memory address pointer to
the API may also cause the program to segfault. The flaw was corrected in https://github.com/rust-av/rust-av/pull/137,
by removing the APIfn Frame::copy_from_raw_parts(). Advisory available underCC0-1.0license."
HIGH,UsbContext trait did not require implementers to be Send and Sync.,"December 18, 2020","January 18, 2021(last modified: June 13, 2023)",rusb(crates.io),/packages/rusb.html,INFOUnsound,"memory-corruption, thread-safety",,"{'text': 'CVE-2020-36206', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36206'}, {'text': 'GHSA-9mxw-4856-9cm5', 'url': 'https://github.com/advisories/GHSA-9mxw-4856-9cm5'}","{'text': 'https://github.com/a1ien/rusb/issues/44', 'url': 'https://github.com/a1ien/rusb/issues/44'}",7HIGH,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,HighPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H,>=0.7.0,"Affected versions ofrusbdid not requireUsbContextto implementSendandSync. However, throughDeviceandDeviceHandleit is possible to useUsbContexts across threads. This issue allows non-thread safeUsbContexttypes to be used concurrently
leading to data races and memory corruption. The issue was fixed by addingSendandSyncbounds toUsbContext. Advisory available underCC0-1.0license."
HIGH,Double drop upon panic in 'fn map_array()',"January 10, 2021","January 18, 2021(last modified: June 13, 2023)",glsl-layout(crates.io),/packages/glsl-layout.html,Vulnerability,memory-corruption,"{'text': 'CVE-2021-25902', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25902'}, {'text': 'GHSA-cx4j-fxr7-jxg8', 'url': 'https://github.com/advisories/GHSA-cx4j-fxr7-jxg8'}","{'text': 'https://github.com/rustgd/glsl-layout/pull/10', 'url': 'https://github.com/rustgd/glsl-layout/pull/10'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.4.0,"Affected versions of this crate did not guard against panic within the user-provided functionf(2nd parameter offn map_array), and thus panic withinfcauses double drop of a single object. The flaw was corrected in the 0.4.0 release by wrapping the object vulnerable
to a double drop withinManuallyDrop<T>. Advisory available underCC0-1.0license."
HIGH,Dangling reference inaccess::Mapwith Constant,"December 10, 2020","December 11, 2020(last modified: June 13, 2023)",arc-swap(crates.io),/packages/arc-swap.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2020-35711', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35711'}, {'text': 'GHSA-9pqx-g3jh-qpqq', 'url': 'https://github.com/advisories/GHSA-9pqx-g3jh-qpqq'}","{'text': 'https://github.com/vorner/arc-swap/issues/45', 'url': 'https://github.com/vorner/arc-swap/issues/45'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,">=0.4.8, <1.0.0-0>=1.1.0",<0.4.2,Version,<1.1.0,"Using thearc_swap::access::Mapwith theConstanttest helper (or with
user-provided implementation of theAccesstrait) could sometimes lead to the
map returning dangling references. Replaced by implementation withoutunsafe, at the cost of addedClonebound
on the closure and small penalty on performance. Advisory available underCC0-1.0license.",arc_swap;;access;;mapguard;;deref,<1.1.0
HIGH,Unexpected panic in multihashfrom_sliceparsing code,"November  8, 2020","November  9, 2020(last modified: June 13, 2023)",multihash(crates.io),/packages/multihash.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2020-35909', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35909'}, {'text': 'GHSA-h7qh-3h6f-w79p', 'url': 'https://github.com/advisories/GHSA-h7qh-3h6f-w79p'}","{'text': 'https://github.com/multiformats/rust-multihash/pull/72', 'url': 'https://github.com/multiformats/rust-multihash/pull/72'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.11.3,Version,<0.11.3,<0.11.3,"In versions prior 0.11.3 it's possible to makefrom_slicepanic by feeding it certain malformed input.
It's never documented thatfrom_slice(andfrom_byteswhich wraps it) can panic, and its' return type (Result<Self, DecodeError>) suggests otherwise. In practice,from_slice/from_bytesis frequently used in networking code (for examplein rust-libp2p) and is being called with unsanitized data from untrusted sources.
This can allow attackers to cause DoS by causing an unexpectedpanicin the network client's code. Advisory available underCC0-1.0license.",multihash;;digests;;multihashgeneric;;from_bytes,<0.11.3
HIGH,futures_task::waker may cause a use-after-free if used on a type that isn't 'static,"September  4, 2020","October 31, 2020(last modified: June 13, 2023)",futures-task(crates.io),/packages/futures-task.html,Vulnerability,"code-execution, memory-corruption",,"{'text': 'CVE-2020-35906', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35906'}, {'text': 'GHSA-r93v-9p5q-vhpf', 'url': 'https://github.com/advisories/GHSA-r93v-9p5q-vhpf'}","{'text': 'https://github.com/rust-lang/futures-rs/pull/2206', 'url': 'https://github.com/rust-lang/futures-rs/pull/2206'}",7.8HIGH,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,Low,None,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H,>=0.3.6,<=0.2.1,Version,>=0.3.0,"Affected versions of the crate did not properly implement a'staticlifetime bound on thewakerfunction.
This resulted in a use-after-free ifWaker::wake()is called after original data had been dropped. The flaw was corrected by adding'staticlifetime bound to the datawakertakes. Advisory available underCC0-1.0license.",futures_task;;waker,>=0.3.0
HIGH,Insufficient size checks in outgoing buffer in ws allows remote attacker to run the process out of memory,"September 25, 2020","October  1, 2020(last modified: June 13, 2023)",ws(crates.io),/packages/ws.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2020-35896', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35896'}, {'text': 'GHSA-rh7x-ppxx-p34c', 'url': 'https://github.com/advisories/GHSA-rh7x-ppxx-p34c'}","{'text': 'https://github.com/housleyjk/ws-rs/issues/291', 'url': 'https://github.com/housleyjk/ws-rs/issues/291'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,Affected versions of this crate did not properly check and cap the growth of the outgoing buffer. This allows a remote attacker to take down the process by growing the buffer of their (single) connection until the process runs out of memory it can allocate and is killed. The flaw was corrected in theparity-wsfork(>=0.10.0) bydisconnecting a client when the buffer runs full. Advisory available underCC0-1.0license.
HIGH,Obstack generates unaligned references,"September  3, 2020","October  1, 2020(last modified: June 13, 2023)",obstack(crates.io),/packages/obstack.html,INFOUnsound,"{'text': 'CVE-2020-35894', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35894'}, {'text': 'GHSA-85j6-f8j6-q26x', 'url': 'https://github.com/advisories/GHSA-85j6-f8j6-q26x'}","{'text': 'https://github.com/petertodd/rust-obstack/issues/4', 'url': 'https://github.com/petertodd/rust-obstack/issues/4'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,>=0.1.4,Obstack generates unaligned references for types that require a large alignment. Advisory available underCC0-1.0license.
HIGH,read_scalarandread_scalar_atallow transmuting values withoutunsafeblocks,"April 11, 2020","October  1, 2020(last modified: June 13, 2023)",flatbuffers(crates.io),/packages/flatbuffers.html,Vulnerability,"{'text': 'CVE-2020-35864', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35864'}, {'text': 'GHSA-c9h5-hf8r-m97x', 'url': 'https://github.com/advisories/GHSA-c9h5-hf8r-m97x'}","{'text': 'https://github.com/google/flatbuffers/issues/5825', 'url': 'https://github.com/google/flatbuffers/issues/5825'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=2.0.0,<0.4.0,Version,>=0.4.0,>=0.4.0,"Theread_scalarandread_scalar_atfunctions are unsound
because they allow transmuting values withoutunsafeblocks. The following example shows how to create a dangling reference: Advisory available underCC0-1.0license.",flatbuffers;;read_scalar,>=0.4.0
HIGH,Use after free in ArcIntern::drop,"May 28, 2020","October  1, 2020(last modified: June 13, 2023)",internment(crates.io),/packages/internment.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-35874', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35874'}, {'text': 'GHSA-96w3-p368-4h8c', 'url': 'https://github.com/advisories/GHSA-96w3-p368-4h8c'}","{'text': 'https://github.com/droundy/internment/issues/11', 'url': 'https://github.com/droundy/internment/issues/11'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.4.0,<0.3.12,Version,>=0.3.12,"ArcIntern::drophas a race condition where it can release memory
which is about to get another user. The new user will get a reference
to freed memory. This was fixed by serializing access to an interned object while it
is being deallocated. Versions prior to 0.3.12 used stronger locking which avoided the problem. Advisory available underCC0-1.0license.",internment;;arcintern;;drop,>=0.3.12
HIGH,ChaCha20 counter overflow can expose repetitions in the keystream,"October 22, 2019","October  1, 2020(last modified: June 13, 2023)",chacha20(crates.io),/packages/chacha20.html,Vulnerability,crypto-failure,"{'text': 'CVE-2019-25005', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25005'}, {'text': 'GHSA-j2r6-2m5c-vgh5', 'url': 'https://github.com/advisories/GHSA-j2r6-2m5c-vgh5'}","{'text': 'https://github.com/RustCrypto/stream-ciphers/pull/64', 'url': 'https://github.com/RustCrypto/stream-ciphers/pull/64'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=0.2.3,"The ChaCha20 stream cipher can produce a maximum of 2^32 blocks (~256GB)
before the 32-bit counter overflows. Releases of thechacha20crate prior
to v0.2.3 allow generating keystreams larger than this, including seeking
past the limit. When this occurs, the keystream is duplicated, with failure
modes similar to nonce reuse (i.e. exposure of the XOR of two plaintexts). The v0.2.3 release now panics in this event, rather than exposing the
duplicated keystream. Note this is a ""hot fix"" solution to the problem
and future releases will pursue returning an error in this case. Users of thechacha20poly1305crate are unaffected by this as this crate
properly asserts the length of the plaintext is less than the maximum allowed
(P_MAXas described in RFC 8439 Section 2.8). Advisory available underCC0-1.0license."
HIGH,Use-after-free in BodyStream due to lack of pinning,"January 24, 2020","October  1, 2020(last modified: June 13, 2023)",actix-http(crates.io),/packages/actix-http.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-35901', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35901'}, {'text': 'GHSA-v3j6-xf77-8r9c', 'url': 'https://github.com/advisories/GHSA-v3j6-xf77-8r9c'}","{'text': 'https://github.com/actix/actix-web/issues/1321', 'url': 'https://github.com/actix/actix-web/issues/1321'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=2.0.0-alpha.1,"Affected versions of this crate did not require the buffer wrapped inBodyStreamto be pinned,
but treated it as if it had a fixed location in memory. This may result in a use-after-free. The flaw was corrected by making the traitMessageBodyrequireUnpinand makingpoll_next()function acceptPin<&mut Self>instead of&mut self. Advisory available underCC0-1.0license."
HIGH,"Flaw in offset_of and span_of causes SIGILL, drops uninitialized memory of arbitrary type on panic in client code","July 16, 2019","October  1, 2020(last modified: June 13, 2023)",memoffset(crates.io),/packages/memoffset.html,INFOUnsound,"{'text': 'CVE-2019-15553', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15553'}, {'text': 'GHSA-rh89-x75f-rh3c', 'url': 'https://github.com/advisories/GHSA-rh89-x75f-rh3c'}","{'text': 'https://github.com/Gilnaa/memoffset/issues/9#issuecomment-505461490', 'url': 'https://github.com/Gilnaa/memoffset/issues/9#issuecomment-505461490'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=0.5.0,"Affected versions of this crate caused traps and/or memory unsafety by zero-initializing references.
They also could lead to uninitialized memory being dropped if the field for which the offset is requested was behind a deref coercion, and that deref coercion caused a panic. The flaw was corrected by usingMaybeUninit. Advisory available underCC0-1.0license."
HIGH,LocalRequest::clonecreates multiple mutable references to the same object,"May 27, 2020","October  1, 2020(last modified: June 13, 2023)",rocket(crates.io),/packages/rocket.html,INFOUnsound,"{'text': 'CVE-2020-35882', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35882'}, {'text': 'GHSA-8q2v-67v7-6vc6', 'url': 'https://github.com/advisories/GHSA-8q2v-67v7-6vc6'}","{'text': 'https://github.com/SergioBenitez/Rocket/issues/1312', 'url': 'https://github.com/SergioBenitez/Rocket/issues/1312'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.4.5,<0.4.0,Version,"<0.4.5, >=0.4.0","The affected version ofrocketcontains aClonetrait implementation ofLocalRequestthat reuses the pointer to innerRequestobject.
This causes data race in rare combinations of APIs if the original and the
cloned objects are modified at the same time. Advisory available underCC0-1.0license.",rocket;;local;;localrequest;;clone,"<0.4.5, >=0.4.0"
HIGH,Uncontrolled recursion leads to abort in deserialization,"September 17, 2018","October  1, 2020(last modified: June 13, 2023)",yaml-rust(crates.io),/packages/yaml-rust.html,Vulnerability,,"{'text': 'CVE-2018-20993', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20993'}, {'text': 'GHSA-hv87-47h9-jcvq', 'url': 'https://github.com/advisories/GHSA-hv87-47h9-jcvq'}","{'text': 'https://github.com/chyh1990/yaml-rust/pull/109', 'url': 'https://github.com/chyh1990/yaml-rust/pull/109'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.4.1,"Affected versions of this crate did not prevent deep recursion while
deserializing data structures. This allows an attacker to make a YAML file with deeply nested structures
that causes an abort while deserializing it. The flaw was corrected by checking the recursion depth. Note:clap 2.33is not affected by this because it usesyaml-rustin a way that doesn't trigger the vulnerability. More specifically: Advisory available underCC0-1.0license."
HIGH,Chunk API does not respect align requirement,"August 25, 2020","October  1, 2020(last modified: June 13, 2023)",chunky(crates.io),/packages/chunky.html,INFOUnsound,"{'text': 'CVE-2020-36433', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36433'}, {'text': 'GHSA-qg24-8xj4-gj2h', 'url': 'https://github.com/advisories/GHSA-qg24-8xj4-gj2h'}","{'text': 'https://github.com/aeplay/chunky/issues/2', 'url': 'https://github.com/aeplay/chunky/issues/2'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,no patched versions,"Chunk API does not respect the align requirement of types. Unaligned reference can be created with the API, which is an undefined behavior. Advisory available underCC0-1.0license."
HIGH,Crash causing Denial of Service attack,"April 25, 2020","October  1, 2020(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,denial-of-service,"{'text': 'CVE-2020-1967', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1967'}, {'text': 'GHSA-jq65-29v4-4x35', 'url': 'https://github.com/advisories/GHSA-jq65-29v4-4x35'}","{'text': 'https://www.openssl.org/news/secadv/20200421.txt', 'url': 'https://www.openssl.org/news/secadv/20200421.txt'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=111.9,<111.6,"Server or client applications that call the SSL_check_chain() function during or after a TLS 1.3
handshake may crash due to a NULL pointer dereference as a result of incorrect handling of the
""signature_algorithms_cert"" TLS extension. The crash occurs if an invalid or unrecognised signature
algorithm is received from the peer. This could be exploited by a malicious peer in a Denial of
Service attack. Advisory available underCC0-1.0license."
HIGH,Out of Memory in stream::read_raw_bytes_into(),"June  8, 2019","October  1, 2020(last modified: June 13, 2023)",protobuf(crates.io),/packages/protobuf.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2019-15544', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15544'}, {'text': 'GHSA-mh6h-f25p-98f8', 'url': 'https://github.com/advisories/GHSA-mh6h-f25p-98f8'}","{'text': 'https://github.com/stepancheg/rust-protobuf/issues/411', 'url': 'https://github.com/stepancheg/rust-protobuf/issues/411'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,^1.7.5>=2.6.0,Version,<2.6.0,"Affected versions of this crate called Vec::reserve() on user-supplied input. This allows an attacker to cause an Out of Memory condition while calling the
vulnerable method on untrusted data. Advisory available underCC0-1.0license.",protobuf;;stream;;read_raw_bytes_into,<2.6.0
HIGH,Wrong memory orderings in RwLock potentially violates mutual exclusion,"August 27, 2019","October  1, 2020(last modified: June 13, 2023)",spin(crates.io),/packages/spin.html,Vulnerability,,"{'text': 'CVE-2019-16137', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16137'}, {'text': 'GHSA-hv7x-f3pv-gpwr', 'url': 'https://github.com/advisories/GHSA-hv7x-f3pv-gpwr'}","{'text': 'https://github.com/mvdnes/spin-rs/issues/65', 'url': 'https://github.com/mvdnes/spin-rs/issues/65'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.5.2,Version,<0.5.2,"Wrong memory orderings inside the RwLock implementation allow for two writers to acquire the lock at the same time. The drop implementation used Ordering::Relaxed, which allows the compiler or CPU to reorder a mutable access on the locked data after the lock has been yielded. Only users of the RwLock implementation are affected. Users of Once (including users of lazy_static with thespin_no_stdfeature enabled) are NOT affected. On strongly ordered CPU architectures like x86, the only real way that this would lead to a memory corruption is if the compiler reorders an access after the lock is yielded, which is possible but in practice unlikely. It is a more serious issue on weakly ordered architectures such as ARM which, except in the presence of certain instructions, allow the hardware to decide which accesses are seen at what times. Therefore on an ARM system it is likely that using the wrong memory ordering would result in a memory corruption, even if the compiler itself doesn't reorder the memory accesses in a buggy way. The flaw was corrected by https://github.com/mvdnes/spin-rs/pull/66. Advisory available underCC0-1.0license.",spin;;rwlock;;new,<0.5.2
HIGH,Large cookie Max-Age values can cause a denial of service,"May  6, 2017","October  1, 2020(last modified: June 13, 2023)",cookie(crates.io),/packages/cookie.html,Vulnerability,,"{'text': 'CVE-2017-18589', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18589'}, {'text': 'GHSA-vjrq-cg9x-rfjp', 'url': 'https://github.com/advisories/GHSA-vjrq-cg9x-rfjp'}","{'text': 'https://github.com/alexcrichton/cookie-rs/pull/86', 'url': 'https://github.com/alexcrichton/cookie-rs/pull/86'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,<0.6.0^0.6.2>=0.7.6,"Affected versions of this crate use thetimecrate and the methodDuration::secondsto parse theMax-Ageduration cookie setting. This method
will panic if the value is greater than 2^64/1000 and less than or equal to
2^64, which can result in denial of service for a client or server. This flaw was corrected by explicitly checking for theMax-Agebeing in this
integer range and clamping the value to the maximum duration value. Advisory available underCC0-1.0license."
HIGH,Processing of maliciously crafted length fields causes memory allocation SIGABRTs,"June 13, 2019","October  1, 2020(last modified: June 13, 2023)",asn1_der(crates.io),/packages/asn1_der.html,Vulnerability,,"{'text': 'CVE-2019-15549', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15549'}, {'text': 'GHSA-v5r6-6r3c-wqxc', 'url': 'https://github.com/advisories/GHSA-v5r6-6r3c-wqxc'}","{'text': 'https://github.com/KizzyCode/asn1_der/issues/1', 'url': 'https://github.com/KizzyCode/asn1_der/issues/1'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.6.2,Affected versions of this crate tried to preallocate a vector for an arbitrary amount of bytes announced by the ASN.1-DER length field without further checks. This allows an attacker to trigger a SIGABRT by creating length fields that announce more bytes than the allocator can provide. The flaw was corrected by not preallocating memory. Advisory available underCC0-1.0license.
HIGH,Stack overflow when resolving additional records from MX or SRV null targets,"January  6, 2020","October  1, 2020(last modified: June 13, 2023)",trust-dns-server(crates.io),/packages/trust-dns-server.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2020-35857', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35857'}, {'text': 'GHSA-4cww-f7w5-x525', 'url': 'https://github.com/advisories/GHSA-4cww-f7w5-x525'}","{'text': 'https://github.com/bluejekyll/trust-dns/issues/980', 'url': 'https://github.com/bluejekyll/trust-dns/issues/980'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.18.1,<0.16.0,"There's a stack overflow leading to a crash and potential DOS when processing
additional records for return of MX or SRV record types from the server. This is only possible when a zone is configured with a null target for MX or SRV records, i.e. '.'. Example effected zone record: Prior to 0.16.0 the additional record processing was not supported by trust-dns-server. There
Are no known issues with upgrading from 0.16 or 0.17 to 0.18.1. The remidy should be to upgrade to
0.18.1. If unable to do so, MX, SRV or other record types with a target to the null type, should be avoided. Advisory available underCC0-1.0license."
HIGH,MisbehavingHandleLikeimplementation can lead to memory safety violation,"August 31, 2020","October  1, 2020(last modified: June 13, 2023)",crayon(crates.io),/packages/crayon.html,INFOUnsound,"{'text': 'CVE-2020-35889', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35889'}, {'text': 'GHSA-m833-jv95-mfjh', 'url': 'https://github.com/advisories/GHSA-m833-jv95-mfjh'}","{'text': 'https://github.com/shawnscode/crayon/issues/87', 'url': 'https://github.com/shawnscode/crayon/issues/87'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Unsafe code inObjectPoolhas time-of-check to time-of-use (TOCTOU) bug that
can eventually lead to a memory safety violation.ObjectPoolandHandlePoolimplicitly assumes thatHandleLiketrait methods are pure, i.e., they always
return the same value. However, this assumption is unsound sinceHandleLikeis a safe, public trait that allows a custom implementation. Advisory available underCC0-1.0license."
HIGH,Flaw in streaming state reset() functions can create incorrect results.,"December 20, 2018","October  1, 2020(last modified: June 13, 2023)",orion(crates.io),/packages/orion.html,Vulnerability,"{'text': 'CVE-2018-20999', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20999'}, {'text': 'GHSA-gffv-5hr2-f9gj', 'url': 'https://github.com/advisories/GHSA-gffv-5hr2-f9gj'}","{'text': 'https://github.com/brycx/orion/issues/46', 'url': 'https://github.com/brycx/orion/issues/46'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.11.2,"Affected versions of this crate did not properly reset a streaming state. Resetting a streaming state, without finalising it first, creates incorrect results. The flaw was corrected by not first checking if the state had already been reset, when calling reset(). Advisory available underCC0-1.0license."
HIGH,tokio-rustls reads may cause excessive memory usage,"May 19, 2020","October  1, 2020(last modified: June 13, 2023)",tokio-rustls(crates.io),/packages/tokio-rustls.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2020-35875', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35875'}, {'text': 'GHSA-2jfv-g3fh-xq3v', 'url': 'https://github.com/advisories/GHSA-2jfv-g3fh-xq3v'}","{'text': 'https://github.com/tokio-rs/tls/pull/14', 'url': 'https://github.com/tokio-rs/tls/pull/14'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,">=0.12.3, <0.13.0>=0.13.1",<0.12,"tokio-rustlsdoes not callprocess_new_packetsimmediately afterread,
so the expected termination conditionwants_readalways returns true.
As long as new incoming data arrives faster than it is processed
and the reader does not return pending, data will be buffered. This may cause DoS. Advisory available underCC0-1.0license."
HIGH,Stack overflow when parsing malicious DNS packet,"October  9, 2018","October  1, 2020(last modified: June 13, 2023)",trust-dns-proto(crates.io),/packages/trust-dns-proto.html,Vulnerability,,"{'text': 'CVE-2018-20994', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20994'}, {'text': 'GHSA-369h-pjr2-6wrh', 'url': 'https://github.com/advisories/GHSA-369h-pjr2-6wrh'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.4.3,"There's a stack overflow leading to a crash when Trust-DNS's parses a
malicious DNS packet. Affected versions of this crate did not properly handle parsing of DNS message
compression (RFC1035 section 4.1.4). The parser could be tricked into infinite
loop when a compression offset pointed back to the same domain name to be
parsed. This allows an attacker to craft a malicious DNS packet which when consumed
with Trust-DNS could cause stack overflow and crash the affected software. The flaw was corrected by trust-dns-proto 0.4.3 and upcoming 0.5.0 release. Advisory available underCC0-1.0license."
HIGH,Improper uniqueness verification of signature threshold,"July  9, 2020","October  1, 2020(last modified: October 19, 2021)",tough(crates.io),/packages/tough.html,Vulnerability,"{'text': 'CVE-2020-15093', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15093'}, {'text': 'GHSA-5q2r-92f9-4m49', 'url': 'https://github.com/advisories/GHSA-5q2r-92f9-4m49'}","{'text': 'https://github.com/awslabs/tough/security/advisories/GHSA-5q2r-92f9-4m49', 'url': 'https://github.com/awslabs/tough/security/advisories/GHSA-5q2r-92f9-4m49'}",CVE-2020-6174,8.6HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Changed,None,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeChangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Changed,None,High,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:N,>=0.7.1,"The tough library, prior to 0.7.1, does not properly verify the uniqueness of
keys in the signatures provided to meet the threshold of cryptographic
signatures. It allows someone with access to a valid signing key to create
multiple valid signatures in order to circumvent TUF requiring a minimum
threshold of unique keys before the metadata is considered valid. AWS would like to thank Erick Tryzelaar of the Google Fuchsia Team for
reporting this issue. A fix is available in version 0.7.1. CVE-2020-6174 is assigned to the same issue in the TUF reference
implementation. If you have any questions or comments about this advisory, contact AWS Security
at aws-security@amazon.com. Advisory available underCC0-1.0license."
HIGH,fix unsound APIs that could lead to UB,"September  6, 2019","October  1, 2020(last modified: June 13, 2023)",generator(crates.io),/packages/generator.html,Vulnerability,,"{'text': 'CVE-2019-16144', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16144'}, {'text': 'GHSA-6c65-xcf5-299x', 'url': 'https://github.com/advisories/GHSA-6c65-xcf5-299x'}","{'text': 'https://github.com/Xudong-Huang/generator-rs/issues/9', 'url': 'https://github.com/Xudong-Huang/generator-rs/issues/9'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.6.18,"Affected versions of this crate API could use uninitialized memory with some APIs in special
cases, like use the API in none generator context. This could lead to UB.
The flaw was corrected byhttps://github.com/Xudong-Huang/generator-rs/issues/9https://github.com/Xudong-Huang/generator-rs/issues/11https://github.com/Xudong-Huang/generator-rs/issues/13https://github.com/Xudong-Huang/generator-rs/issues/14This patch fixes all those issues above. Advisory available underCC0-1.0license."
HIGH,Failure to properly verify ed25519 signatures makes any signature valid,"May 15, 2019","October  1, 2020(last modified: June 13, 2023)",libp2p-core(crates.io),/packages/libp2p-core.html,Vulnerability,"{'text': 'CVE-2019-15545', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15545'}, {'text': 'GHSA-4q4x-67hx-5mpg', 'url': 'https://github.com/advisories/GHSA-4q4x-67hx-5mpg'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,^0.7.1>=0.8.1,<0.3,"Affected versions of this crate did not properly verify ed25519 signatures.
Any signature with a correct length was considered valid. This allows an attacker to impersonate any node identity. Advisory available underCC0-1.0license."
HIGH,An integer underflow could lead to panic,"June 21, 2018","October  1, 2020(last modified: June 13, 2023)",untrusted(crates.io),/packages/untrusted.html,Vulnerability,,"{'text': 'CVE-2018-20989', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20989'}, {'text': 'GHSA-wq8f-46ww-6c2h', 'url': 'https://github.com/advisories/GHSA-wq8f-46ww-6c2h'}","{'text': 'https://github.com/briansmith/untrusted/pull/20', 'url': 'https://github.com/briansmith/untrusted/pull/20'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.6.2,"A mistake in error handling in untrusted before 0.6.2 could lead to an integer
underflow and panic if a user of the crate didn't properly check for errors
returned by untrusted. Combination of these two programming errors (one in untrusted and another by
user of this crate) could lead to a panic and maybe a denial of service of
affected software. The error in untrusted is fixed in release 0.6.2 released 2018-06-21. It's also
advisable that users of untrusted check for their sources for cases where errors
returned by untrusted are not handled correctly. Advisory available underCC0-1.0license."
HIGH,Flaw in Scalar::check_overflow allows side-channel timing attack,"October 14, 2019","October  1, 2020(last modified: June 13, 2023)",libsecp256k1(crates.io),/packages/libsecp256k1.html,Vulnerability,crypto-failure,,"{'text': 'CVE-2019-25003', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25003'}, {'text': 'GHSA-hrjm-c879-pp86', 'url': 'https://github.com/advisories/GHSA-hrjm-c879-pp86'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=0.3.1,Version,<0.3.1,"Versions oflibsecp256k1prior to0.3.1did not execute
Scalar::check_overflow in constant time. This allows an attacker to potentially leak information via a timing attack. The flaw was corrected by modifying Scalar::check_overflow to execute in
constant time. Advisory available underCC0-1.0license.",libsecp256k1;;scalar;;check_overflow,<0.3.1
HIGH,Memory safety issues incompact::Vec,"September  3, 2020","October  1, 2020(last modified: June 13, 2023)",ordnung(crates.io),/packages/ordnung.html,Vulnerability,"{'text': 'CVE-2020-35890', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35890'}, {'text': 'CVE-2020-35891', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35891'}, {'text': 'GHSA-4wj3-p7hj-cvx8', 'url': 'https://github.com/advisories/GHSA-4wj3-p7hj-cvx8'}, {'text': 'GHSA-qrwc-jxf5-g8x6', 'url': 'https://github.com/advisories/GHSA-qrwc-jxf5-g8x6'}","{'text': 'https://github.com/maciejhirsz/ordnung/issues/8', 'url': 'https://github.com/maciejhirsz/ordnung/issues/8'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,no patched versions,compact::Veccontains multiple memory safety issues. Advisory available underCC0-1.0license.
HIGH,Flaw in string parsing can lead to crashes due to invalid memory access.,"June 24, 2019","October  1, 2020(last modified: June 13, 2023)",simd-json(crates.io),/packages/simd-json.html,Vulnerability,,"{'text': 'CVE-2019-15550', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15550'}, {'text': 'GHSA-gwfj-pw2x-h6c2', 'url': 'https://github.com/advisories/GHSA-gwfj-pw2x-h6c2'}","{'text': 'https://github.com/Licenser/simdjson-rs/pull/27', 'url': 'https://github.com/Licenser/simdjson-rs/pull/27'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.1.15,<=0.1.13,x86x86_64,"The affected version of this crate did not guard against accessing memory
beyond the range of its input data. A pointer cast to read the data into
a 256-bit register could lead to a segmentation fault when the end plus
the 32 bytes (256 bit) read would overlap into the next page during string
parsing. This allows an attacker to eventually crash a service. The flaw was corrected by using a padding buffer for the last read from the
input. So that we are we never read over the boundary of the input data. Advisory available underCC0-1.0license."
HIGH,Links in archives can overwrite any existing file,"June 29, 2018","October  1, 2020(last modified: June 13, 2023)",tar(crates.io),/packages/tar.html,Vulnerability,,"{'text': 'CVE-2018-20990', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20990'}, {'text': 'GHSA-2367-c296-3mp2', 'url': 'https://github.com/advisories/GHSA-2367-c296-3mp2'}","{'text': 'https://github.com/alexcrichton/tar-rs/pull/156', 'url': 'https://github.com/alexcrichton/tar-rs/pull/156'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,>=0.4.16,"When unpacking a tarball with theunpack_in-family of functions it's intended
that only files within the specified directory are able to be written. Tarballs
with hard links or symlinks, however, can be used to overwrite any file on the
filesystem. Tarballs can contain multiple entries for the same file. A tarball which first
contains an entry for a hard link or symlink pointing to any file on the
filesystem will have the link created, and then afterwards if the same file is
listed in the tarball the hard link will be rewritten and any file can be
rewritten on the filesystem. This has been fixed in https://github.com/alexcrichton/tar-rs/pull/156 and is
published astar0.4.16. Thanks to Max Justicz for discovering this and
emailing about the issue! Advisory available underCC0-1.0license."
HIGH,Flaw in CBOR deserializer allows stack overflow,"October  3, 2019","October  1, 2020(last modified: June 13, 2023)",serde_cbor(crates.io),/packages/serde_cbor.html,Vulnerability,crypto-failure,,"{'text': 'CVE-2019-25001', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25001'}, {'text': 'GHSA-xr7r-88qv-q7hm', 'url': 'https://github.com/advisories/GHSA-xr7r-88qv-q7hm'}","{'text': 'https://github.com/pyfisch/cbor/releases/tag/v0.10.2', 'url': 'https://github.com/pyfisch/cbor/releases/tag/v0.10.2'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.10.2,Affected versions of this crate did not properly check if semantic tags were nested excessively during deserialization. This allows an attacker to craft small (< 1 kB) CBOR documents that cause a stack overflow. The flaw was corrected by limiting the allowed number of nested tags. Advisory available underCC0-1.0license.
HIGH,Panic during initialization of Lazymight trigger undefined behavior,"September  1, 2019","October  1, 2020(last modified: June 13, 2023)",once_cell(crates.io),/packages/once_cell.html,Vulnerability,,"{'text': 'CVE-2019-16141', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16141'}, {'text': 'GHSA-7j44-fv4x-79g9', 'url': 'https://github.com/advisories/GHSA-7j44-fv4x-79g9'}","{'text': 'https://github.com/matklad/once_cell/issues/46', 'url': 'https://github.com/matklad/once_cell/issues/46'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=1.0.1,<0.2.5,Version,"<1.0.1, >=0.2.5","<1.0.1, >=0.2.5","<1.0.1, >=0.2.5","<1.0.1, >=0.2.5","If during the first dereference of Lazythe initialization function panics,
subsequent dereferences will executestd::hints::unreachable_unchecked. Applications withpanic = ""abort""are not affected, as there will be no
subsequent dereferences. Advisory available underCC0-1.0license.",once_cell;;sync;;lazy;;deref,"<1.0.1, >=0.2.5"
HIGH,Relies on undefined behavior ofchar::from_u32_unchecked,"April 24, 2020","October  1, 2020(last modified: June 13, 2023)",os_str_bytes(crates.io),/packages/os_str_bytes.html,Vulnerability,"{'text': 'CVE-2020-35865', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35865'}, {'text': 'GHSA-q948-x8rf-888m', 'url': 'https://github.com/advisories/GHSA-q948-x8rf-888m'}","{'text': 'https://github.com/dylni/os_str_bytes/pull/1', 'url': 'https://github.com/dylni/os_str_bytes/pull/1'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=2.0.0,windows,"The Windows implementation of this crate relied on the behavior ofstd::char::from_u32_uncheckedwhen its safety clause is violated.
Even though this worked with Rust versions up to 1.42 (at least),
that behavior could change with any new Rust version, possibly leading
a security issue. The flaw was corrected in version 2.0.0. Advisory available underCC0-1.0license."
HIGH,Format string vulnerabilities inpancurses,"June 15, 2019","October  1, 2020(last modified: June 13, 2023)",pancurses(crates.io),/packages/pancurses.html,Vulnerability,"{'text': 'CVE-2019-15546', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15546'}, {'text': 'GHSA-m57c-4vvx-gjgq', 'url': 'https://github.com/advisories/GHSA-m57c-4vvx-gjgq'}","{'text': 'https://github.com/RustSec/advisory-db/issues/106', 'url': 'https://github.com/RustSec/advisory-db/issues/106'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityNone,None,None,Unchanged,None,High,None,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N,no patched versions,Version,>=0,>=0,"pancurses::mvprintwandpancurses::printwpasses a pointer from a rust&strto C,
allowing hostile input to execute a format string attack, which trivially allows writing
arbitrary data to stack memory. Advisory available underCC0-1.0license.",pancurses;;mvprintw,>=0
HIGH,Cloned interners may read already dropped strings,"August 24, 2019","October  1, 2020(last modified: June 13, 2023)",string-interner(crates.io),/packages/string-interner.html,Vulnerability,,"{'text': 'CVE-2019-16882', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16882'}, {'text': 'GHSA-49fq-pw77-6qxj', 'url': 'https://github.com/advisories/GHSA-49fq-pw77-6qxj'}","{'text': 'https://github.com/Robbepop/string-interner/issues/9', 'url': 'https://github.com/Robbepop/string-interner/issues/9'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,^0.6.4>=0.7.1,"Affected versions of this crate did not clone contained strings when an interner is cloned.
Interners have raw pointers to the contained strings, and they keep pointing the strings which the old interner owns, after the interner is cloned.
If a new cloned interner is alive and the old original interner is dead, the new interner has dangling pointers to the old interner's storage, which is already dropped. This allows an attacker to read the already freed memory.
The dangling pointers are used by the interners to check a string is already interned.
An attacker can do brute force attack to get the data pointed by the dangling pointer. The flaw was corrected byhttps://github.com/Robbepop/string-interner/pull/10.
This patch implementsClonemanually to the interner type, so that the internal raw pointers always point the strings owned by the same interner. PR #10 was also backported to the 0.6 release line inhttps://github.com/Robbepop/string-interner/pull/14and was released in 0.6.4. Advisory available underCC0-1.0license."
HIGH,Multiple soundness issues in Chunk and InlineArray,"September  6, 2020","October  1, 2020(last modified: June 13, 2023)",sized-chunks(crates.io),/packages/sized-chunks.html,Vulnerability,"{'text': 'CVE-2020-25791', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25791'}, {'text': 'CVE-2020-25792', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25792'}, {'text': 'CVE-2020-25793', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25793'}, {'text': 'CVE-2020-25794', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25794'}, {'text': 'CVE-2020-25795', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25795'}, {'text': 'CVE-2020-25796', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25796'}, {'text': 'GHSA-64gv-qg2v-vxv6', 'url': 'https://github.com/advisories/GHSA-64gv-qg2v-vxv6'}, {'text': 'GHSA-9p9m-9xww-qjcx', 'url': 'https://github.com/advisories/GHSA-9p9m-9xww-qjcx'}, {'text': 'GHSA-fqpx-cq8x-9wp4', 'url': 'https://github.com/advisories/GHSA-fqpx-cq8x-9wp4'}, {'text': 'GHSA-mp6f-p9gp-vpj9', 'url': 'https://github.com/advisories/GHSA-mp6f-p9gp-vpj9'}, {'text': 'GHSA-rfgg-vccr-m46m', 'url': 'https://github.com/advisories/GHSA-rfgg-vccr-m46m'}, {'text': 'GHSA-x54v-qxxr-93qc', 'url': 'https://github.com/advisories/GHSA-x54v-qxxr-93qc'}","{'text': 'https://github.com/bodil/sized-chunks/issues/11', 'url': 'https://github.com/bodil/sized-chunks/issues/11'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.6.3,Chunk: InlineArray: Advisory available underCC0-1.0license.
HIGH,Flaw inreallocallows reading unknown memory,"March 24, 2020","October  1, 2020(last modified: June 13, 2023)",bumpalo(crates.io),/packages/bumpalo.html,Vulnerability,memory-exposure,"{'text': 'CVE-2020-35861', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35861'}, {'text': 'GHSA-vqx7-pw4r-29rr', 'url': 'https://github.com/advisories/GHSA-vqx7-pw4r-29rr'}","{'text': 'https://github.com/fitzgen/bumpalo/issues/69', 'url': 'https://github.com/fitzgen/bumpalo/issues/69'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityNone,None,None,Unchanged,High,None,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N,>=3.2.1,<3.0.0,"Whenreallocing, if we allocate new space, we need to copy the old
allocation's bytes into the new space. There areold_sizenumber of bytes in
the old allocation, but we were accidentally copyingnew_sizenumber of bytes,
which could lead to copying bytes into the realloc'd space from past the chunk
that we're bump allocating out of, from unknown memory. If an attacker can causereallocs, and can read therealoced data back,
this could allow them to read things from other regions of memory that they
shouldn't be able to. For example, if some crypto keys happened to live in
memory right after a chunk we were bump allocating out of, this could allow
the attacker to read the crypto keys. Beyond just fixing the bug and adding a regression test, I've also taken two
additional steps: Advisory available underCC0-1.0license."
HIGH,Integer Overflow in HeaderMap::reserve() can cause Denial of Service,"November 16, 2019","October  1, 2020(last modified: June 13, 2023)",http(crates.io),/packages/http.html,Vulnerability,denial-of-service,,"{'text': 'CVE-2019-25008', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25008'}, {'text': 'CVE-2020-25574', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25574'}, {'text': 'GHSA-x7vr-c387-8w57', 'url': 'https://github.com/advisories/GHSA-x7vr-c387-8w57'}, {'text': 'GHSA-xvc9-xwgj-4cq9', 'url': 'https://github.com/advisories/GHSA-xvc9-xwgj-4cq9'}","{'text': 'https://github.com/hyperium/http/issues/352', 'url': 'https://github.com/hyperium/http/issues/352'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=0.1.20,Version,<0.1.20,"HeaderMap::reserve()usedusize::next_power_of_two()to calculate the increased capacity.
However,next_power_of_two()silently overflows to 0 if given a sufficiently large number
in release mode. If the map was not empty when the overflow happens,
the library will invokeself.grow(0)and start infinite probing.
This allows an attacker who controls the argument toreserve()to cause a potential denial of service (DoS). The flaw was corrected in 0.1.20 release ofhttpcrate. Advisory available underCC0-1.0license.",http;;header;;headermap;;reserve,<0.1.20
HIGH,SSL/TLS MitM vulnerability due to insecure defaults,"November  5, 2016","October  1, 2020(last modified: June 13, 2023)",openssl(crates.io),/packages/openssl.html,Vulnerability,,"{'text': 'CVE-2016-10931', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-10931'}, {'text': 'GHSA-34p9-f4q3-c4r7', 'url': 'https://github.com/advisories/GHSA-34p9-f4q3-c4r7'}","{'text': 'https://github.com/sfackler/rust-openssl/releases/tag/v0.9.0', 'url': 'https://github.com/sfackler/rust-openssl/releases/tag/v0.9.0'}",8.1HIGH,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,HighPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.9.0,"All versions of rust-openssl prior to 0.9.0 contained numerous insecure defaults
including off-by-default certificate verification and no API to perform hostname
verification. Unless configured correctly by a developer, these defaults could allow an attacker
to perform man-in-the-middle attacks. The problem was addressed in newer versions by enabling certificate verification
by default and exposing APIs to perform hostname verification. Use theSslConnectorandSslAcceptortypes to take advantage of these new features
(as opposed to the lower-levelSslContexttype). Advisory available underCC0-1.0license."
HIGH,Uncontrolled recursion leads to abort in HTML serialization,"April 27, 2019","October  1, 2020(last modified: June 13, 2023)",ammonia(crates.io),/packages/ammonia.html,Vulnerability,,"{'text': 'CVE-2019-15542', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15542'}, {'text': 'GHSA-5hp8-35wj-m525', 'url': 'https://github.com/advisories/GHSA-5hp8-35wj-m525'}","{'text': 'https://github.com/rust-ammonia/ammonia/blob/master/CHANGELOG.md#210', 'url': 'https://github.com/rust-ammonia/ammonia/blob/master/CHANGELOG.md#210'}",7.5HIGH,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityHigh,None,None,Unchanged,None,None,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,>=2.1.0,Version,<2.1.0,<2.1.0,<2.1.0,"Affected versions of this crate did use recursion for serialization of HTML
DOM trees. This allows an attacker to cause abort due to stack overflow by providing
a pathologically nested input. The flaw was corrected by serializing the DOM tree iteratively instead. Advisory available underCC0-1.0license.",ammonia;;document;;to_string,<2.1.0
HIGH,Uncontrolled search path element vulnerability in rustdoc plugins,"July  5, 2018","October  1, 2020",rustdoc,/packages/rustdoc.html,Vulnerability,code-execution,"{'text': 'https://groups.google.com/forum/#!topic/rustlang-security-announcements/4ybxYLTtXuM', 'url': 'https://groups.google.com/forum/#!topic/rustlang-security-announcements/4ybxYLTtXuM'}",7.8HIGH,Local,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,Required,Unchanged,High,High,High,Local,LowPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,Required,Unchanged,High,High,High,CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H,>1.27.0,"Rustdoc, if not passed the--plugin-pathargument, defaults to/tmp/rustdoc/plugins./tmpis world-writable on many systems, and so an
attacker could craft a malicious plugin, place it in that directory, and the
victim would end up executing their code. This only occurs when the--pluginargument is also passed. If you're not using that argument, then
the loading, and therefore the bug, will not happen. Because this feature is very difficult to use, and has been deprecated for
almost a year2with no comments on its usage, we don't expect this to
affect many users. For more details, read on. Rustdoc has a ""plugins"" feature that lets you extend rustdoc. To write a
plugin, you create a library with a specific exposed symbol. You instruct
rustdoc to use this plugin, and it will load it, and execute the function as
a callback to modify rustdoc's AST. This feature is quite hard to use, because the function needs to take as
input and return as output Rustdoc's AST type. The Rust project does not ship
a copy oflibrustdocto end users, and so they would have to synthesize
this type on their own. Furthermore, Rust's ABI is unstable, and so
dynamically loading a plugin is only guaranteed to work if the plugin is
compiled with the same compiler revision as the rustdoc that you're using.
Beyond that, the feature and how to use it are completely undocumented. Given all of this, we're not aware of any usage of plugins in the wild,
though the functionality still exists in the codebase. If you pass the--pluginsparameter, let's say with ""foo"", anddo notpass the--plugin-pathparameter, rustdoc will look for the ""foo"" plugin
in /tmp/rustdoc/plugins. Given that /tmp is world-writable on many systems,
an attacker with access to your machine could place a maliciously crafted
plugin into /tmp/rustdoc/plugins, and rustdoc would then load the plugin,
and execute the attacker's callback, running arbitrary Rust code as your
user instead of theirs. This functionality was introduced into rustdoc on December 31, 2013, in commit
14f59e890207f3b7a70bcfffaea7ad88656041113. That change was to rename/tmp/rustdoc_ng/pluginsto/tmp/rustdoc/plugins; The addition of this
search path generally came with the first commit to this iteration of rustdoc,
on September 22, 2013, in commit 7b24efd6f333620ed2559d70b32da8f6f99573854. To prevent this bug from happening on any version of Rust, you can always
pass the--plugin-pathflag to control the path. This only applies if
you use the--pluginflag in the first place. For Rust 1.27, we'll be releasing a 1.27.1 on Tuesday with the fix, which
consists of requiring--plugin-pathto be passed whenever--pluginis passed. We will not be releasing our own fixes for previous versions of Rust, given
the low severity and impact of this bug. The patch to fix 1.27 should be
trivially applicable to previous versions, as this code has not changed in
a very long time. The patch is included at the end of this email. If you
need assistance patching an older version of Rust on your own, please reach
out to Steve Klabnik, st...@steveklabnik.com, and he'll be happy to help. On beta and nightly we will be removing plugins entirely. Thanks to Red Hat Product Security, which found this bug. And specifically to
Josh Stone, who took their findings and reported it to us in accordance with
our security policy https://www.rust-lang.org/security.html, as well as providing
feedback on the patch itself. You can find their bug at5. Advisory available underCC0-1.0license."
LOW,sudo-rs: Path Traversal vulnerability,"November  1, 2023","November  6, 2023",sudo-rs(crates.io),/packages/sudo-rs.html,Vulnerability,file-disclosure,,"{'text': 'CVE-2023-42456', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-42456'}, {'text': 'GHSA-2r3c-m6v7-9354', 'url': 'https://github.com/advisories/GHSA-2r3c-m6v7-9354'}","{'text': 'https://github.com/advisories/GHSA-2r3c-m6v7-9354', 'url': 'https://github.com/advisories/GHSA-2r3c-m6v7-9354'}, {'text': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-42456', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-42456'}",3.1LOW,Local,LowPrivileges requiredHighUser interactionRequiredScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityLow,High,Required,Unchanged,None,Low,Low,Local,LowPrivileges requiredHighUser interactionRequiredScopeUnchangedConfidentialityNoneIntegrityLowAvailabilityLow,High,Required,Unchanged,None,Low,Low,CVSS:3.1/AV:L/AC:L/PR:H/UI:R/S:U/C:N/I:L/A:L,>=0.2.1,"An issue was discovered where usernames containing the . and / characters could result in the corruption of specific files on the filesystem. As usernames are generally not limited by the characters they can contain, a username appearing to be a relative path can be constructed. For example we could add a user to the system containing the username ../../../../bin/cp. When logged in as a user with that name, that user could run sudo -K to clear their session record file. The session code then constructs the path to the session file by concatenating the username to the session file storage directory, resulting in a resolved path of /bin/cp. The code then clears that file, resulting in the cp binary effectively being removed from the system. An attacker needs to be able to login as a user with a constructed username. Given that such a username is unlikely to exist on an existing system, they will also need to be able to create the users with the constructed usernames. The bug is fixed in version 0.2.1 of sudo-rs. Sudo-rs now uses the uid for the user instead of their username for determining the filename. Note that an upgrade to this version will result in existing session files being ignored and users will be forced to re-authenticate. It also fully eliminates any possibility of path traversal, given that uids are always integer values. The issue was corrected in commitbfdbda22968e3de43fa8246cab1681cfd5d5493d. Advisory available underCC0-1.0license."
LOW,"Default functions in VolatileMemory trait lack bounds checks, potentially leading to out-of-bounds memory accesses","September  1, 2023","September  6, 2023",vm-memory(crates.io),/packages/vm-memory.html,INFOUnsound,memory-exposure,"{'text': 'CVE-2023-41051', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-41051'}, {'text': 'GHSA-49hh-fprx-m68g', 'url': 'https://github.com/advisories/GHSA-49hh-fprx-m68g'}","{'text': 'https://github.com/rust-vmm/vm-memory/issues/250', 'url': 'https://github.com/rust-vmm/vm-memory/issues/250'}, {'text': 'https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8', 'url': 'https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8'}",2.5LOW,Local,HighPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityLow,None,Required,Unchanged,None,None,Low,Local,HighPrivileges requiredNoneUser interactionRequiredScopeUnchangedConfidentialityNoneIntegrityNoneAvailabilityLow,None,Required,Unchanged,None,None,Low,CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:U/C:N/I:N/A:L,>=0.12.2,Version,<0.12.2,<0.12.2,<0.12.2,<0.12.2,<0.12.2,"An issue was discovered in the default implementations of theVolatileMemory::{get_atomic_ref, aligned_as_ref, aligned_as_mut, get_ref, get_array_ref}trait functions, which allows out-of-bounds memory access if theVolatileMemory::get_slicefunction returns aVolatileSlicewhose length is less than the function’scountargument. No implementations ofget_sliceprovided invm_memoryare affected. Users of customVolatileMemoryimplementations may be impacted if the custom implementation does not adhere toget_slice's documentation. The issue started in version 0.1.0 but was fixed in version 0.12.2 by inserting a check that verifies that theVolatileSlicereturned byget_sliceis of the correct length. Advisory available underCC0-1.0license.",vm_memory;;volatile_memory;;volatilememory;;aligned_as_mut,<0.12.2
LOW,taurifilesystem scope partial bypass,"September 19, 2022","February 25, 2023",tauri(crates.io),/packages/tauri.html,Vulnerability,privilege-escalation,"{'text': 'CVE-2022-41874', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41874'}, {'text': 'GHSA-q9wv-22m9-vhqh', 'url': 'https://github.com/advisories/GHSA-q9wv-22m9-vhqh'}","{'text': 'https://github.com/tauri-apps/tauri/issues/5234', 'url': 'https://github.com/tauri-apps/tauri/issues/5234'}",2.3LOW,Local,HighPrivileges requiredHighUser interactionRequiredScopeChangedConfidentialityLowIntegrityNoneAvailabilityNone,High,Required,Changed,Low,None,None,Local,HighPrivileges requiredHighUser interactionRequiredScopeChangedConfidentialityLowIntegrityNoneAvailabilityNone,High,Required,Changed,Low,None,None,CVSS:3.1/AV:L/AC:H/PR:H/UI:R/S:C/C:L/I:N/A:N,">=1.0.7, <1.1.0>=1.1.2",<1.0.0,A bug identified inthisissue allows a partial filesystem scope bypass if glob characters are used within file dialog or drag-and-drop functionalities. ThisPR fixes the issue by escaping glob characters. Advisory available underCC0-1.0license.
LOW,File exposure in pleaser,"May 27, 2021","September  9, 2021(last modified: September 10, 2021)",pleaser(crates.io),/packages/pleaser.html,Vulnerability,file-disclosure,"{'text': 'CVE-2021-31153', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-31153'}, {'text': 'GHSA-f3fg-5j9p-vchc', 'url': 'https://github.com/advisories/GHSA-f3fg-5j9p-vchc'}","{'text': 'https://nvd.nist.gov/vuln/detail/CVE-2021-31153', 'url': 'https://nvd.nist.gov/vuln/detail/CVE-2021-31153'}",3.3LOW,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityLowIntegrityNoneAvailabilityNone,Low,None,Unchanged,Low,None,None,Local,LowPrivileges requiredLowUser interactionNoneScopeUnchangedConfidentialityLowIntegrityNoneAvailabilityNone,Low,None,Unchanged,Low,None,None,CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N,>=0.4,"pleaser before 0.4 allows a local unprivileged attacker to gain knowledge about the existence of files or directories in privileged locations via the search_path function, the --check option, or the -d option. Advisory available underCC0-1.0license."
CRITICAL,Memory corruption in liblz4,"August 25, 2022","August 26, 2022(last modified: June 13, 2023)",lz4-sys(crates.io),/packages/lz4-sys.html,Vulnerability,memory-corruption,,"{'text': 'GHSA-9q5j-jm53-v7vr', 'url': 'https://github.com/advisories/GHSA-9q5j-jm53-v7vr'}","{'text': 'https://github.com/lz4/lz4/pull/972', 'url': 'https://github.com/lz4/lz4/pull/972'}",CVE-2021-3520,9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=1.9.4,"lz4-sys up to v1.9.3 bundles a version of liblz4 that is vulnerable toCVE-2021-3520. Attackers could craft a payload that triggers an integer overflow upon
decompression, causing an out-of-bounds write. The flaw has been corrected in version v1.9.4 of liblz4, which is included
in lz4-sys 1.9.4. Advisory available underCC0-1.0license."
CRITICAL,Generated code can read and write out of bounds in safe code,"October 31, 2021","November  7, 2021(last modified: June 13, 2023)",flatbuffers(crates.io),/packages/flatbuffers.html,Vulnerability,"{'text': 'GHSA-3jch-9qgp-4844', 'url': 'https://github.com/advisories/GHSA-3jch-9qgp-4844'}","{'text': 'https://github.com/google/flatbuffers/issues/6627', 'url': 'https://github.com/google/flatbuffers/issues/6627'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=22.9.29,"Code generated by flatbuffers' compiler isunsafebut not marked as such.
See https://github.com/google/flatbuffers/issues/6627 for details. For example, if generated code is used to decode malformed or untrusted input,
undefined behavior (and thus security vulnerabilities) is possible even without
the use of theunsafekeyword,violating the the meaning of ""safe""code; All users that use generated code byflatbufferscompiler are recommended to: Advisory available underCC0-1.0license."
CRITICAL,SM2 Decryption Buffer Overflow,"August 24, 2021","August 24, 2021(last modified: June 13, 2023)",openssl-src(crates.io),/packages/openssl-src.html,Vulnerability,crypto-failure,"{'text': 'CVE-2021-3711', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-3711'}, {'text': 'GHSA-5ww6-px42-wc85', 'url': 'https://github.com/advisories/GHSA-5ww6-px42-wc85'}","{'text': 'https://www.openssl.org/news/secadv/20210824.txt', 'url': 'https://www.openssl.org/news/secadv/20210824.txt'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=111.16,"In order to decrypt SM2 encrypted data an application is expected to call the
API functionEVP_PKEY_decrypt(). Typically an application will call this
function twice. The first time, on entry, the ""out"" parameter can be NULL and,
on exit, the ""outlen"" parameter is populated with the buffer size required to
hold the decrypted plaintext. The application can then allocate a sufficiently
sized buffer and callEVP_PKEY_decrypt()again, but this time passing a non-NULL
value for the ""out"" parameter. A bug in the implementation of the SM2 decryption code means that the
calculation of the buffer size required to hold the plaintext returned by the
first call toEVP_PKEY_decrypt()can be smaller than the actual size required by
the second call. This can lead to a buffer overflow whenEVP_PKEY_decrypt()is
called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an
application could cause attacker chosen data to overflow the buffer by up to a
maximum of 62 bytes altering the contents of other data held after the
buffer, possibly changing application behaviour or causing the application to
crash. The location of the buffer is application dependent but is typically
heap allocated. Advisory available underCC0-1.0license."
CRITICAL,Data race in crossbeam-deque,"July 30, 2021","August 21, 2021(last modified: October 19, 2021)",crossbeam-deque(crates.io),/packages/crossbeam-deque.html,Vulnerability,memory-corruption,"{'text': 'GHSA-pqqp-xmhj-wgcw', 'url': 'https://github.com/advisories/GHSA-pqqp-xmhj-wgcw'}, {'text': 'CVE-2021-32810', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-32810'}","{'text': 'https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-pqqp-xmhj-wgcw', 'url': 'https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-pqqp-xmhj-wgcw'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,">=0.7.4, <0.8.0>=0.8.1","In the affected version of this crate, the result of the race condition is that one or more tasks in the worker queue can be popped twice instead of other tasks that are forgotten and never popped. If tasks are allocated on the heap, this can cause double free and a memory leak. If not, this still can cause a logical bug. Crates usingStealer::steal,Stealer::steal_batch, orStealer::steal_batch_and_popare affected by this issue. Credits to @kmaork for discovering, reporting and fixing the bug. Advisory available underCC0-1.0license."
CRITICAL,Integer overflow inhyper's parsing of theTransfer-Encodingheader leads to data loss,"July  7, 2021","August  8, 2021(last modified: October 19, 2021)",hyper(crates.io),/packages/hyper.html,Vulnerability,,"{'text': 'CVE-2021-32714', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-32714'}, {'text': 'GHSA-5h46-h7hh-c6x9', 'url': 'https://github.com/advisories/GHSA-5h46-h7hh-c6x9'}","{'text': 'https://github.com/hyperium/hyper/security/advisories/GHSA-5h46-h7hh-c6x9', 'url': 'https://github.com/hyperium/hyper/security/advisories/GHSA-5h46-h7hh-c6x9'}",9.1CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,None,None,Unchanged,None,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,None,None,Unchanged,None,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H,>=0.14.10,"When decoding chunk sizes that are too large,hyper's code would encounter an integer overflow. Depending on the situation,
this could lead to data loss from an incorrect total size, or in rarer cases, a request smuggling attack. To be vulnerable, you must be usinghyperfor any HTTP/1 purpose, including as a client or server, and consumers must send
requests or responses that specify a chunk size greater than 18 exabytes. For a possible request smuggling attack to be possible,
any upstream proxies must accept a chunk size greater than 64 bits. Advisory available underCC0-1.0license."
CRITICAL,grep-climay run arbitrary executables on Windows,"June 12, 2021","June 15, 2021(last modified: June 13, 2023)",grep-cli(crates.io),/packages/grep-cli.html,Vulnerability,code-execution,,"{'text': 'CVE-2021-3013', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-3013'}, {'text': 'GHSA-g4xg-fxmg-vcg5', 'url': 'https://github.com/advisories/GHSA-g4xg-fxmg-vcg5'}","{'text': 'https://github.com/BurntSushi/ripgrep/issues/1773', 'url': 'https://github.com/BurntSushi/ripgrep/issues/1773'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.6,windows,Version,<0.1.6,"On Windows in versions ofgrep-cliprior to0.1.6, it's possible for some
of the routines to execute arbitrary executables. In particular, a quirk of
the Windows process execution API is that it will automatically consider the
current directory before other directories when resolving relative binary
names. Therefore, if you usegrep-clito read decompressed files in an
untrusted directory with that directory as the CWD, a malicious actor to could
put, e.g., agz.exebinary in that directory andgrep-cliwill use the
malicious actor's version ofgz.exeinstead of the system's. This is also technically possible on Unix as well, but only if thePATHvariable contains.. Conventionally, they do not. ADecompressionReaderhas been fixed to automatically resolve binary names
usingPATH, instead of relying on the Windows API to do it. If you usegrep-cli'sCommandReaderwith astd::process::Commandvalue
on Windows, then it is recommended to either construct theCommandwith an
absolute binary name, or usegrep-cli's newresolve_binaryhelper function. To be clear,grep-cli 0.1.6mitigates this issue in two ways: While the first mitigation fixes this issue for sensible values ofPATHwhen doing decompression search, the second mitigation is imperfect. The more
fundamental issue is thatstd::process::Commandis itself vulnerable to this. Advisory available underCC0-1.0license.",grep_cli;;decompressionreader;;new,<0.1.6
CRITICAL,KeyValueReader passes uninitialized memory to Read instance,"January 31, 2021","April  2, 2021(last modified: June 13, 2023)",outer_cgi(crates.io),/packages/outer_cgi.html,Vulnerability,memory-exposure,"{'text': 'CVE-2021-30454', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-30454'}, {'text': 'GHSA-6vmq-jh76-hq43', 'url': 'https://github.com/advisories/GHSA-6vmq-jh76-hq43'}","{'text': 'https://github.com/SolraBizna/outer_cgi/issues/1', 'url': 'https://github.com/SolraBizna/outer_cgi/issues/1'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.2.1,"TheKeyValueReadertype in affected versions of this crate set up an
uninitialized memory buffer and passed them to be read in to a user-providedReadinstance. TheReadinstance could read uninitialized memory and cause undefined
behavior and miscompilations. This issue was fixed in commitdd59b30by zero-initializing the buffers before passing them. Advisory available underCC0-1.0license."
CRITICAL,throughandthrough_andcauses a double free if the map function panics,"February 18, 2021","March 30, 2021(last modified: June 13, 2023)",through(crates.io),/packages/through.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-29940', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29940'}, {'text': 'GHSA-5hpj-m323-cphm', 'url': 'https://github.com/advisories/GHSA-5hpj-m323-cphm'}","{'text': 'https://github.com/gretchenfrage/through/issues/1', 'url': 'https://github.com/gretchenfrage/through/issues/1'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"throughandthrough_andtake a mutable reference as well as a mapping
function to change the provided reference. They do this by callingptr::readon the reference which duplicates ownership and then calling the mapping
function. If the mapping function panics, both the original object and the one
duplicated byptr::readget dropped, causing a double free. Advisory available underCC0-1.0license."
CRITICAL,misc::vec_with_size() can drop uninitialized memory if clone panics,"February 17, 2021","March 29, 2021(last modified: June 13, 2023)",telemetry(crates.io),/packages/telemetry.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-29937', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29937'}, {'text': 'GHSA-hpcx-3pw8-g3j2', 'url': 'https://github.com/advisories/GHSA-hpcx-3pw8-g3j2'}","{'text': 'https://github.com/Yoric/telemetry.rs/issues/45', 'url': 'https://github.com/Yoric/telemetry.rs/issues/45'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"misc::vec_with_sizecreates a vector of the providedsizeand immediately
callsvec.set_len(size)on it, initially filling it with uninitialized memory.
It then inserts elements usingvec[i] = value.clone(). If thevalue.clone()call panics, uninitialized items in the vector will be
dropped leading to undefined behavior. Advisory available underCC0-1.0license."
CRITICAL,FromIterator implementation for Vector/Matrix can drop uninitialized memory,"January 11, 2021","March 29, 2021(last modified: June 13, 2023)",adtensor(crates.io),/packages/adtensor.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-29936', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29936'}, {'text': 'GHSA-rg4m-gww5-7p47', 'url': 'https://github.com/advisories/GHSA-rg4m-gww5-7p47'}","{'text': 'https://github.com/charles-r-earp/adtensor/issues/4', 'url': 'https://github.com/charles-r-earp/adtensor/issues/4'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"TheFromIterator<T>methods forVectorandMatrixrely on the type
parameterNto allocate space in the iterable. If the passed inNtype parameter is larger than the number of items returned
by the iterator, it can lead to uninitialized memory being left in theVectororMatrixtype which gets dropped. Advisory available underCC0-1.0license."
CRITICAL,Fix a use-after-free bug in diesels Sqlite backend,"March  5, 2021","March  5, 2021(last modified: June 13, 2023)",diesel(crates.io),/packages/diesel.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-28305', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28305'}, {'text': 'GHSA-j8q9-5rp9-4mv9', 'url': 'https://github.com/advisories/GHSA-j8q9-5rp9-4mv9'}","{'text': 'https://github.com/diesel-rs/diesel/pull/2663', 'url': 'https://github.com/diesel-rs/diesel/pull/2663'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=1.4.6,Version,<1.4.6,"We've misusedsqlite3_column_name. TheSQLitedocumentation
states that the following: As part of ourquery_by_nameinfrastructure we've first received all
field names for the prepared statement and stored them as string slices
for later use. After that we calledsqlite3_step()for the first time,
which invalids the pointer and therefore the stored string slice. Advisory available underCC0-1.0license.",diesel;;sqliteconnection;;query_by_name,<1.4.6
CRITICAL,Intern: Data race allowed on T,"March  3, 2021","March  4, 2021(last modified: June 13, 2023)",internment(crates.io),/packages/internment.html,Vulnerability,thread-safety,"{'text': 'CVE-2021-28037', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28037'}, {'text': 'GHSA-gppw-3h6h-v6q2', 'url': 'https://github.com/advisories/GHSA-gppw-3h6h-v6q2'}","{'text': 'https://github.com/droundy/internment/issues/20', 'url': 'https://github.com/droundy/internment/issues/20'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.4.2,"Affected versions of this crate unconditionally implementsSyncforIntern<T>.
This allows users to create data race onT: !Sync, which may lead to undefined behavior
(for example, memory corruption). The flaw was corrected in commit 2928a87 by adding the trait boundT: Syncin theSyncimpl ofIntern<T>. Advisory available underCC0-1.0license."
CRITICAL,push_cloned can drop uninitialized memory or double free on panic,"February 22, 2021","March  3, 2021(last modified: June 13, 2023)",stack_dst(crates.io),/packages/stack_dst.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-28034', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28034'}, {'text': 'CVE-2021-28035', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28035'}, {'text': 'GHSA-45w7-7g63-2m5w', 'url': 'https://github.com/advisories/GHSA-45w7-7g63-2m5w'}, {'text': 'GHSA-8mjx-h23h-w2pg', 'url': 'https://github.com/advisories/GHSA-8mjx-h23h-w2pg'}","{'text': 'https://github.com/thepowersgang/stack_dst-rs/issues/5', 'url': 'https://github.com/thepowersgang/stack_dst-rs/issues/5'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.6.1,Version,<0.6.1,"Affected versions ofstack_dstused apush_innerfunction that increased
the internal length of the array and then calledval.clone(). If theval.clone()call panics, the stack could drop an already dropped
element or drop uninitialized memory. This issue was fixed in2a4d538by increasing the length of the array after
elements are cloned. Advisory available underCC0-1.0license.",stack_dst;;stacka;;push_cloned,<0.6.1
CRITICAL,Deserializing an array can drop uninitialized memory on panic,"March  1, 2021","March  2, 2021(last modified: June 13, 2023)",byte_struct(crates.io),/packages/byte_struct.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-28033', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28033'}, {'text': 'GHSA-8fgg-5v78-6g76', 'url': 'https://github.com/advisories/GHSA-8fgg-5v78-6g76'}","{'text': 'https://github.com/wwylele/byte-struct-rs/issues/1', 'url': 'https://github.com/wwylele/byte-struct-rs/issues/1'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.6.1,"Theread_bytes_default_lefunction for[T; n]arrays, used to deserialize
arrays ofTfrom bytes created a[T; n]array withstd::mem::uninitializedand then calledT's deserialization method. IfT's deserialization method panicked, the uninitialized memory could drop
invalid objects. This flaw was corrected ina535678by removing the unsafe block and using
a.mapfunction to deserialize each element of the array instead. Advisory available underCC0-1.0license."
CRITICAL,split_at allows obtaining multiple mutable references to the same data,"January 31, 2021","March  2, 2021(last modified: June 13, 2023)",nano_arena(crates.io),/packages/nano_arena.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-28032', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28032'}, {'text': 'GHSA-wp34-mqw5-jj85', 'url': 'https://github.com/advisories/GHSA-wp34-mqw5-jj85'}","{'text': 'https://github.com/bennetthardwick/nano-arena/issues/1', 'url': 'https://github.com/bennetthardwick/nano-arena/issues/1'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.5.2,Version,<0.5.2,<0.5.2,"Affected versions of this crate assumed thatBorrow<Idx>was guaranteed to
return the same value on.borrow(). The borrowed index value was used to
retrieve a mutable reference to a value. If theBorrow<Idx>implementation returned a different index, the split arena
would allow retrieving the index as a mutable reference creating two mutable
references to the same element. This violates Rust's aliasing rules and allows
for memory safety issues such as writing out of bounds and use-after-frees. The flaw was corrected in commit6b83f9dby storing the.borrow()value in
a temporary variable. Advisory available underCC0-1.0license.",nano_arena;;arena;;split_at,<0.5.2
CRITICAL,move_elements can double-free objects on panic,"February 18, 2021","March  2, 2021(last modified: June 13, 2023)",scratchpad(crates.io),/packages/scratchpad.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-28031', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28031'}, {'text': 'GHSA-3qm2-rfqw-fmrw', 'url': 'https://github.com/advisories/GHSA-3qm2-rfqw-fmrw'}","{'text': 'https://github.com/okready/scratchpad/issues/1', 'url': 'https://github.com/okready/scratchpad/issues/1'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=1.3.1,Version,<1.3.1,"Affected versions ofscratchpadusedptr::readto read elements while
calling a user provided functionfon them. Since the pointer read duplicates ownership, a panic inside the user providedffunction could cause a double free when unwinding. The flaw was fixed in commit891561beaby removing the unsafe block and using
a plain iterator. Advisory available underCC0-1.0license.",scratchpad;;slicemovesource;;move_elements,<1.3.1
CRITICAL,Loading a bgzip block can write out of bounds if size overflows.,"January  7, 2021","March  1, 2021(last modified: June 13, 2023)",bam(crates.io),/packages/bam.html,Vulnerability,memory-corruption,"{'text': 'CVE-2021-28027', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28027'}, {'text': 'GHSA-cpqj-r29q-chrh', 'url': 'https://github.com/advisories/GHSA-cpqj-r29q-chrh'}","{'text': 'https://gitlab.com/tprodanov/bam/-/issues/4', 'url': 'https://gitlab.com/tprodanov/bam/-/issues/4'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.3,Version,<0.1.3,"Affected versions ofbamset the length of an internal buffer usingself.compressed.set_len(block_size - HEADER_SIZE - MIN_EXTRA_SIZE)and then
wrote into it. Whileblock_sizewas constrained to a proper maximum, when it
was too small the subtraction could overflow negatively to a large number past
the capacity ofself.compressed. This can result in memory corruption in the form of writing out of bounds when
loading abgzipfile with a smallblock_size. Commit061eee38d4fixed this issue by checking for the underflow when setting
the buffer size. Advisory available underCC0-1.0license.",bam;;bgzip;;block;;load,<0.1.3
CRITICAL,Incorrect check on buffer length when seeding RNGs,"February 12, 2021","February 15, 2021(last modified: June 13, 2023)",rand_core(crates.io),/packages/rand_core.html,Vulnerability,crypto-failure,"{'text': 'CVE-2021-27378', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27378'}, {'text': 'GHSA-w7j2-35mf-95p7', 'url': 'https://github.com/advisories/GHSA-w7j2-35mf-95p7'}","{'text': 'https://github.com/rust-random/rand/pull/1096', 'url': 'https://github.com/rust-random/rand/pull/1096'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.6.2,<0.6.0,Version,"<0.6.2, >=0.6.0","<0.6.2, >=0.6.0","Summary: rand_core::le::read_u32_into and read_u64_into have incorrect checks on the source buffer length, allowing the destination buffer to be under-filled. Implications: some downstream RNGs, including Hc128Rng (but not the more widely used ChaCha*Rng), allow seeding using the SeedableRng::from_seed trait-function with too short keys. Advisory available underCC0-1.0license.",rand_core;;le;;read_u32_into,"<0.6.2, >=0.6.0"
CRITICAL,Use-after-free insubscript_nextandsubscript_prevwrappers,"February  9, 2021","February 15, 2021(last modified: June 13, 2023)",yottadb(crates.io),/packages/yottadb.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-27377', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27377'}, {'text': 'GHSA-9658-c26v-7qvf', 'url': 'https://github.com/advisories/GHSA-9658-c26v-7qvf'}","{'text': 'https://gitlab.com/YottaDB/Lang/YDBRust/-/issues/40', 'url': 'https://gitlab.com/YottaDB/Lang/YDBRust/-/issues/40'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=1.2.0,Version,<1.2.0,<1.2.0,<1.2.0,<1.2.0,"Affected versions of this crate had an unsound implementation which could pass
a pointer to freed memory toydb_subscript_next_standydb_subscript_prev_stif the variable and subscripts did not have enough
memory allocated on the first call to hold the next variable in the database. For example, the following code had undefined behavior: yottadbhas no reverse-dependencies on crates.io and there are no known
instances of this API being used incorrectly in practice. The fix is backwards
compatible. The flaw was corrected by recalculating the pointer each time it was reallocated. Advisory available underCC0-1.0license.",yottadb;;key;;sub_next_self_st,<1.2.0
CRITICAL,nb-connectinvalidly assumes the memory layout of std::net::SocketAddr,"February 14, 2021","February 14, 2021(last modified: June 13, 2023)",nb-connect(crates.io),/packages/nb-connect.html,INFOUnsound,,"{'text': 'CVE-2021-27376', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27376'}, {'text': 'GHSA-rm4w-6696-r77p', 'url': 'https://github.com/advisories/GHSA-rm4w-6696-r77p'}","{'text': 'https://github.com/smol-rs/nb-connect/issues/1', 'url': 'https://github.com/smol-rs/nb-connect/issues/1'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=1.0.3,"Thenb-connectcrate has assumedstd::net::SocketAddrV4andstd::net::SocketAddrV6have the same memory layout as the system C representationsockaddr. It has simply casted the pointers to convert the socket addresses to the
system representation. The standard library does not say anything about the memory
layout, and this will cause invalid memory access if the standard library
changes the implementation. No warnings or errors will be emitted once the
change happens. Advisory available underCC0-1.0license."
CRITICAL,Sectors::getaccesses unclaimed/uninitialized memory,"January  6, 2021","January 30, 2021(last modified: June 13, 2023)",calamine(crates.io),/packages/calamine.html,Vulnerability,"memory-corruption, memory-exposure","{'text': 'CVE-2021-26951', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26951'}, {'text': 'GHSA-ppqp-78xx-3r38', 'url': 'https://github.com/advisories/GHSA-ppqp-78xx-3r38'}","{'text': 'https://github.com/tafia/calamine/issues/199', 'url': 'https://github.com/tafia/calamine/issues/199'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.17.0,"Affected versions of this crate arbitrarily callsVec::set_lento increase length of a vector without claiming more memory for the vector. Affected versions of this crate
also calls user-providedReadon the uninitialized memory of the vector that was
extended withVec::set_len. This can overwrite active entities in adjacent heap memory and seems to be a major security issue. Also, calling user-providedReadon uninitialized memory is defined as UB in Rust. Advisory available underCC0-1.0license."
CRITICAL,FixedCapacityDequeLike::clone()can cause dropping uninitialized memory,"December 31, 2020","January 30, 2021(last modified: June 13, 2023)",array-tools(crates.io),/packages/array-tools.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-36452', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36452'}, {'text': 'GHSA-6wp2-fw3v-mfmc', 'url': 'https://github.com/advisories/GHSA-6wp2-fw3v-mfmc'}","{'text': 'https://github.com/L117/array-tools/issues/2', 'url': 'https://github.com/L117/array-tools/issues/2'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.3.2,"Affected versions of this crate don't guard against panics, so that partially uninitialized buffer is dropped when user-providedT::clone()panics inFixedCapacityDequeLike<T, A>::clone(). This causes memory corruption. Advisory available underCC0-1.0license."
CRITICAL,Contents of uninitialized memory exposed in DeflateOutput's AsyncRead implementation,"January 24, 2020","January 27, 2021(last modified: June 13, 2023)",libp2p-deflate(crates.io),/packages/libp2p-deflate.html,Vulnerability,memory-exposure,"{'text': 'CVE-2020-36443', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36443'}, {'text': 'GHSA-gvcp-948f-8f2p', 'url': 'https://github.com/advisories/GHSA-gvcp-948f-8f2p'}","{'text': 'https://github.com/libp2p/rust-libp2p/issues/1932', 'url': 'https://github.com/libp2p/rust-libp2p/issues/1932'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.27.1,"Affected versions of this crate passes an uninitialized buffer to a user-provided trait functionAsyncRead::poll_read(). ArbitraryAsyncRead::poll_read()implementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior. The flaw was fixed in commit 5ba266a by ensuring the newly allocated part of the buffer is zero-initialized before passing it to a user-providedAsyncRead::poll_read(). Advisory available underCC0-1.0license."
CRITICAL,Reading uninitialized memory can cause UB (Deserializer::read_vec),"January  2, 2021","January 24, 2021(last modified: June 13, 2023)",cdr(crates.io),/packages/cdr.html,Vulnerability,memory-exposure,"{'text': 'CVE-2021-26305', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26305'}, {'text': 'GHSA-37jj-wp7g-7wj4', 'url': 'https://github.com/advisories/GHSA-37jj-wp7g-7wj4'}","{'text': 'https://github.com/hrektts/cdr-rs/issues/10', 'url': 'https://github.com/hrektts/cdr-rs/issues/10'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.2.4,"Deserializer::read_vec()created an uninitialized buffer and passes it to a user-providedReadimplementation (Deserializer.reader.read_exact()). Passing an uninitialized buffer to an arbitraryReadimplementation is currently defined as undefined behavior in Rust. Official documentation for theReadtrait explains the following: ""It is your responsibility to make sure that buf is initialized before calling read. Calling read with an uninitialized buf (of the kind one obtains via MaybeUninit) is not safe, and can lead to undefined behavior."" The flaw was corrected in commit ce310f7 by zero-initializing the newly allocated buffer before handing it toDeserializer.reader.read_exact(). Advisory available underCC0-1.0license."
CRITICAL,"panic safety: double drop may happen withinutil::{mutate, mutate2}","January 12, 2021","January 20, 2021(last modified: June 13, 2023)",containers(crates.io),/packages/containers.html,Vulnerability,memory-corruption,"{'text': 'CVE-2021-25907', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25907'}, {'text': 'GHSA-cv7x-6rc6-pq5v', 'url': 'https://github.com/advisories/GHSA-cv7x-6rc6-pq5v'}","{'text': 'https://github.com/strake/containers.rs/issues/2', 'url': 'https://github.com/strake/containers.rs/issues/2'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.9.11,"Upon panic in a user-provided functionf,fn mutate()&fn mutate2drops twice a same object. Affected versions of this crate did not guard against double drop while temporarily duplicating an object's ownership withptr::read(). Dropping a same object can result in memory corruption. The flaw was corrected in version ""0.9.11"" by fixing the code to abort upon panic. Advisory available underCC0-1.0license."
CRITICAL,reading on uninitialized buffer can cause UB (impl<R> BufRead for GreedyAccessReader<R>),"January  2, 2021","January 20, 2021(last modified: June 13, 2023)",bra(crates.io),/packages/bra.html,Vulnerability,memory-exposure,"{'text': 'CVE-2021-25905', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25905'}, {'text': 'GHSA-j8qq-58cr-8cc7', 'url': 'https://github.com/advisories/GHSA-j8qq-58cr-8cc7'}","{'text': 'https://github.com/Enet4/bra-rs/issues/1', 'url': 'https://github.com/Enet4/bra-rs/issues/1'}",9.1CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityHigh,None,None,Unchanged,High,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityHigh,None,None,Unchanged,High,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H,>=0.1.1,"Affected versions of this crate creates an uninitialized buffer and passes it to user-providedReadimplementation. This is unsound, because it allows safe Rust code to exhibit an undefined behavior (read from uninitialized memory). The flaw was corrected in version 0.1.1 by zero-initializing a newly allocated buffer
before handing it to a user-providedReadimplementation. Advisory available underCC0-1.0license."
CRITICAL,Double free when callingsys_info::disk_infofrom multiple threads,"May 31, 2020","January 19, 2021(last modified: June 13, 2023)",sys-info(crates.io),/packages/sys-info.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2020-36434', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36434'}, {'text': 'GHSA-2f5j-3mhq-xv58', 'url': 'https://github.com/advisories/GHSA-2f5j-3mhq-xv58'}","{'text': 'https://github.com/FillZpp/sys-info-rs/issues/63', 'url': 'https://github.com/FillZpp/sys-info-rs/issues/63'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.8.0,linux,Version,<=0.1.1,"Affected versions ofsys-infouse a static, global, list to store temporary disk information while running. The function that cleans up this list,DFCleanup, assumes a single threaded environment and will try to free the same memory twice in a multithreaded environment. This results in consistent double-frees and segfaults when callingsys_info::disk_infofrom multiple threads at once. The issue was fixed by moving the global variable into a local scope. Advisory available underCC0-1.0license.",sys_info;;disk_info,<=0.1.1
CRITICAL,Buffer overflow in SmallVec::insert_many,"January  8, 2021","January  8, 2021(last modified: June 13, 2023)",smallvec(crates.io),/packages/smallvec.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2021-25900', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25900'}, {'text': 'GHSA-43w2-9j62-hq99', 'url': 'https://github.com/advisories/GHSA-43w2-9j62-hq99'}","{'text': 'https://github.com/servo/rust-smallvec/issues/252', 'url': 'https://github.com/servo/rust-smallvec/issues/252'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,">=0.6.14, <1.0.0>=1.6.1",<0.6.3,Version,">=0.6.3, <0.6.14>=1.0.0, <1.6.1","A bug in theSmallVec::insert_manymethod caused it to allocate a buffer that was smaller than needed.  It then wrote past the end of the buffer, causing a buffer overflow and memory corruption on the heap. This bug was only triggered if the iterator passed toinsert_manyyielded more items than the lower bound returned from itssize_hintmethod. The flaw was corrected in smallvec 0.6.14 and 1.6.1, by ensuring that additional space is always reserved for each item inserted.  The fix also simplified the implementation ofinsert_manyto use less unsafe code, so it is easier to verify its correctness. Thank you to Yechan Bae (@Qwaz) and the Rust group at Georgia Tech’s SSLab for finding and reporting this bug. Advisory available underCC0-1.0license.",smallvec;;smallvec;;insert_many,">=0.6.3, <0.6.14>=1.0.0, <1.6.1"
CRITICAL,Flaw in generativity allows out-of-bounds access,"May 21, 2019","October  1, 2020(last modified: June 13, 2023)",compact_arena(crates.io),/packages/compact_arena.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2019-16139', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16139'}, {'text': 'GHSA-7j36-gc4r-9x3r', 'url': 'https://github.com/advisories/GHSA-7j36-gc4r-9x3r'}","{'text': 'https://github.com/llogiq/compact_arena/issues/22', 'url': 'https://github.com/llogiq/compact_arena/issues/22'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.4.0,Version,<0.4.0,"Affected versions of this crate did not properly implement the generativity,
because the invariant lifetimes were not necessarilydropped. This allows an attacker to mix up two arenas, using indices created from one
arena with another one. This might lead to an out-of-bounds read or write
access into the memory reserved for the arena. The flaw was corrected by implementing generativity correctly in version 0.4.0. Advisory available underCC0-1.0license.",compact_arena;;smallarena;;new,<0.4.0
CRITICAL,Vec-to-vec transmutations could lead to heap overflow/corruption,"November 27, 2018","October  1, 2020(last modified: June 13, 2023)",safe-transmute(crates.io),/packages/safe-transmute.html,Vulnerability,,"{'text': 'CVE-2018-21000', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-21000'}, {'text': 'GHSA-2v78-j59h-fmpf', 'url': 'https://github.com/advisories/GHSA-2v78-j59h-fmpf'}","{'text': 'https://github.com/nabijaczleweli/safe-transmute-rs/pull/36', 'url': 'https://github.com/nabijaczleweli/safe-transmute-rs/pull/36'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.10.1,<0.4.0,"Affected versions of this crate switched the length and capacity arguments in the Vec::from_raw_parts() constructor,
which could lead to memory corruption or data leakage. The flaw was corrected by using the constructor correctly. Advisory available underCC0-1.0license."
CRITICAL,generichash::Digest::eq always return true,"October 11, 2019","October  1, 2020(last modified: June 13, 2023)",sodiumoxide(crates.io),/packages/sodiumoxide.html,Vulnerability,,"{'text': 'CVE-2019-25002', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25002'}, {'text': 'GHSA-wrvc-72w7-xpmj', 'url': 'https://github.com/advisories/GHSA-wrvc-72w7-xpmj'}","{'text': 'https://github.com/sodiumoxide/sodiumoxide/pull/381', 'url': 'https://github.com/sodiumoxide/sodiumoxide/pull/381'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.2.5,Version,"<0.2.5, >=0.2.0","<0.2.5, >=0.2.0",PartialEq implementation for generichash::Digest has compared itself to itself. Digest::eq always returns true and Digest::ne always returns false. Advisory available underCC0-1.0license.,sodiumoxide;;crypto;;generichash;;digest;;eq,"<0.2.5, >=0.2.0"
CRITICAL,Unsoundimpl Follow for bool,"October 20, 2019","October  1, 2020(last modified: June 13, 2023)",flatbuffers(crates.io),/packages/flatbuffers.html,Vulnerability,"{'text': 'CVE-2019-25004', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25004'}, {'text': 'GHSA-gx73-2498-r55c', 'url': 'https://github.com/advisories/GHSA-gx73-2498-r55c'}","{'text': 'https://github.com/google/flatbuffers/issues/5530', 'url': 'https://github.com/google/flatbuffers/issues/5530'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.6.1,<0.4.0,Version,>=0.4.0<=0.6.0,"The implementation ofimpl Follow for boolallows to reinterpret arbitrary bytes as abool. In Rustboolhas stringent requirements for its in-memory representation. Use of this function
allows to violate these requirements and invoke undefined behaviour in safe code. Advisory available underCC0-1.0license.",flatbuffers;;follow;;follow,>=0.4.0<=0.6.0
CRITICAL,"bigint is unmaintained, use uint instead","May  7, 2020","October  1, 2020(last modified: June 13, 2023)",bigint(crates.io),/packages/bigint.html,INFOUnmaintained,"{'text': 'CVE-2020-35880', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35880'}, {'text': 'GHSA-wgx2-6432-j3fw', 'url': 'https://github.com/advisories/GHSA-wgx2-6432-j3fw'}","{'text': 'https://github.com/paritytech/bigint/commit/7e71521a61b009afc94c91135353102658550d42', 'url': 'https://github.com/paritytech/bigint/commit/7e71521a61b009afc94c91135353102658550d42'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Thebigintcrate is not maintained any more and contains several known bugs (including a soundness bug);
useuintinstead. Advisory available underCC0-1.0license."
CRITICAL,MultiDecoder::read() drops uninitialized memory of arbitrary type on panic in client code,"July  4, 2019","October  1, 2020(last modified: June 13, 2023)",libflate(crates.io),/packages/libflate.html,Vulnerability,,"{'text': 'CVE-2019-15552', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15552'}, {'text': 'GHSA-rpcm-whqc-jfw8', 'url': 'https://github.com/advisories/GHSA-rpcm-whqc-jfw8'}","{'text': 'https://github.com/sile/libflate/issues/35', 'url': 'https://github.com/sile/libflate/issues/35'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.25,<0.1.14,Version,"<0.1.25, >=0.1.14","Affected versions of libflate have set a field of an internal structure with a generic type to an uninitialized value inMultiDecoder::read()and reverted it to the original value after the function completed. However, execution ofMultiDecoder::read()could be interrupted by a panic in caller-suppliedReadimplementation. This would causedrop()to be called on uninitialized memory of a generic type implementingRead. This is equivalent to a use-after-free vulnerability and could allow an attacker to gain arbitrary code execution. The flaw was corrected by aborting immediately instead of unwinding the stack in case of panic withinMultiDecoder::read(). The issue was discovered and fixed by Shnatsel. Advisory available underCC0-1.0license.",libflate;;gzip;;multidecoder;;read,"<0.1.25, >=0.1.14"
CRITICAL,CBox API allows to de-reference raw pointers withoutunsafecode,"March 19, 2020","October  1, 2020(last modified: June 13, 2023)",cbox(crates.io),/packages/cbox.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-35860', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35860'}, {'text': 'GHSA-3vjm-36rr-7qrq', 'url': 'https://github.com/advisories/GHSA-3vjm-36rr-7qrq'}","{'text': 'https://github.com/TomBebbington/cbox-rs/issues/2', 'url': 'https://github.com/TomBebbington/cbox-rs/issues/2'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"CBoxandCSemiBoxare part of the public API of the cbox crate
and they allow to create smart pointers from raw pointers and de-reference
them without the need ofunsafecode. Advisory available underCC0-1.0license."
CRITICAL,MsQueue and SegQueue suffer from double-free,"December  9, 2018","October  1, 2020(last modified: June 13, 2023)",crossbeam(crates.io),/packages/crossbeam.html,Vulnerability,,"{'text': 'CVE-2018-20996', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20996'}, {'text': 'GHSA-c3cw-c387-pj65', 'url': 'https://github.com/advisories/GHSA-c3cw-c387-pj65'}","{'text': 'https://github.com/crossbeam-rs/crossbeam-epoch/issues/82', 'url': 'https://github.com/crossbeam-rs/crossbeam-epoch/issues/82'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.4.1,<0.4.0,"Even if an element is popped from a queue, crossbeam would run its
destructor inside the epoch-based garbage collector. This is a source
of double frees. The flaw was corrected by wrapping elements inside queues in aManuallyDrop. Thanks to @c0gent for reporting the issue. Advisory available underCC0-1.0license."
CRITICAL,StrcCtx deallocates a memory region that it doesn't own,"August 20, 2020","October  1, 2020(last modified: June 13, 2023)",alpm-rs(crates.io),/packages/alpm-rs.html,INFOUnsound,"{'text': 'CVE-2020-35885', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35885'}, {'text': 'GHSA-qc4m-gc8r-mg8m', 'url': 'https://github.com/advisories/GHSA-qc4m-gc8r-mg8m'}","{'text': 'https://github.com/pigeonhands/rust-arch/issues/2', 'url': 'https://github.com/pigeonhands/rust-arch/issues/2'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"StrcCtxdeallocate a memory region that it doesn't own whenStrcCtxis created without usingStrcCtx::new.
This can introduce memory safety issues such as double-free and use-after-free to client programs. Advisory available underCC0-1.0license."
CRITICAL,Stream callback function is not unwind safe,"September 14, 2019","October  1, 2020(last modified: June 13, 2023)",portaudio-rs(crates.io),/packages/portaudio-rs.html,Vulnerability,"code-execution, memory-corruption",,"{'text': 'CVE-2019-16881', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16881'}, {'text': 'GHSA-qpjr-ch72-2qq4', 'url': 'https://github.com/advisories/GHSA-qpjr-ch72-2qq4'}","{'text': 'https://github.com/mvdnes/portaudio-rs/issues/20', 'url': 'https://github.com/mvdnes/portaudio-rs/issues/20'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>0.3.1,"Affected versions of this crate is not panic safe within callback functionsstream_callbackandstream_finished_callback. The call to user-provided closure might panic before amem::forgetcall, which then causes a use after free that grants attacker to control the callback function pointer. This allows an attacker to construct an arbitrary code execution . The flaw was reported by Phosphorus15. Advisory available underCC0-1.0license."
CRITICAL,Parsing a specially crafted message can result in a stack overflow,"January 16, 2020","October  1, 2020(last modified: June 13, 2023)",prost(crates.io),/packages/prost.html,Vulnerability,"denial-of-service, memory-corruption",,"{'text': 'CVE-2020-35858', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35858'}, {'text': 'GHSA-gv73-9mwv-fwgq', 'url': 'https://github.com/advisories/GHSA-gv73-9mwv-fwgq'}","{'text': 'https://github.com/danburkert/prost/issues/267', 'url': 'https://github.com/danburkert/prost/issues/267'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.6.1,"Affected versions of this crate contained a bug in which decoding untrusted
input could overflow the stack. On architectures with stack probes (like x86), this can be used for denial of
service attacks, while on architectures without stack probes (like ARM)
overflowing the stack is unsound and can result in potential memory corruption
(or even RCE). The flaw was quickly corrected by @danburkert and released in version 0.6.1. Advisory available underCC0-1.0license."
CRITICAL,Use-after-free in buffer conversion implementation,"September  1, 2019","October  1, 2020(last modified: June 13, 2023)",chttp(crates.io),/packages/chttp.html,Vulnerability,,"{'text': 'CVE-2019-16140', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16140'}, {'text': 'GHSA-5rrv-m36h-qwf8', 'url': 'https://github.com/advisories/GHSA-5rrv-m36h-qwf8'}","{'text': 'https://github.com/sagebind/isahc/issues/2', 'url': 'https://github.com/sagebind/isahc/issues/2'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.3,<0.1.1,"The Fromimplementation for Vecwas not properly implemented,
returning a vector backed by freed memory. This could lead to memory corruption
or be exploited to cause undefined behavior. A fix was published in version 0.1.3. Advisory available underCC0-1.0license."
CRITICAL,use-after or double free of allocated memory,"March 27, 2020","October  1, 2020(last modified: June 13, 2023)",bitvec(crates.io),/packages/bitvec.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-35862', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35862'}, {'text': 'GHSA-7cjc-hvxf-gqh7', 'url': 'https://github.com/advisories/GHSA-7cjc-hvxf-gqh7'}","{'text': 'https://github.com/myrrlyn/bitvec/issues/55', 'url': 'https://github.com/myrrlyn/bitvec/issues/55'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.17.4,<0.11.0,Version,"<0.17.4, >=0.11.0","Conversion ofBitVectoBitBoxdid not account for allocation movement. The flaw was corrected by using the address after resizing, rather than the original base address. Advisory available underCC0-1.0license.",bitvec;;vec;;bitvec;;into_boxed_bitslice,"<0.17.4, >=0.11.0"
CRITICAL,HMAC-BLAKE2 algorithms compute incorrect results,"August 25, 2019","October  1, 2020(last modified: June 13, 2023)",blake2(crates.io),/packages/blake2.html,Vulnerability,crypto-failure,"{'text': 'CVE-2019-16143', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16143'}, {'text': 'GHSA-4x25-pvhw-5224', 'url': 'https://github.com/advisories/GHSA-4x25-pvhw-5224'}","{'text': 'https://github.com/RustCrypto/MACs/issues/19', 'url': 'https://github.com/RustCrypto/MACs/issues/19'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.8.1,"When used in conjunction with the Hash-based Message Authentication Code (HMAC),
the BLAKE2b and BLAKE2s implementations inblake2crate versions prior to
v0.8.1 used an incorrect block size (32-bytes instead of 64-bytes for BLAKE2s,
and 64-bytes instead of 128-bytes for BLAKE2b), causing them to miscompute theMacResult. The v0.8.1 release of theblake2crate uses the correct block sizes. Note that this advisory only impacts usage of BLAKE2 with HMAC, and does not
impactDigestfunctionality. Advisory available underCC0-1.0license."
CRITICAL,Unaligned memory access,"April 19, 2019","October  1, 2020(last modified: October 19, 2021)",rand_core(crates.io),/packages/rand_core.html,INFOUnsound,"{'text': 'GHSA-mmc9-pwm7-qj5w', 'url': 'https://github.com/advisories/GHSA-mmc9-pwm7-qj5w'}, {'text': 'CVE-2020-25576', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25576'}","{'text': 'https://github.com/rust-random/rand/blob/master/rand_core/CHANGELOG.md#050---2019-06-06', 'url': 'https://github.com/rust-random/rand/blob/master/rand_core/CHANGELOG.md#050---2019-06-06'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,^0.3.1>=0.4.2,Version,<0.4.2,<0.4.2,"Affected versions of this crate violated alignment when casting byte slices to
integer slices, resulting in undefined behavior. The flaw was corrected by Ralf Jung and Diggory Hardy. Advisory available underCC0-1.0license.",rand_core;;blockrng;;fill_bytes,<0.4.2
CRITICAL,Matrix::zip_elementscauses double free,"September 14, 2019","October  1, 2020(last modified: June 13, 2023)",linea(crates.io),/packages/linea.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2019-16880', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16880'}, {'text': 'GHSA-j52m-489x-v634', 'url': 'https://github.com/advisories/GHSA-j52m-489x-v634'}","{'text': 'https://github.com/strake/linea.rs/issues/2', 'url': 'https://github.com/strake/linea.rs/issues/2'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>0.9.4,"Affected versions of this crate did not properly implements theMatrix::zip_elementsmethod, which causes an double free when the given trait implementation might panic. This allows an attacker to corrupt or take control of the memory. The flaw was corrected by Phosphorus15. Advisory available underCC0-1.0license."
CRITICAL,Flaw in hyper allows request smuggling by sending a body in GET requests,"March 19, 2020","October  1, 2020(last modified: June 13, 2023)",hyper(crates.io),/packages/hyper.html,Vulnerability,format-injection,,"{'text': 'CVE-2020-35863', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35863'}, {'text': 'GHSA-h3qr-rq2j-74w4', 'url': 'https://github.com/advisories/GHSA-h3qr-rq2j-74w4'}","{'text': 'https://github.com/hyperium/hyper/issues/1925', 'url': 'https://github.com/hyperium/hyper/issues/1925'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.12.34,<0.11.0,"Vulnerable versions of hyper allow GET requests to have bodies, even if there is
no Transfer-Encoding or Content-Length header.  As per the HTTP 1.1
specification, such requests do not have bodies, so the body will be interpreted
as a separate HTTP request. This allows an attacker who can control the body and method of an HTTP request
made by hyper to inject a request with headers that would not otherwise be
allowed, as demonstrated by sending a malformed HTTP request from a Substrate
runtime.  This allows bypassing CORS restrictions.  In combination with other
vulnerabilities, such as an exploitable web server listening on loopback, it may
allow remote code execution. The flaw was corrected in hyper version 0.12.34. Advisory available underCC0-1.0license."
CRITICAL,Allows viewing and modifying arbitrary structs as bytes,"June 14, 2020","October  1, 2020(last modified: June 13, 2023)",rgb(crates.io),/packages/rgb.html,INFOUnsound,,"{'text': 'CVE-2020-25016', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25016'}, {'text': 'GHSA-g4rw-8m5q-6453', 'url': 'https://github.com/advisories/GHSA-g4rw-8m5q-6453'}","{'text': 'https://github.com/kornelski/rust-rgb/issues/35', 'url': 'https://github.com/kornelski/rust-rgb/issues/35'}",9.1CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityNone,None,None,Unchanged,High,High,None,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityNone,None,None,Unchanged,High,High,None,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N,>=0.8.20,<0.5.4,"Affected versions of rgb crate allow viewing and modifying data of any typeTwrapped inRGB<T>as bytes,
and do not correctly constrainRGB<T>and other wrapper structures to the types for which it is safe to do so. Safety violation possible for a type wrapped inRGB<T>and similar wrapper structures: The issue was resolved by requiring all types wrapped in structures provided by RGB crate to implement an unsafe marker trait. Advisory available underCC0-1.0license."
CRITICAL,Missing check in ArrayVec leads to out-of-bounds write.,"September 24, 2020","October  1, 2020(last modified: June 13, 2023)",stack(crates.io),/packages/stack.html,Vulnerability,"{'text': 'CVE-2020-35895', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35895'}, {'text': 'GHSA-h45v-vgvp-3h5v', 'url': 'https://github.com/advisories/GHSA-h45v-vgvp-3h5v'}","{'text': 'https://github.com/arcnmx/stack-rs/issues/4', 'url': 'https://github.com/arcnmx/stack-rs/issues/4'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.3.1,"ArrayVec::insert allows insertion of an element into the array object into the
specified index. Due to a missing check on the upperbound of this index, it is
possible to write out of bounds. Advisory available underCC0-1.0license."
CRITICAL,Internally mutating methods take immutable ref self,"September  2, 2019","October  1, 2020(last modified: June 13, 2023)",renderdoc(crates.io),/packages/renderdoc.html,Vulnerability,,"{'text': 'CVE-2019-16142', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16142'}, {'text': 'GHSA-vhfr-v4w9-45v8', 'url': 'https://github.com/advisories/GHSA-vhfr-v4w9-45v8'}","{'text': 'https://github.com/ebkalderon/renderdoc-rs/pull/32', 'url': 'https://github.com/ebkalderon/renderdoc-rs/pull/32'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.5.0,Version,<0.5.0,<0.5.0,"Affected versions of this crate exposed several methods which tookselfby
immutable reference, despite the requesting the RenderDoc API to set a mutable
value internally. This is technically unsound and calling these methods from multiple threads
without synchronization could lead to unexpected and unpredictable behavior. The flaw was corrected in release 0.5.0. Advisory available underCC0-1.0license.",renderdoc;;api;;renderdocv110;;trigger_multi_frame_capture,<0.5.0
CRITICAL,Flaw in interface may drop uninitialized instance of arbitrary types,"August 21, 2019","October  1, 2020(last modified: June 13, 2023)",image(crates.io),/packages/image.html,Vulnerability,,"{'text': 'CVE-2019-16138', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16138'}, {'text': 'GHSA-m2pf-hprp-3vqm', 'url': 'https://github.com/advisories/GHSA-m2pf-hprp-3vqm'}","{'text': 'https://github.com/image-rs/image/pull/985', 'url': 'https://github.com/image-rs/image/pull/985'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.21.3,<0.10.2,Version,"<0.21.3, >=0.10.2","Affected versions of this crate would callVec::set_lenon an uninitialized
vector with user-provided type parameter, in an interface of the HDR image
format decoder. They would then also call other code that could panic before
initializing all instances. This could run Drop implementations on uninitialized types, equivalent to
use-after-free, and allow an attacker arbitrary code execution. Two different fixes were applied. It is possible to conserve the interface by
ensuring proper initialization before callingVec::set_len. Drop is no longer
called in case of panic, though. Starting from version0.22, a breaking change to the interface requires
callers to pre-allocate the output buffer and pass a mutable slice instead,
avoiding all unsafe code. Advisory available underCC0-1.0license.",image;;hdr;;hdrdecoder;;read_image_transform,"<0.21.3, >=0.10.2"
CRITICAL,Memory corruption in SmallVec::grow(),"July 19, 2019","October  1, 2020(last modified: June 13, 2023)",smallvec(crates.io),/packages/smallvec.html,Vulnerability,"code-execution, memory-corruption","{'text': 'CVE-2019-15554', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15554'}, {'text': 'GHSA-69gw-hgj3-45m7', 'url': 'https://github.com/advisories/GHSA-69gw-hgj3-45m7'}","{'text': 'https://github.com/servo/rust-smallvec/issues/149', 'url': 'https://github.com/servo/rust-smallvec/issues/149'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.6.10,<0.6.3,Version,"<0.6.10, >=0.6.3","Attempting to callgrowon a spilled SmallVec with a value less than the current capacity causes corruption of memory allocator data structures. An attacker that controls the value passed togrowmay exploit this flaw to obtain memory contents or gain remote code execution. Credits to @ehuss for discovering, reporting and fixing the bug. Advisory available underCC0-1.0license.",smallvec;;smallvec;;grow,"<0.6.10, >=0.6.3"
CRITICAL,Possible double free during unwinding in SmallVec::insert_many,"July 19, 2018","October  1, 2020(last modified: June 13, 2023)",smallvec(crates.io),/packages/smallvec.html,Vulnerability,,"{'text': 'CVE-2018-20991', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20991'}, {'text': 'GHSA-rxr4-x558-x7hw', 'url': 'https://github.com/advisories/GHSA-rxr4-x558-x7hw'}","{'text': 'https://github.com/servo/rust-smallvec/issues/96', 'url': 'https://github.com/servo/rust-smallvec/issues/96'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.6.3^0.3.4^0.4.5^0.5.1,<0.3.2,"If an iterator passed toSmallVec::insert_manypanicked inIterator::next,
destructors were run during unwinding while the vector was in an inconsistent
state, possibly causing a double free (a destructor running on two copies of
the same value). This is fixed in smallvec 0.6.3 by ensuring that the vector's length is not
updated to include moved items until they have been removed from their
original positions.  Items may now be leaked ifIterator::nextpanics, but
they will not be dropped more than once. Thank you to @Vurich for reporting this bug. Advisory available underCC0-1.0license."
CRITICAL,Double-free and use-after-free in SmallVec::grow(),"June  6, 2019","October  1, 2020(last modified: June 13, 2023)",smallvec(crates.io),/packages/smallvec.html,Vulnerability,,"{'text': 'CVE-2019-15551', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15551'}, {'text': 'GHSA-mm7v-vpv8-xfc3', 'url': 'https://github.com/advisories/GHSA-mm7v-vpv8-xfc3'}","{'text': 'https://github.com/servo/rust-smallvec/issues/148', 'url': 'https://github.com/servo/rust-smallvec/issues/148'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.6.10,<0.6.5,Version,"<0.6.10, >=0.6.5","Attempting to callgrowon a spilled SmallVec with a value equal to the current capacity causes it to free the existing data. This performs a double free immediately and may lead to use-after-free on subsequent accesses to the SmallVec contents. An attacker that controls the value passed togrowmay exploit this flaw to obtain memory contents or gain remote code execution. Credits to @ehuss for discovering, reporting and fixing the bug. Advisory available underCC0-1.0license.",smallvec;;smallvec;;grow,"<0.6.10, >=0.6.5"
CRITICAL,Missing sanitization in mozwire allows local file overwrite of files ending in .conf,"August 18, 2020","October  1, 2020(last modified: June 13, 2023)",mozwire(crates.io),/packages/mozwire.html,Vulnerability,,"{'text': 'CVE-2020-35883', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35883'}, {'text': 'GHSA-4vhw-4rw7-jfpv', 'url': 'https://github.com/advisories/GHSA-4vhw-4rw7-jfpv'}","{'text': 'https://github.com/NilsIrl/MozWire/issues/14', 'url': 'https://github.com/NilsIrl/MozWire/issues/14'}",9.1CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,None,None,Unchanged,None,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,None,None,Unchanged,None,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H,>0.4.1,"The client software downloaded a list of servers from mozilla's servers and created local files named
after the hostname field in the json document. No verification of the content of the string was made, and it could therefore have included '../' leading to path traversal. This allows an attacker in control of mozilla's servers to overwrite/create local files named .conf. The flaw was corrected by sanitizing the hostname field. Advisory available underCC0-1.0license."
CRITICAL,failure is officially deprecated/unmaintained,"May  2, 2020","October  1, 2020(last modified: June 13, 2023)",failure(crates.io),/packages/failure.html,INFOUnmaintained,"{'text': 'CVE-2020-25575', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25575'}, {'text': 'GHSA-jq66-xh47-j9f3', 'url': 'https://github.com/advisories/GHSA-jq66-xh47-j9f3'}","{'text': 'https://github.com/rust-lang-nursery/failure/pull/347', 'url': 'https://github.com/rust-lang-nursery/failure/pull/347'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Thefailurecrate is officially end-of-life: it has been marked as deprecated
by the former maintainer, who has announced that there will be no updates or
maintenance work on it going forward. The following are some suggested actively developed alternatives to switch to: Advisory available underCC0-1.0license."
CRITICAL,Type confusion ifprivate_get_type_idis overridden,"November 13, 2019","October  1, 2020(last modified: June 13, 2023)",failure(crates.io),/packages/failure.html,INFOUnsound,,"{'text': 'CVE-2019-25010', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25010'}, {'text': 'CVE-2020-25575', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25575'}, {'text': 'GHSA-jq66-xh47-j9f3', 'url': 'https://github.com/advisories/GHSA-jq66-xh47-j9f3'}, {'text': 'GHSA-r98r-j25q-rmpr', 'url': 'https://github.com/advisories/GHSA-r98r-j25q-rmpr'}","{'text': 'https://github.com/rust-lang-nursery/failure/issues/336', 'url': 'https://github.com/rust-lang-nursery/failure/issues/336'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,Version,>=0.1.0,"Safe Rust code can implement malfunctioning__private_get_type_id__and cause
type confusion when downcasting, which is an undefined behavior. Users who deriveFailtrait are not affected. Advisory available underCC0-1.0license.",failure;;fail;;__private_get_type_id__,>=0.1.0
CRITICAL,Integer overflow leads to heap-based buffer overflow in encode_config_buf,"May  3, 2017","October  1, 2020(last modified: June 13, 2023)",base64(crates.io),/packages/base64.html,Vulnerability,,"{'text': 'CVE-2017-1000430', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-1000430'}, {'text': 'GHSA-x67x-vg9m-65c3', 'url': 'https://github.com/advisories/GHSA-x67x-vg9m-65c3'}","{'text': 'https://github.com/alicemaz/rust-base64/commit/24ead980daf11ba563e4fb2516187a56a71ad319', 'url': 'https://github.com/alicemaz/rust-base64/commit/24ead980daf11ba563e4fb2516187a56a71ad319'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.5.2,"Affected versions of this crate suffered from an integer overflow bug when
calculating the size of a buffer to use when encoding base64 using theencode_config_bufandencode_configfunctions.  If the input string
was large, this would cause a buffer to be allocated that was too small.
Since this function writes to the buffer using unsafe code, it would
allow an attacker to write beyond the buffer, causing memory corruption
and possibly the execution of arbitrary code. This flaw was corrected by using checked arithmetic to calculate
the size of the buffer. Advisory available underCC0-1.0license."
CRITICAL,Bug in SliceDeque::move_head_unchecked corrupts its memory,"May  7, 2019","October  1, 2020(last modified: June 13, 2023)",slice-deque(crates.io),/packages/slice-deque.html,Vulnerability,,"{'text': 'CVE-2019-15543', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15543'}, {'text': 'GHSA-c3m3-c39q-pv23', 'url': 'https://github.com/advisories/GHSA-c3m3-c39q-pv23'}","{'text': 'https://github.com/gnzlbg/slice_deque/issues/57', 'url': 'https://github.com/gnzlbg/slice_deque/issues/57'}",RUSTSEC-2018-0008,9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.2.0,"Affected versions of this crate entered a corrupted state ifmem::size_of::<T>() % allocation_granularity() != 0and a specific allocation
pattern was used: sufficiently shifting the deque elements over the mirrored
page boundary. This allows an attacker that controls controls both element insertion and
removal to corrupt the deque, such that reading elements from it would read
bytes corresponding to other elements in the deque. (e.g. a read of T could read
some bytes from one value and some bytes from an adjacent one, resulting in a T
whose value representation is not meaningful). This is undefined behavior. The flaw was corrected by using a pair of pointers to track the head and tail of
the deque instead of a pair of indices. This pair of pointers are represented
using a Rust slice. Advisory available underCC0-1.0license."
CRITICAL,Bug in SliceDeque::move_head_unchecked allows read of corrupted memory,"December  5, 2018","October  1, 2020(last modified: June 13, 2023)",slice-deque(crates.io),/packages/slice-deque.html,Vulnerability,,"{'text': 'CVE-2018-20995', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20995'}, {'text': 'GHSA-hr3c-6mmp-6m39', 'url': 'https://github.com/advisories/GHSA-hr3c-6mmp-6m39'}","{'text': 'https://github.com/gnzlbg/slice_deque/issues/57', 'url': 'https://github.com/gnzlbg/slice_deque/issues/57'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.16,"Affected versions of this crate did not properly update the
head and tail of the deque when inserting and removing elements from the front
if, before insertion or removal, the tail of the deque was in the mirrored
memory region, and if, after insertion or removal, the head of the deque is
exactly at the beginning of the mirrored memory region. An attacker that controls both element insertion and removal into the deque
could put it in a corrupted state. Once the deque enters such an state, its head
and tail are corrupted, but in bounds of the allocated memory. This can result
in partial reads and writes, reads of uninitialized memory, reads of memory
containing previously dropped objects, etc. An attacker could exploit this to
alter program execution. The flaw was corrected by properly updating the head and tail of the deque in
this case. Advisory available underCC0-1.0license."
CRITICAL,Lifetime boundary forraw_sliceandraw_slice_mutare incorrect,"February 11, 2020","October  1, 2020(last modified: June 13, 2023)",rulinalg(crates.io),/packages/rulinalg.html,Vulnerability,"{'text': 'CVE-2020-35879', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35879'}, {'text': 'GHSA-q2gj-9r85-p832', 'url': 'https://github.com/advisories/GHSA-q2gj-9r85-p832'}","{'text': 'https://github.com/AtheMathmo/rulinalg/issues/201', 'url': 'https://github.com/AtheMathmo/rulinalg/issues/201'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,<0.4.0,Version,>=0.4.0,>=0.4.0,"The affected version ofrulinalghas incorrect lifetime boundary definitions
forRowMut::raw_sliceandRowMut::raw_slice_mut. They do not conform with
Rust's borrowing rule and allows the user to create multiple mutable references
to the same location. This may result in unexpected calculation result and data
race if both references are used at the same time. Advisory available underCC0-1.0license.",rulinalg;;matrix;;rowmut;;raw_slice,>=0.4.0
CRITICAL,traitobject assumes the layout of fat pointers,"June  1, 2020","October  1, 2020(last modified: June 13, 2023)",traitobject(crates.io),/packages/traitobject.html,INFOUnsound,memory-corruption,"{'text': 'CVE-2020-35881', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35881'}, {'text': 'GHSA-j79j-cx3h-g27h', 'url': 'https://github.com/advisories/GHSA-j79j-cx3h-g27h'}","{'text': 'https://github.com/reem/rust-traitobject/issues/7', 'url': 'https://github.com/reem/rust-traitobject/issues/7'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,Version,,,"This crate gets the data pointer from fat pointers assuming that the first
element in a fat pointer is the data pointer. This is currently true, but
it may change in a future Rust version, leading to memory corruption. This has been fixed in the master branch of the crate, but is has not
been released into crates.io. Advisory available underCC0-1.0license.",traitobject;;data,
CRITICAL,rio allows a use-after-free buffer access when a future is leaked,"May 11, 2020","October  1, 2020(last modified: June 13, 2023)",rio(crates.io),/packages/rio.html,Vulnerability,"memory-corruption, memory-exposure","{'text': 'CVE-2020-35876', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35876'}, {'text': 'GHSA-8rc5-mr4f-m243', 'url': 'https://github.com/advisories/GHSA-8rc5-mr4f-m243'}","{'text': 'https://github.com/spacejam/rio/issues/11', 'url': 'https://github.com/spacejam/rio/issues/11'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"When ario::Completionis leaked, its drop code will not run. The drop code
is responsible for waiting until the kernel completes the I/O operation into, or
out of, the buffer borrowed byrio::Completion. Leaking the struct will allow
one to access and/or drop the buffer, which can lead to a use-after-free,
data races or leaking secrets. Upstream is not interested in fixing the issue. Advisory available underCC0-1.0license."
CRITICAL,Ozone contains several memory safety issues,"July  4, 2020","October  1, 2020(last modified: June 13, 2023)",ozone(crates.io),/packages/ozone.html,Vulnerability,"{'text': 'CVE-2020-35877', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35877'}, {'text': 'CVE-2020-35878', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35878'}, {'text': 'GHSA-m3ww-7hrp-gw9w', 'url': 'https://github.com/advisories/GHSA-m3ww-7hrp-gw9w'}, {'text': 'GHSA-p2q9-9cq6-h3jw', 'url': 'https://github.com/advisories/GHSA-p2q9-9cq6-h3jw'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,Ozone contains several memory safety issues includingout-of-bound accessand dropping ofuninitialized memory. Advisory available underCC0-1.0license.
CRITICAL,bespoke Cell implementation allows obtaining several mutable references to the same data,"January  8, 2020","October  1, 2020(last modified: June 13, 2023)",actix-utils(crates.io),/packages/actix-utils.html,INFOUnsound,memory-corruption,"{'text': 'CVE-2020-35898', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35898'}, {'text': 'GHSA-hhw2-pqhf-vmx2', 'url': 'https://github.com/advisories/GHSA-hhw2-pqhf-vmx2'}","{'text': 'https://github.com/actix/actix-net/issues/160', 'url': 'https://github.com/actix/actix-net/issues/160'}",9.1CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,None,None,Unchanged,None,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityNoneIntegrityHighAvailabilityHigh,None,None,Unchanged,None,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H,>=2.0.0,"The custom implementation of a Cell primitive in the affected versions of this crate
does not keep track of mutable references to the underlying data. This allows obtaining several mutable references to the same object
which may result in arbitrary memory corruption, most likely use-after-free. The flaw was corrected by switching from a bespokeCell<T>implementation toRc<RefCell<T>>. Advisory available underCC0-1.0license."
CRITICAL,Use-after-free in Framed due to lack of pinning,"January 30, 2020","October  1, 2020(last modified: June 13, 2023)",actix-codec(crates.io),/packages/actix-codec.html,Vulnerability,memory-corruption,"{'text': 'CVE-2020-35902', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35902'}, {'text': 'GHSA-rqgx-hpg4-456r', 'url': 'https://github.com/advisories/GHSA-rqgx-hpg4-456r'}","{'text': 'https://github.com/actix/actix-net/issues/91', 'url': 'https://github.com/actix/actix-net/issues/91'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.3.0-beta.1,"Affected versions of this crate did not require the buffer wrapped inFramedto be pinned,
but treated it as if it had a fixed location in memory. This may result in a use-after-free. The flaw was corrected by making the affected functions acceptPin<&mut Self>instead of&mut self. Advisory available underCC0-1.0license."
CRITICAL,linked-hash-map creates uninitialized NonNull pointer,"June 23, 2020","October  1, 2020(last modified: June 13, 2023)",linked-hash-map(crates.io),/packages/linked-hash-map.html,INFOUnsound,"{'text': 'CVE-2020-25573', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25573'}, {'text': 'GHSA-r43h-gmrm-h5c9', 'url': 'https://github.com/advisories/GHSA-r43h-gmrm-h5c9'}","{'text': 'https://github.com/contain-rs/linked-hash-map/pull/100', 'url': 'https://github.com/contain-rs/linked-hash-map/pull/100'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.5.3,"Affected versions of this crate calledmem::uninitialized()to create aNonNull<T>,
which is undefined behavior. The flaw was corrected by avoiding the use ofmem::uninitialized(). Advisory available underCC0-1.0license."
CRITICAL,Enum repr causing potential memory corruption,"December 18, 2018","October  1, 2020(last modified: June 13, 2023)",arrayfire(crates.io),/packages/arrayfire.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2018-20998', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20998'}, {'text': 'GHSA-69fv-gw6g-8ccg', 'url': 'https://github.com/advisories/GHSA-69fv-gw6g-8ccg'}","{'text': 'https://github.com/arrayfire/arrayfire-rust/pull/177', 'url': 'https://github.com/arrayfire/arrayfire-rust/pull/177'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=3.6.0,<=3.5.0,x86_64,windows,"The attribute repr() added to enums to be compatible with C-FFI caused
memory corruption on MSVC toolchain. arrayfire crates <= version 3.5.0 do not have this issue when used with
Rust versions 1.27 or earlier. The issue only started to appear since
Rust version 1.28. The issue seems to be interlinked with which version of Rust is being used. The issue was fixed in crate 3.6.0. Advisory available underCC0-1.0license."
CRITICAL,Matrix::new() drops uninitialized memory,"August 25, 2020","October  1, 2020(last modified: June 13, 2023)",alg_ds(crates.io),/packages/alg_ds.html,Vulnerability,"{'text': 'CVE-2020-36432', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36432'}, {'text': 'GHSA-3vv3-frrq-6486', 'url': 'https://github.com/advisories/GHSA-3vv3-frrq-6486'}","{'text': 'https://gitlab.com/dvshapkin/alg-ds/-/issues/1', 'url': 'https://gitlab.com/dvshapkin/alg-ds/-/issues/1'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,no patched versions,"Matrix::new()internally callsMatrix::fill_with()which uses*ptr = valuepattern to initialize the buffer.
This pattern assumes that there is an initialized struct at the address and drops it, which results in dropping of uninitialized struct. Advisory available underCC0-1.0license."
CRITICAL,HeaderMap::Drain API is unsound,"November 16, 2019","October  1, 2020(last modified: June 13, 2023)",http(crates.io),/packages/http.html,Vulnerability,memory-corruption,,"{'text': 'CVE-2019-25009', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-25009'}, {'text': 'GHSA-6rhx-hqxm-8p36', 'url': 'https://github.com/advisories/GHSA-6rhx-hqxm-8p36'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.1.20,Version,<0.1.20,"Affected versions of this crate incorrectly used raw pointer,
which introduced unsoundness in its public safe API. Failing to drop the Drain struct causes double-free,
andit is possible to violate Rust's alias rule and cause data race with Drain's Iterator implementation. The flaw was corrected in 0.1.20 release ofhttpcrate. Advisory available underCC0-1.0license.",http;;header;;headermap;;drain,<0.1.20
CRITICAL,sigstack allocation bug can cause memory corruption or leak,"January 24, 2020","October  1, 2020(last modified: June 13, 2023)",lucet-runtime-internals(crates.io),/packages/lucet-runtime-internals.html,Vulnerability,"memory-corruption, memory-exposure","{'text': 'CVE-2020-35859', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35859'}, {'text': 'GHSA-3933-wvjf-pcvc', 'url': 'https://github.com/advisories/GHSA-3933-wvjf-pcvc'}","{'text': 'https://github.com/bytecodealliance/lucet/pull/401', 'url': 'https://github.com/bytecodealliance/lucet/pull/401'}",9.1CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityHigh,None,None,Unchanged,High,None,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityNoneAvailabilityHigh,None,None,Unchanged,High,None,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H,"<0.5.0, >=0.4.3>=0.5.1","An embedding using affected versions of lucet-runtime configured to use
non-default Wasm globals sizes of more than 4KiB, or compiled in debug mode
without optimizations, could leak data from the signal handler stack to guest
programs. This can potentially cause data from the embedding host to leak to
guest programs or cause corruption of guest program memory. This flaw was resolved by correcting the sigstack allocation logic. Advisory available underCC0-1.0license."
CRITICAL,Use after free in CMS Signing,"June  1, 2018","October  1, 2020(last modified: June 13, 2023)",openssl(crates.io),/packages/openssl.html,Vulnerability,,"{'text': 'CVE-2018-20997', 'url': 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20997'}, {'text': 'GHSA-xjxc-vfw2-cg96', 'url': 'https://github.com/advisories/GHSA-xjxc-vfw2-cg96'}","{'text': 'https://github.com/sfackler/rust-openssl/pull/942', 'url': 'https://github.com/sfackler/rust-openssl/pull/942'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=0.10.9,<0.10.8,Affected versions of the OpenSSL crate used structures after they'd been freed. Advisory available underCC0-1.0license.
CRITICAL,Buffer overflow vulnerability in str::repeat(),"September 21, 2018","October  1, 2020",std,/packages/std.html,Vulnerability,"denial-of-service, memory-corruption","{'text': 'https://groups.google.com/forum/#!topic/rustlang-security-announcements/CmSuTm-SaU0', 'url': 'https://groups.google.com/forum/#!topic/rustlang-security-announcements/CmSuTm-SaU0'}",9.8CRITICAL,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,Network,LowPrivileges requiredNoneUser interactionNoneScopeUnchangedConfidentialityHighIntegrityHighAvailabilityHigh,None,None,Unchanged,High,High,High,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H,>=1.29.1,<1.26.0,Version,"<1.29.1, >=1.26.0","The Rust team was recently notified of a security vulnerability affecting
thestr::repeatfunction in the standard library. If your code does not
use this function, it is not affected. This vulnerability is an instance of CWE-680: Integer Overflow to Buffer
Overflow1. Thestr::repeatfunction in the standard library allows repeating a
string a fixed number of times, returning an owned version of the final
string. The capacity of the final string is calculated by multiplying
the length of the string being repeated by the number of copies. This
calculation can overflow, and this case was not properly checked for. The rest of the implementation ofstr::repeatcontains unsafe code
that relies on a preallocated vector having the capacity calculated
earlier. On integer overflow the capacity will be less than required,
and which then writes outside of the allocated buffer, leading to
buffer overflow. While thestr::repeatfunction has been in Rust since 1.16.0, this
vulnerability was introduced into the standard library in pull
request #486572. The pull request was merged on March 6, 2018 and
was first part of the 1.26.0 stable released on May 10, 2018. As such, this vulnerability affects: This bug can be mitigated manually by auditing for calls tostr::repeatand testing if the resulting vector's capacity will overflow. If it does,
then the program should panic. For Rust 1.29, we'll be releasing a 1.29.1 on 2018-09-25 with the fix,
which consists of checking for overflow and deterministically panicking
if it happens. Nightlies and betas produced after 2019-09-21 will also
contain a fix for this issue. We will not be releasing our own fixes for previous versions of Rust.
The patch to fix 1.29 should roughly applicable to older versions, although
the implementation has seen a few refactorings since it was introduced.
The patch for 1.29 is included at the end of this email. If you
need assistance patching an older version of Rust on your own, please reach
out to our security mailing list, security@rust-lang.org, and we'll be happy
to help. The current beta and nightly channels will be updated with a fix for this
issue as well. Thanks to Scott McMurray, who found this bug and reported it to us in
accordance with our security policy https://www.rust-lang.org/security.html. Advisory available underCC0-1.0license.",std;;str;;repeat,"<1.29.1, >=1.26.0"
